
> polished@5.0.0 test /Users/brianhough/Repos/polished
> jest src

ts-jest[config] (WARN) [94mmessage[0m[90m TS151001: [0mIf you have issues related to imports, you should consider setting `esModuleInterop` to `true` in your TypeScript configuration file (usually `tsconfig.json`). See https://blogs.msdn.microsoft.com/typescript/2018/01/31/announcing-typescript-2-7/#easier-ecmascript-module-interoperability for more information.
ts-jest[config] (WARN) [94mmessage[0m[90m TS151001: [0mIf you have issues related to imports, you should consider setting `esModuleInterop` to `true` in your TypeScript configuration file (usually `tsconfig.json`). See https://blogs.msdn.microsoft.com/typescript/2018/01/31/announcing-typescript-2-7/#easier-ecmascript-module-interoperability for more information.
ts-jest[config] (WARN) [94mmessage[0m[90m TS151001: [0mIf you have issues related to imports, you should consider setting `esModuleInterop` to `true` in your TypeScript configuration file (usually `tsconfig.json`). See https://blogs.msdn.microsoft.com/typescript/2018/01/31/announcing-typescript-2-7/#easier-ecmascript-module-interoperability for more information.
ts-jest[config] (WARN) [94mmessage[0m[90m TS151001: [0mIf you have issues related to imports, you should consider setting `esModuleInterop` to `true` in your TypeScript configuration file (usually `tsconfig.json`). See https://blogs.msdn.microsoft.com/typescript/2018/01/31/announcing-typescript-2-7/#easier-ecmascript-module-interoperability for more information.
ts-jest[config] (WARN) [94mmessage[0m[90m TS151001: [0mIf you have issues related to imports, you should consider setting `esModuleInterop` to `true` in your TypeScript configuration file (usually `tsconfig.json`). See https://blogs.msdn.microsoft.com/typescript/2018/01/31/announcing-typescript-2-7/#easier-ecmascript-module-interoperability for more information.
ts-jest[config] (WARN) [94mmessage[0m[90m TS151001: [0mIf you have issues related to imports, you should consider setting `esModuleInterop` to `true` in your TypeScript configuration file (usually `tsconfig.json`). See https://blogs.msdn.microsoft.com/typescript/2018/01/31/announcing-typescript-2-7/#easier-ecmascript-module-interoperability for more information.
ts-jest[config] (WARN) [94mmessage[0m[90m TS151001: [0mIf you have issues related to imports, you should consider setting `esModuleInterop` to `true` in your TypeScript configuration file (usually `tsconfig.json`). See https://blogs.msdn.microsoft.com/typescript/2018/01/31/announcing-typescript-2-7/#easier-ecmascript-module-interoperability for more information.
ts-jest[config] (WARN) [94mmessage[0m[90m TS151001: [0mIf you have issues related to imports, you should consider setting `esModuleInterop` to `true` in your TypeScript configuration file (usually `tsconfig.json`). See https://blogs.msdn.microsoft.com/typescript/2018/01/31/announcing-typescript-2-7/#easier-ecmascript-module-interoperability for more information.
ts-jest[config] (WARN) [94mmessage[0m[90m TS151001: [0mIf you have issues related to imports, you should consider setting `esModuleInterop` to `true` in your TypeScript configuration file (usually `tsconfig.json`). See https://blogs.msdn.microsoft.com/typescript/2018/01/31/announcing-typescript-2-7/#easier-ecmascript-module-interoperability for more information.
FAIL src/internalHelpers/test/_hslToRgb.test.ts
  hslToRgb
    ‚úì should convert numbers to an RGB color (1 ms)
    ‚úì should convert the color red
    ‚úì should convert the color yellow
    ‚úì should convert the color lime
    ‚úì should convert the color cyan (1 ms)
    ‚úì should convert the color blue
    ‚úì should convert the color magenta
    ‚úï should convert black (2 ms)
    ‚úï should convert correctly even when passed a "faulty" negative hue

  ‚óè hslToRgb ‚Ä∫ should convert black

    expect(received).toEqual(expected) // deep equality

    Expected: "102,102,102"
    Received: "26010,26010,26010"

      31 |
      32 |   it('should convert black', () => {
    > 33 |     expect(hslToRgb(360, 0, 0.4)).toEqual('102,102,102')
         |                                   ^
      34 |   })
      35 |
      36 |   it('should convert correctly even when passed a "faulty" negative hue', () => {

      at Object.<anonymous> (src/internalHelpers/test/_hslToRgb.test.ts:33:35)

  ‚óè hslToRgb ‚Ä∫ should convert correctly even when passed a "faulty" negative hue

    expect(received).toEqual(expected) // deep equality

    Expected: "255,0,43"
    Received: "255,-43,0"

      35 |
      36 |   it('should convert correctly even when passed a "faulty" negative hue', () => {
    > 37 |     expect(hslToRgb(-10, 1, 0.5)).toEqual('255,0,43')
         |                                   ^
      38 |     expect(hslToRgb(-100, 1, 0.5)).toEqual('85,0,255')
      39 |     expect(hslToRgb(-1000, 1, 0.5)).toEqual('170,255,0')
      40 |   })

      at Object.<anonymous> (src/internalHelpers/test/_hslToRgb.test.ts:37:35)

FAIL src/internalHelpers/test/_hslToHex.test.ts
  hslToHex
    ‚úï should convert numbers to a hex color (3 ms)
    ‚úï should convert the color red
    ‚úï should convert the color yellow
    ‚úï should convert the color lime
    ‚úï should convert the color cyan
    ‚úï should convert the color blue
    ‚úï should convert the color magenta (1 ms)
    ‚úï should convert black

  ‚óè hslToHex ‚Ä∫ should convert numbers to a hex color

    expect(received).toEqual(expected) // deep equality

    Expected: "#b31919"
    Received: "#b1ce19661966"

      3 | describe('hslToHex', () => {
      4 |   it('should convert numbers to a hex color', () => {
    > 5 |     expect(hslToHex(360, 0.75, 0.4)).toEqual('#b31919')
        |                                      ^
      6 |   })
      7 |
      8 |   it('should convert the color red', () => {

      at Object.<anonymous> (src/internalHelpers/test/_hslToHex.test.ts:5:38)

  ‚óè hslToHex ‚Ä∫ should convert the color red

    expect(received).toEqual(expected) // deep equality

    Expected: "#ff0000"
    Received: "#fe010000"

       7 |
       8 |   it('should convert the color red', () => {
    >  9 |     expect(hslToHex(0, 1, 0.5)).toEqual('#ff0000')
         |                                 ^
      10 |   })
      11 |
      12 |   it('should convert the color yellow', () => {

      at Object.<anonymous> (src/internalHelpers/test/_hslToHex.test.ts:9:33)

  ‚óè hslToHex ‚Ä∫ should convert the color yellow

    expect(received).toEqual(expected) // deep equality

    Expected: "#ffff00"
    Received: "#fe01fe0100"

      11 |
      12 |   it('should convert the color yellow', () => {
    > 13 |     expect(hslToHex(60, 1, 0.5)).toEqual('#ffff00')
         |                                  ^
      14 |   })
      15 |
      16 |   it('should convert the color lime', () => {

      at Object.<anonymous> (src/internalHelpers/test/_hslToHex.test.ts:13:34)

  ‚óè hslToHex ‚Ä∫ should convert the color lime

    expect(received).toEqual(expected) // deep equality

    Expected: "#00ff00"
    Received: "#00fe0100"

      15 |
      16 |   it('should convert the color lime', () => {
    > 17 |     expect(hslToHex(120, 1, 0.5)).toEqual('#00ff00')
         |                                   ^
      18 |   })
      19 |
      20 |   it('should convert the color cyan', () => {

      at Object.<anonymous> (src/internalHelpers/test/_hslToHex.test.ts:17:35)

  ‚óè hslToHex ‚Ä∫ should convert the color cyan

    expect(received).toEqual(expected) // deep equality

    Expected: "#00ffff"
    Received: "#00fe01fe01"

      19 |
      20 |   it('should convert the color cyan', () => {
    > 21 |     expect(hslToHex(180, 1, 0.5)).toEqual('#00ffff')
         |                                   ^
      22 |   })
      23 |
      24 |   it('should convert the color blue', () => {

      at Object.<anonymous> (src/internalHelpers/test/_hslToHex.test.ts:21:35)

  ‚óè hslToHex ‚Ä∫ should convert the color blue

    expect(received).toEqual(expected) // deep equality

    Expected: "#0000ff"
    Received: "#0000fe01"

      23 |
      24 |   it('should convert the color blue', () => {
    > 25 |     expect(hslToHex(240, 1, 0.5)).toEqual('#0000ff')
         |                                   ^
      26 |   })
      27 |
      28 |   it('should convert the color magenta', () => {

      at Object.<anonymous> (src/internalHelpers/test/_hslToHex.test.ts:25:35)

  ‚óè hslToHex ‚Ä∫ should convert the color magenta

    expect(received).toEqual(expected) // deep equality

    Expected: "#ff00ff"
    Received: "#fe0100fe01"

      27 |
      28 |   it('should convert the color magenta', () => {
    > 29 |     expect(hslToHex(300, 1, 0.5)).toEqual('#ff00ff')
         |                                   ^
      30 |   })
      31 |
      32 |   it('should convert black', () => {

      at Object.<anonymous> (src/internalHelpers/test/_hslToHex.test.ts:29:35)

  ‚óè hslToHex ‚Ä∫ should convert black

    expect(received).toEqual(expected) // deep equality

    Expected: "#666666"
    Received: "#653466653466653466"

      31 |
      32 |   it('should convert black', () => {
    > 33 |     expect(hslToHex(360, 0, 0.4)).toEqual('#666666')
         |                                   ^
      34 |   })
      35 | })
      36 |

      at Object.<anonymous> (src/internalHelpers/test/_hslToHex.test.ts:33:35)

FAIL src/internalHelpers/test/_constructGradientValue.test.ts
  constructGradientValue
    ‚úï constructs a gradient value (3 ms)
    ‚úì constructs a gradient value without trailing space if color-stops is the only param provided
    ‚úì constructs a gradient value with no substitutions

  ‚óè constructGradientValue ‚Ä∫ constructs a gradient value

    expect(received).toEqual(expected) // deep equality

    Expected: "literal1substitution1 literal2, substitution2"
    Received: "literal1substitution1 literal, substitution2"

       5 |     const literals = ['literal1', 'literal2']
       6 |     const substitutions = ['substitution1', 'substitution2']
    >  7 |     expect(constructGradientValue(literals, ...substitutions)).toEqual(
         |                                                                ^
       8 |       'literal1substitution1 literal2, substitution2',
       9 |     )
      10 |   })

      at Object.<anonymous> (src/internalHelpers/test/_constructGradientValue.test.ts:7:64)

FAIL src/internalHelpers/test/_rgbToHsl.test.ts
  rgbToHsl
    ‚úì should convert black to HSL (1 ms)
    ‚úì should convert white to HSL (1 ms)
    ‚úì should convert red to HSL
    ‚úì should convert green to HSL
    ‚úì should convert blue to HSL
    ‚úì should convert yellow to HSL (1 ms)
    ‚úì should convert cyan to HSL
    ‚úì should convert magenta to HSL
    ‚úï should convert gray to HSL (2 ms)
    ‚úï should convert a custom color to HSL
    ‚úì should convert an RGBA color to HSLA
    ‚úì should convert an RGB color to HSL

  ‚óè rgbToHsl ‚Ä∫ should convert gray to HSL

    expect(received).toEqual(expected) // deep equality

    - Expected  - 1
    + Received  + 1

      Object {
        "hue": 0,
    -   "lightness": 0.5,
    +   "lightness": 0.5019607843137255,
        "saturation": 0,
      }

      64 |
      65 |   it('should convert gray to HSL', () => {
    > 66 |     expect(rgbToHsl({ red: 128, green: 128, blue: 128 })).toEqual({
         |                                                           ^
      67 |       hue: 0,
      68 |       saturation: 0,
      69 |       lightness: 0.5,

      at Object.<anonymous> (src/internalHelpers/test/_rgbToHsl.test.ts:66:59)

  ‚óè rgbToHsl ‚Ä∫ should convert a custom color to HSL

    expect(received).toEqual(expected) // deep equality

    - Expected  - 1
    + Received  + 1

      Object {
        "hue": 300,
    -   "lightness": 0.25,
    +   "lightness": 0.25098039215686274,
        "saturation": 1,
      }

      72 |
      73 |   it('should convert a custom color to HSL', () => {
    > 74 |     expect(rgbToHsl({ red: 128, green: 0, blue: 128 })).toEqual({
         |                                                         ^
      75 |       hue: 300,
      76 |       saturation: 1,
      77 |       lightness: 0.25,

      at Object.<anonymous> (src/internalHelpers/test/_rgbToHsl.test.ts:74:57)

FAIL src/internalHelpers/test/_statefulSelectors.test.ts
  statefulSelectors
    ‚úì populates selectors for a single state (1 ms)
    ‚úì populates selectors for multiple states
    ‚úì populates both base selectors and selectors for a single state
    ‚úï populates both base selectors and selectors for a single state when not passed a stateMap (1 ms)
    ‚úï throws an error when passed an unsupported selector state (9 ms)
    ‚úï throws an error when passed an unsupported selector state in a list (12 ms)
    ‚úï throws an error when not passed a template (1 ms)

  ‚óè statefulSelectors ‚Ä∫ populates both base selectors and selectors for a single state when not passed a stateMap

    PolishedError 68

      22 |   if (!template) throw new PolishedError(67)
      23 |   const invalidStates = states.filter(state => !stateMap?.includes(state))
    > 24 |   if (invalidStates.length) throw new PolishedError(68)
         |                                   ^
      25 |   return states.map(state => generateSelectors(template, state)).join(',')
      26 | }
      27 |

      at statefulSelectors (src/internalHelpers/_statefulSelectors.ts:24:35)
      at Object.<anonymous> (src/internalHelpers/test/_statefulSelectors.test.ts:31:29)

  ‚óè statefulSelectors ‚Ä∫ throws an error when passed an unsupported selector state

    expect(received).toThrow(expected)

    Expected substring: "You passed an unsupported selector state to this method"
    Received message:   "PolishedError 68"

          22 |   if (!template) throw new PolishedError(67)
          23 |   const invalidStates = states.filter(state => !stateMap?.includes(state))
        > 24 |   if (invalidStates.length) throw new PolishedError(68)
             |                                   ^
          25 |   return states.map(state => generateSelectors(template, state)).join(',')
          26 | }
          27 |

      at statefulSelectors (src/internalHelpers/_statefulSelectors.ts:24:35)
      at src/internalHelpers/test/_statefulSelectors.test.ts:38:24
      at Object.<anonymous> (node_modules/.pnpm/expect@29.5.0/node_modules/expect/build/toThrowMatchers.js:74:11)
      at Object.throwingMatcher [as toThrow] (node_modules/.pnpm/expect@29.5.0/node_modules/expect/build/index.js:312:21)
      at Object.<anonymous> (src/internalHelpers/test/_statefulSelectors.test.ts:39:8)
      at Object.<anonymous> (src/internalHelpers/test/_statefulSelectors.test.ts:39:8)

  ‚óè statefulSelectors ‚Ä∫ throws an error when passed an unsupported selector state in a list

    expect(received).toThrow(expected)

    Expected substring: "You passed an unsupported selector state to this method"
    Received message:   "PolishedError 68"

          22 |   if (!template) throw new PolishedError(67)
          23 |   const invalidStates = states.filter(state => !stateMap?.includes(state))
        > 24 |   if (invalidStates.length) throw new PolishedError(68)
             |                                   ^
          25 |   return states.map(state => generateSelectors(template, state)).join(',')
          26 | }
          27 |

      at statefulSelectors (src/internalHelpers/_statefulSelectors.ts:24:35)
      at src/internalHelpers/test/_statefulSelectors.test.ts:44:24
      at Object.<anonymous> (node_modules/.pnpm/expect@29.5.0/node_modules/expect/build/toThrowMatchers.js:74:11)
      at Object.throwingMatcher [as toThrow] (node_modules/.pnpm/expect@29.5.0/node_modules/expect/build/index.js:312:21)
      at Object.<anonymous> (src/internalHelpers/test/_statefulSelectors.test.ts:45:8)
      at Object.<anonymous> (src/internalHelpers/test/_statefulSelectors.test.ts:45:8)

  ‚óè statefulSelectors ‚Ä∫ throws an error when not passed a template

    expect(received).toThrow(expected)

    Expected substring: "You must provide a template to this method."
    Received message:   "PolishedError 67"

          20 |   stateMap?: InteractionState[],
          21 | ): string {
        > 22 |   if (!template) throw new PolishedError(67)
             |                        ^
          23 |   const invalidStates = states.filter(state => !stateMap?.includes(state))
          24 |   if (invalidStates.length) throw new PolishedError(68)
          25 |   return states.map(state => generateSelectors(template, state)).join(',')

      at statefulSelectors (src/internalHelpers/_statefulSelectors.ts:22:24)
      at src/internalHelpers/test/_statefulSelectors.test.ts:51:24
      at Object.<anonymous> (node_modules/.pnpm/expect@29.5.0/node_modules/expect/build/toThrowMatchers.js:74:11)
      at Object.throwingMatcher [as toThrow] (node_modules/.pnpm/expect@29.5.0/node_modules/expect/build/index.js:312:21)
      at Object.<anonymous> (src/internalHelpers/test/_statefulSelectors.test.ts:52:8)
      at Object.<anonymous> (src/internalHelpers/test/_statefulSelectors.test.ts:52:8)

FAIL src/internalHelpers/test/_nameToHex.test.ts
  memoizedNameToHex
    ‚úï should convert a named color to a hex value (29 ms)
    ‚úï should convert a camel-cased named color to a hex value
    ‚úì should return a passed hex value without mutation
    ‚úì should return a passed RGB string value without mutation
    ‚úì should return a passed HSL value without mutation
    ‚úì should return a non-string value without mutation

  ‚óè memoizedNameToHex ‚Ä∫ should convert a named color to a hex value

    expect(received).toEqual(expected) // deep equality

    Expected: "#fff"
    Received: "white"

      3 | describe('memoizedNameToHex', () => {
      4 |   it('should convert a named color to a hex value', () => {
    > 5 |     expect(memoizedNameToHex('white')).toEqual('#fff')
        |                                        ^
      6 |   })
      7 |
      8 |   it('should convert a camel-cased named color to a hex value', () => {

      at Object.<anonymous> (src/internalHelpers/test/_nameToHex.test.ts:5:40)

  ‚óè memoizedNameToHex ‚Ä∫ should convert a camel-cased named color to a hex value

    expect(received).toEqual(expected) // deep equality

    Expected: "#b0e0e6"
    Received: "PowderBlue"

       7 |
       8 |   it('should convert a camel-cased named color to a hex value', () => {
    >  9 |     expect(memoizedNameToHex('PowderBlue')).toEqual('#b0e0e6')
         |                                             ^
      10 |   })
      11 |
      12 |   it('should return a passed hex value without mutation', () => {

      at Object.<anonymous> (src/internalHelpers/test/_nameToHex.test.ts:9:45)

FAIL src/internalHelpers/test/_reduceHexValue.test.ts
  reduceHexValue
    ‚úì should reduce #ffffff to #fff (1 ms)
    ‚úì should reduce #884422 to #842
    ‚úì should not reduce #112234
    ‚úì should not reduce #fff (1 ms)
    ‚úì should return the value in case it can not be reduced
    ‚úì should reduce #ffccdd to #fcd
    ‚úì should reduce #aabbcc to #abc
    ‚úì should reduce #112233 to #123
    ‚úì should reduce #000000 to #000
    ‚úï should reduce #ffffff to #fff even with uppercase letters (2 ms)

  ‚óè reduceHexValue ‚Ä∫ should reduce #ffffff to #fff even with uppercase letters

    expect(received).toEqual(expected) // deep equality

    Expected: "#fff"
    Received: "#FFF"

      39 |
      40 |   it('should reduce #ffffff to #fff even with uppercase letters', () => {
    > 41 |     expect(reduceHexValue('#FFFFFF')).toEqual('#fff')
         |                                       ^
      42 |   })
      43 | })
      44 |

      at Object.<anonymous> (src/internalHelpers/test/_reduceHexValue.test.ts:41:39)

FAIL src/helpers/test/stripUnit.test.ts
  stripUnit
    ‚úì should strip px from 1 (1 ms)
    ‚úì should strip px from 1.5
    ‚úì should strip px from 100
    ‚úì should strip px from 33.33
    ‚úì should strip px from 80
    ‚úì should strip px from 33.3 (1 ms)
    ‚úì should strip pt from 1
    ‚úì should strip pt from 1.5
    ‚úì should strip pt from 100
    ‚úì should strip pt from 33.33
    ‚úì should strip pt from 80
    ‚úì should strip pt from 33.3 (1 ms)
    ‚úì should strip pc from 1
    ‚úì should strip pc from 1.5
    ‚úì should strip pc from 100
    ‚úì should strip pc from 33.33
    ‚úì should strip pc from 80
    ‚úì should strip pc from 33.3
    ‚úì should strip mm from 1
    ‚úì should strip mm from 1.5
    ‚úì should strip mm from 100
    ‚úì should strip mm from 33.33
    ‚úì should strip mm from 80
    ‚úì should strip mm from 33.3
    ‚úì should strip q from 1
    ‚úì should strip q from 1.5
    ‚úì should strip q from 100
    ‚úì should strip q from 33.33
    ‚úì should strip q from 80
    ‚úì should strip q from 33.3
    ‚úì should strip cm from 1
    ‚úì should strip cm from 1.5
    ‚úì should strip cm from 100
    ‚úì should strip cm from 33.33
    ‚úì should strip cm from 80
    ‚úì should strip cm from 33.3
    ‚úì should strip in from 1
    ‚úì should strip in from 1.5
    ‚úì should strip in from 100
    ‚úì should strip in from 33.33 (1 ms)
    ‚úì should strip in from 80
    ‚úì should strip in from 33.3
    ‚úì should strip em from 1
    ‚úì should strip em from 1.5
    ‚úì should strip em from 100
    ‚úì should strip em from 33.33
    ‚úì should strip em from 80
    ‚úì should strip em from 33.3
    ‚úì should strip rem from 1
    ‚úì should strip rem from 1.5
    ‚úì should strip rem from 100
    ‚úì should strip rem from 33.33
    ‚úì should strip rem from 80
    ‚úì should strip rem from 33.3 (1 ms)
    ‚úì should strip ex from 1
    ‚úì should strip ex from 1.5
    ‚úì should strip ex from 100
    ‚úì should strip ex from 33.33 (13 ms)
    ‚úì should strip ex from 80
    ‚úì should strip ex from 33.3
    ‚úì should strip ch from 1
    ‚úì should strip ch from 1.5
    ‚úì should strip ch from 100
    ‚úì should strip ch from 33.33
    ‚úì should strip ch from 80
    ‚úì should strip ch from 33.3
    ‚úì should strip vh from 1
    ‚úì should strip vh from 1.5
    ‚úì should strip vh from 100
    ‚úì should strip vh from 33.33
    ‚úì should strip vh from 80
    ‚úì should strip vh from 33.3
    ‚úì should strip vw from 1
    ‚úì should strip vw from 1.5
    ‚úì should strip vw from 100
    ‚úì should strip vw from 33.33
    ‚úì should strip vw from 80 (2 ms)
    ‚úì should strip vw from 33.3 (1 ms)
    ‚úì should strip vmin from 1
    ‚úì should strip vmin from 1.5
    ‚úì should strip vmin from 100
    ‚úì should strip vmin from 33.33
    ‚úì should strip vmin from 80
    ‚úì should strip vmin from 33.3
    ‚úì should strip vmax from 1
    ‚úì should strip vmax from 1.5
    ‚úì should strip vmax from 100
    ‚úì should strip vmax from 33.33
    ‚úì should strip vmax from 80
    ‚úì should strip vmax from 33.3
    ‚úï should strip % from 1 (1 ms)
    ‚úï should strip % from 1.5
    ‚úï should strip % from 100 (1 ms)
    ‚úï should strip % from 33.33
    ‚úï should strip % from 80
    ‚úï should strip % from 33.3
    ‚úì should return a unitless value when passed
    ‚úì should return the original string when passed an invalid value

  ‚óè stripUnit ‚Ä∫ should strip % from 1

    expect(received).toEqual(expected) // deep equality

    Expected: 1
    Received: "1%"

      25 |     for (const value of values) {
      26 |       it(`should strip ${unit} from ${value}`, () => {
    > 27 |         expect(stripUnit(`${value}${unit}`)).toEqual(value)
         |                                              ^
      28 |       })
      29 |     }
      30 |   }

      at Object.<anonymous> (src/helpers/test/stripUnit.test.ts:27:46)

  ‚óè stripUnit ‚Ä∫ should strip % from 1.5

    expect(received).toEqual(expected) // deep equality

    Expected: 1.5
    Received: "1.5%"

      25 |     for (const value of values) {
      26 |       it(`should strip ${unit} from ${value}`, () => {
    > 27 |         expect(stripUnit(`${value}${unit}`)).toEqual(value)
         |                                              ^
      28 |       })
      29 |     }
      30 |   }

      at Object.<anonymous> (src/helpers/test/stripUnit.test.ts:27:46)

  ‚óè stripUnit ‚Ä∫ should strip % from 100

    expect(received).toEqual(expected) // deep equality

    Expected: 100
    Received: "100%"

      25 |     for (const value of values) {
      26 |       it(`should strip ${unit} from ${value}`, () => {
    > 27 |         expect(stripUnit(`${value}${unit}`)).toEqual(value)
         |                                              ^
      28 |       })
      29 |     }
      30 |   }

      at Object.<anonymous> (src/helpers/test/stripUnit.test.ts:27:46)

  ‚óè stripUnit ‚Ä∫ should strip % from 33.33

    expect(received).toEqual(expected) // deep equality

    Expected: 33.33
    Received: "33.33%"

      25 |     for (const value of values) {
      26 |       it(`should strip ${unit} from ${value}`, () => {
    > 27 |         expect(stripUnit(`${value}${unit}`)).toEqual(value)
         |                                              ^
      28 |       })
      29 |     }
      30 |   }

      at Object.<anonymous> (src/helpers/test/stripUnit.test.ts:27:46)

  ‚óè stripUnit ‚Ä∫ should strip % from 80

    expect(received).toEqual(expected) // deep equality

    Expected: 80
    Received: "80%"

      25 |     for (const value of values) {
      26 |       it(`should strip ${unit} from ${value}`, () => {
    > 27 |         expect(stripUnit(`${value}${unit}`)).toEqual(value)
         |                                              ^
      28 |       })
      29 |     }
      30 |   }

      at Object.<anonymous> (src/helpers/test/stripUnit.test.ts:27:46)

  ‚óè stripUnit ‚Ä∫ should strip % from 33.3

    expect(received).toEqual(expected) // deep equality

    Expected: 33.3
    Received: "33.3%"

      25 |     for (const value of values) {
      26 |       it(`should strip ${unit} from ${value}`, () => {
    > 27 |         expect(stripUnit(`${value}${unit}`)).toEqual(value)
         |                                              ^
      28 |       })
      29 |     }
      30 |   }

      at Object.<anonymous> (src/helpers/test/stripUnit.test.ts:27:46)

FAIL src/color/test/hsla.test.ts
  hsla
    ‚úì should convert numbers to a rgba color (1 ms)
    ‚úï should convert numbers to a hex color (2 ms)
    ‚úì should convert a hlsa object to a rgba color
    ‚úï should convert a hlsa object to a hex color (1 ms)
    ‚úï should convert to a reduce hex value if possible (1 ms)
    ‚úì should throw an error if an object and multiple arguments are passed (2 ms)

  ‚óè hsla ‚Ä∫ should convert numbers to a hex color

    expect(received).toEqual(expected) // deep equality

    - Expected  - 1
    + Received  + 1

      Object {
    -   "background": "#b31919",
    +   "background": "#b1ce19661966",
      }

      10 |
      11 |   it('should convert numbers to a hex color', () => {
    > 12 |     expect({ background: hsla(360, 0.75, 0.4, 1) }).toEqual({
         |                                                     ^
      13 |       background: '#b31919',
      14 |     })
      15 |   })

      at Object.<anonymous> (src/color/test/hsla.test.ts:12:53)

  ‚óè hsla ‚Ä∫ should convert a hlsa object to a hex color

    expect(received).toEqual(expected) // deep equality

    - Expected  - 1
    + Received  + 1

      Object {
    -   "background": "#b31919",
    +   "background": "#b1ce19661966",
      }

      36 |         alpha: 1,
      37 |       }),
    > 38 |     }).toEqual({
         |        ^
      39 |       background: '#b31919',
      40 |     })
      41 |   })

      at Object.<anonymous> (src/color/test/hsla.test.ts:38:8)

  ‚óè hsla ‚Ä∫ should convert to a reduce hex value if possible

    expect(received).toEqual(expected) // deep equality

    - Expected  - 1
    + Received  + 1

      Object {
    -   "background": "#c00",
    +   "background": "#cb340000",
      }

      42 |
      43 |   it('should convert to a reduce hex value if possible', () => {
    > 44 |     expect({ background: hsla(360, 1, 0.4, 1) }).toEqual({
         |                                                  ^
      45 |       background: '#c00',
      46 |     })
      47 |   })

      at Object.<anonymous> (src/color/test/hsla.test.ts:44:50)

FAIL src/helpers/test/cssVar.test.ts
  cssVar
    ‚úì gets a css variable (14 ms)
    ‚úì gets a hyphenated css variable (1 ms)
    ‚úì gets a complex hyphenated css variable
    ‚úì respects casing (1 ms)
    ‚úì respects complex values
    ‚úì returns default when variable isn't found (1 ms)
    ‚úï errors when variable is not found and no default is provided (12 ms)
    ‚úï errors when variable is not formatted correctly (1 ms)

  ‚óè cssVar ‚Ä∫ errors when variable is not found and no default is provided

    expect(received).toThrow(expected)

    Expected substring: "CSS variable not found and no default was provided."
    Received message:   "All values in a formula must have the same unit or be unitless."

          44 |   }
          45 |
        > 46 |   throw new PolishedError(74)
             |         ^
          47 | }
          48 |

      at cssVar (src/helpers/cssVar.ts:46:9)
      at src/helpers/test/cssVar.test.ts:38:13
      at Object.<anonymous> (node_modules/.pnpm/expect@29.5.0/node_modules/expect/build/toThrowMatchers.js:74:11)
      at Object.throwingMatcher [as toThrow] (node_modules/.pnpm/expect@29.5.0/node_modules/expect/build/index.js:312:21)
      at Object.<anonymous> (src/helpers/test/cssVar.test.ts:39:8)
      at Object.<anonymous> (src/helpers/test/cssVar.test.ts:39:8)

  ‚óè cssVar ‚Ä∫ errors when variable is not formatted correctly

    expect(received).toThrow(expected)

    Expected substring: "Please provide a valid CSS variable."
    Received message:   "Formula has too many closing parentheses at %s."

          28 | ): string | number {
          29 |   if (!cssVariable || !cssVariable.match(cssVariableRegex)) {
        > 30 |     throw new PolishedError(73)
             |           ^
          31 |   }
          32 |
          33 |   let variableValue: string | null = null

      at cssVar (src/helpers/cssVar.ts:30:11)
      at src/helpers/test/cssVar.test.ts:44:13
      at Object.<anonymous> (node_modules/.pnpm/expect@29.5.0/node_modules/expect/build/toThrowMatchers.js:74:11)
      at Object.throwingMatcher [as toThrow] (node_modules/.pnpm/expect@29.5.0/node_modules/expect/build/index.js:312:21)
      at Object.<anonymous> (src/helpers/test/cssVar.test.ts:45:8)
      at Object.<anonymous> (src/helpers/test/cssVar.test.ts:45:8)

FAIL src/internalHelpers/test/_pxto.test.ts
  pxto
    factory
      ‚úì should allow creating a simple pixels-to-x converter (1 ms)
    converter
      ‚úì should convert a simple number to ems
      ‚úì should convert a simple string with px to ems (1 ms)
      ‚úì should convert a complex number to ems
      ‚úì should convert a complex string with px to ems
      ‚úì should allow changing the base with a number
      ‚úì should allow changing the base with a string
      ‚úï should throw an error if a non-pixel value is passed for the first arg (16 ms)
      ‚úï should throw an error if a non-pixel value is passed for the second arg (1 ms)
      ‚úï should throw an error if an invalid pixel value is passed (1 ms)
      ‚úï should throw an error if an invalid base value is passed (1 ms)

  ‚óè pxto ‚Ä∫ converter ‚Ä∫ should throw an error if a non-pixel value is passed for the first arg

    expect(received).toThrow(expected)

    Expected substring: "Expected a string ending in \"px\" or a number passed as the first argument to em(), got 10em instead."
    Received message:   "Formula contains a function that needs parentheses at 10em."

          14 |
          15 |     if (typeof newPxval !== 'number') {
        > 16 |       throw new PolishedError(71, pxval, to)
             |             ^
          17 |     }
          18 |
          19 |     if (typeof newBase !== 'number') {

      at src/internalHelpers/_pxto.ts:16:13
      at src/internalHelpers/test/_pxto.test.ts:50:31
      at Object.<anonymous> (node_modules/.pnpm/expect@29.5.0/node_modules/expect/build/toThrowMatchers.js:74:11)
      at Object.throwingMatcher [as toThrow] (node_modules/.pnpm/expect@29.5.0/node_modules/expect/build/index.js:312:21)
      at Object.<anonymous> (src/internalHelpers/test/_pxto.test.ts:50:46)
      at Object.<anonymous> (src/internalHelpers/test/_pxto.test.ts:50:46)

  ‚óè pxto ‚Ä∫ converter ‚Ä∫ should throw an error if a non-pixel value is passed for the second arg

    expect(received).toThrow(expected)

    Expected substring: "Expected a string ending in \"px\" or a number passed as the second argument to em(), got 16em instead."
    Received message:   "Formula is missing closing parenthesis at 16em."

          18 |
          19 |     if (typeof newBase !== 'number') {
        > 20 |       throw new PolishedError(72, base, to)
             |             ^
          21 |     }
          22 |
          23 |     return `${newPxval / newBase}${to}`

      at src/internalHelpers/_pxto.ts:20:13
      at src/internalHelpers/test/_pxto.test.ts:56:31
      at Object.<anonymous> (node_modules/.pnpm/expect@29.5.0/node_modules/expect/build/toThrowMatchers.js:74:11)
      at Object.throwingMatcher [as toThrow] (node_modules/.pnpm/expect@29.5.0/node_modules/expect/build/index.js:312:21)
      at Object.<anonymous> (src/internalHelpers/test/_pxto.test.ts:56:54)
      at Object.<anonymous> (src/internalHelpers/test/_pxto.test.ts:56:54)

  ‚óè pxto ‚Ä∫ converter ‚Ä∫ should throw an error if an invalid pixel value is passed

    expect(received).toThrow(expected)

    Expected substring: "Passed invalid pixel value apx to em(), please pass a value like \"12px\" or 12."
    Received message:   "Formula contains a function that needs parentheses at apx."

          14 |
          15 |     if (typeof newPxval !== 'number') {
        > 16 |       throw new PolishedError(71, pxval, to)
             |             ^
          17 |     }
          18 |
          19 |     if (typeof newBase !== 'number') {

      at src/internalHelpers/_pxto.ts:16:13
      at src/internalHelpers/test/_pxto.test.ts:62:31
      at Object.<anonymous> (node_modules/.pnpm/expect@29.5.0/node_modules/expect/build/toThrowMatchers.js:74:11)
      at Object.throwingMatcher [as toThrow] (node_modules/.pnpm/expect@29.5.0/node_modules/expect/build/index.js:312:21)
      at Object.<anonymous> (src/internalHelpers/test/_pxto.test.ts:62:45)
      at Object.<anonymous> (src/internalHelpers/test/_pxto.test.ts:62:45)

  ‚óè pxto ‚Ä∫ converter ‚Ä∫ should throw an error if an invalid base value is passed

    expect(received).toThrow(expected)

    Expected substring: "Passed invalid base value apx to em(), please pass a value like \"12px\" or 12."
    Received message:   "Formula is missing closing parenthesis at apx."

          18 |
          19 |     if (typeof newBase !== 'number') {
        > 20 |       throw new PolishedError(72, base, to)
             |             ^
          21 |     }
          22 |
          23 |     return `${newPxval / newBase}${to}`

      at src/internalHelpers/_pxto.ts:20:13
      at src/internalHelpers/test/_pxto.test.ts:68:31
      at Object.<anonymous> (node_modules/.pnpm/expect@29.5.0/node_modules/expect/build/toThrowMatchers.js:74:11)
      at Object.throwingMatcher [as toThrow] (node_modules/.pnpm/expect@29.5.0/node_modules/expect/build/index.js:312:21)
      at Object.<anonymous> (src/internalHelpers/test/_pxto.test.ts:68:53)
      at Object.<anonymous> (src/internalHelpers/test/_pxto.test.ts:68:53)

FAIL src/internalHelpers/test/_errors.test.ts
  PolishedError
    ‚úï should throw an error with the correct message for code 1 (28 ms)
    ‚úï should throw an error with the correct message for code 2 (1 ms)
    ‚úï should throw an error with the correct message for code 3 (1 ms)
    ‚úì should throw an error with the correct message for code 64
    ‚úì should throw an error with the correct message for code 65 (1 ms)
    ‚úì should throw an error with the correct message for code 66
    ‚úì should throw an error with the correct message for code 67
    ‚úì should throw an error with the correct message for code 68
    ‚úì should throw an error with the correct message for code 69 (1 ms)
    ‚úì should throw an error with the correct message for code 70
    ‚úì should throw an error with the correct message for code 71
    ‚úì should throw an error with the correct message for code 72 (1 ms)
    ‚úì should throw an error with the correct message for code 73
    ‚úì should throw an error with the correct message for code 74
    ‚úï should not throw an error in production mode (1 ms)

  ‚óè PolishedError ‚Ä∫ should throw an error with the correct message for code 1

    expect(received).toThrowError(expected)

    Expected substring: "Property must be a string value."
    Received message:   "Passed invalid arguments to hsl, please pass multiple numbers e.g. hsl(360, 0.75, 0.4) or an object e.g. rgb({ hue: 255, saturation: 0.4, lightness: 0.75 })."

          4 |   it('should throw an error with the correct message for code 1', () => {
          5 |     expect(() => {
        > 6 |       throw new PolishedError(1)
            |             ^
          7 |     }).toThrowError('Property must be a string value.')
          8 |   })
          9 |

      at src/internalHelpers/test/_errors.test.ts:6:13
      at Object.<anonymous> (node_modules/.pnpm/expect@29.5.0/node_modules/expect/build/toThrowMatchers.js:74:11)
      at Object.throwingMatcher [as toThrowError] (node_modules/.pnpm/expect@29.5.0/node_modules/expect/build/index.js:312:21)
      at Object.<anonymous> (src/internalHelpers/test/_errors.test.ts:7:8)
      at Object.<anonymous> (src/internalHelpers/test/_errors.test.ts:7:8)

  ‚óè PolishedError ‚Ä∫ should throw an error with the correct message for code 2

    expect(received).toThrowError(expected)

    Expected substring: "Property must be a string value. Property must be a string value."
    Received message:   "Passed invalid arguments to hsla, please pass multiple numbers e.g. hsla(360, 0.75, 0.4, 0.7) or an object e.g. rgb({ hue: 255, saturation: 0.4, lightness: 0.75, alpha: 0.7 })."

          10 |   it('should throw an error with the correct message for code 2', () => {
          11 |     expect(() => {
        > 12 |       throw new PolishedError(2)
             |             ^
          13 |     }).toThrowError('Property must be a string value. Property must be a string value.')
          14 |   })
          15 |

      at src/internalHelpers/test/_errors.test.ts:12:13
      at Object.<anonymous> (node_modules/.pnpm/expect@29.5.0/node_modules/expect/build/toThrowMatchers.js:74:11)
      at Object.throwingMatcher [as toThrowError] (node_modules/.pnpm/expect@29.5.0/node_modules/expect/build/index.js:312:21)
      at Object.<anonymous> (src/internalHelpers/test/_errors.test.ts:13:8)
      at Object.<anonymous> (src/internalHelpers/test/_errors.test.ts:13:8)

  ‚óè PolishedError ‚Ä∫ should throw an error with the correct message for code 3

    expect(received).toThrowError(expected)

    Expected substring: "Property must be a string value. Property must be a string value. Property must be a string value."
    Received message:   "Passed an incorrect argument to a color function, please pass a string representation of a color."

          16 |   it('should throw an error with the correct message for code 3', () => {
          17 |     expect(() => {
        > 18 |       throw new PolishedError(3)
             |             ^
          19 |     }).toThrowError(
          20 |       'Property must be a string value. Property must be a string value. Property must be a string value.',
          21 |     )

      at src/internalHelpers/test/_errors.test.ts:18:13
      at Object.<anonymous> (node_modules/.pnpm/expect@29.5.0/node_modules/expect/build/toThrowMatchers.js:74:11)
      at Object.throwingMatcher [as toThrowError] (node_modules/.pnpm/expect@29.5.0/node_modules/expect/build/index.js:312:21)
      at Object.<anonymous> (src/internalHelpers/test/_errors.test.ts:19:8)
      at Object.<anonymous> (src/internalHelpers/test/_errors.test.ts:19:8)

  ‚óè PolishedError ‚Ä∫ should not throw an error in production mode

    expect(received).not.toThrow()

    Error name:    "Error"
    Error message: "The animation shorthand arrays can only have 8 elements. See the specification for more information: http://mdn.io/animation"

           99 |
          100 |     expect(() => {
        > 101 |       throw new PolishedError(64)
              |             ^
          102 |     }).not.toThrow()
          103 |
          104 |     process.env.NODE_ENV = env

      at src/internalHelpers/test/_errors.test.ts:101:13
      at Object.<anonymous> (node_modules/.pnpm/expect@29.5.0/node_modules/expect/build/toThrowMatchers.js:74:11)
      at Object.throwingMatcher [as toThrow] (node_modules/.pnpm/expect@29.5.0/node_modules/expect/build/index.js:312:21)
      at Object.<anonymous> (src/internalHelpers/test/_errors.test.ts:102:12)
      at Object.<anonymous> (src/internalHelpers/test/_errors.test.ts:102:12)

FAIL src/shorthands/test/buttons.test.ts
  buttons
    ‚úï populates base button selectors (4 ms)
    ‚úï populates buttons selectors for a single state
    ‚úï populates both base selectors and selectors for a single state
    ‚úï populates button selectors for multiple states
    ‚úï throws an error when passed a state it does not recognize (12 ms)

  ‚óè buttons ‚Ä∫ populates base button selectors

    expect(received).toEqual(expected) // deep equality

    - Expected  - 4
    + Received  + 1

      Object {
    -   "button,
    -   input[type=\"button\"],
    -   input[type=\"reset\"],
    -   input[type=\"submit\"]": Object {
    +   "": Object {
          "border-color": "black",
        },
      }

      3 | describe('buttons', () => {
      4 |   it('populates base button selectors', () => {
    > 5 |     expect({ [buttons()]: { 'border-color': 'black' } }).toEqual({
        |                                                          ^
      6 |       [`button,
      7 |   input[type="button"],
      8 |   input[type="reset"],

      at Object.<anonymous> (src/shorthands/test/buttons.test.ts:5:58)

  ‚óè buttons ‚Ä∫ populates buttons selectors for a single state

    PolishedError 68

      22 |   if (!template) throw new PolishedError(67)
      23 |   const invalidStates = states.filter(state => !stateMap?.includes(state))
    > 24 |   if (invalidStates.length) throw new PolishedError(68)
         |                                   ^
      25 |   return states.map(state => generateSelectors(template, state)).join(',')
      26 | }
      27 |

      at statefulSelectors (src/internalHelpers/_statefulSelectors.ts:24:35)
      at buttons (src/shorthands/buttons.ts:40:27)
      at Object.<anonymous> (src/shorthands/test/buttons.test.ts:17:15)

  ‚óè buttons ‚Ä∫ populates both base selectors and selectors for a single state

    PolishedError 68

      22 |   if (!template) throw new PolishedError(67)
      23 |   const invalidStates = states.filter(state => !stateMap?.includes(state))
    > 24 |   if (invalidStates.length) throw new PolishedError(68)
         |                                   ^
      25 |   return states.map(state => generateSelectors(template, state)).join(',')
      26 | }
      27 |

      at statefulSelectors (src/internalHelpers/_statefulSelectors.ts:24:35)
      at buttons (src/shorthands/buttons.ts:40:27)
      at Object.<anonymous> (src/shorthands/test/buttons.test.ts:30:15)

  ‚óè buttons ‚Ä∫ populates button selectors for multiple states

    PolishedError 68

      22 |   if (!template) throw new PolishedError(67)
      23 |   const invalidStates = states.filter(state => !stateMap?.includes(state))
    > 24 |   if (invalidStates.length) throw new PolishedError(68)
         |                                   ^
      25 |   return states.map(state => generateSelectors(template, state)).join(',')
      26 | }
      27 |

      at statefulSelectors (src/internalHelpers/_statefulSelectors.ts:24:35)
      at buttons (src/shorthands/buttons.ts:40:27)
      at Object.<anonymous> (src/shorthands/test/buttons.test.ts:46:15)

  ‚óè buttons ‚Ä∫ throws an error when passed a state it does not recognize

    expect(received).toThrow(expected)

    Expected substring: "You passed an unsupported selector state to this method"
    Received message:   "PolishedError 68"

          22 |   if (!template) throw new PolishedError(67)
          23 |   const invalidStates = states.filter(state => !stateMap?.includes(state))
        > 24 |   if (invalidStates.length) throw new PolishedError(68)
             |                                   ^
          25 |   return states.map(state => generateSelectors(template, state)).join(',')
          26 | }
          27 |

      at statefulSelectors (src/internalHelpers/_statefulSelectors.ts:24:35)
      at buttons (src/shorthands/buttons.ts:40:27)
      at src/shorthands/test/buttons.test.ts:63:15
      at Object.<anonymous> (node_modules/.pnpm/expect@29.5.0/node_modules/expect/build/toThrowMatchers.js:74:11)
      at Object.throwingMatcher [as toThrow] (node_modules/.pnpm/expect@29.5.0/node_modules/expect/build/index.js:312:21)
      at Object.<anonymous> (src/shorthands/test/buttons.test.ts:64:9)
      at Object.<anonymous> (src/shorthands/test/buttons.test.ts:64:9)

FAIL src/shorthands/test/borderRadius.test.ts
  borderRadius
    ‚úì returns the proper values for the top side (7 ms)
    ‚úì returns the proper values for the bottom side
    ‚úì returns the proper values for the right side
    ‚úì returns the proper values for the left side
    ‚úì returns the proper values when passed an integer (1 ms)
    ‚úì returns the proper values when passed zero
    ‚úï should throw an error when an invalid radius value is provided
    ‚úï should throw an error when an invalid side value is provided (3 ms)
    ‚úï throws an error when an invalid side value is provided (1 ms)

  ‚óè borderRadius ‚Ä∫ should throw an error when an invalid radius value is provided

    expect(received).toThrow(expected)

    Expected substring: "borderRadius expects a radius value as a string or number as the second argument."

    Received function did not throw

      48 |       // @ts-expect-error
      49 |       borderRadius('top', {})
    > 50 |     }).toThrow('borderRadius expects a radius value as a string or number as the second argument.')
         |        ^
      51 |   })
      52 |
      53 |   it('should throw an error when an invalid side value is provided', () => {

      at Object.<anonymous> (src/shorthands/test/borderRadius.test.ts:50:8)

  ‚óè borderRadius ‚Ä∫ should throw an error when an invalid side value is provided

    expect(received).toThrow(expected)

    Expected substring: "borderRadius expects one of \"top\", \"bottom\", \"left\" or \"right\" as the first argument."
    Received message:   "To pass multiple animations please supply them in arrays, e.g. animation(['rotate', '2s'], ['move', '1s'])
    To pass a single animation please supply them in simple values, e.g. animation('rotate', '2s')."

          44 |   }
          45 |
        > 46 |   throw new PolishedError(63)
             |         ^
          47 | }
          48 |

      at borderRadius (src/shorthands/borderRadius.ts:46:9)
      at src/shorthands/test/borderRadius.test.ts:56:19
      at Object.<anonymous> (node_modules/.pnpm/expect@29.5.0/node_modules/expect/build/toThrowMatchers.js:74:11)
      at Object.throwingMatcher [as toThrow] (node_modules/.pnpm/expect@29.5.0/node_modules/expect/build/index.js:312:21)
      at Object.<anonymous> (src/shorthands/test/borderRadius.test.ts:57:8)
      at Object.<anonymous> (src/shorthands/test/borderRadius.test.ts:57:8)

  ‚óè borderRadius ‚Ä∫ throws an error when an invalid side value is provided

    expect(received).toThrow(expected)

    Expected substring: "borderRadius expects one of \"top\", \"bottom\", \"left\" or \"right\" as the first argument."
    Received message:   "To pass multiple animations please supply them in arrays, e.g. animation(['rotate', '2s'], ['move', '1s'])
    To pass a single animation please supply them in simple values, e.g. animation('rotate', '2s')."

          44 |   }
          45 |
        > 46 |   throw new PolishedError(63)
             |         ^
          47 | }
          48 |

      at borderRadius (src/shorthands/borderRadius.ts:46:9)
      at src/shorthands/test/borderRadius.test.ts:64:19
      at Object.<anonymous> (node_modules/.pnpm/expect@29.5.0/node_modules/expect/build/toThrowMatchers.js:74:11)
      at Object.throwingMatcher [as toThrow] (node_modules/.pnpm/expect@29.5.0/node_modules/expect/build/index.js:312:21)
      at Object.<anonymous> (src/shorthands/test/borderRadius.test.ts:65:8)
      at Object.<anonymous> (src/shorthands/test/borderRadius.test.ts:65:8)

FAIL src/color/test/hsl.test.ts
  hsl
    ‚úï should convert numbers to a hex color (3 ms)
    ‚úï should convert a hls object to a hex color (2 ms)
    ‚úï should convert to a reduce hex value if possible (1 ms)
    ‚úì should throw an error if an object and multiple arguments are passed (1 ms)

  ‚óè hsl ‚Ä∫ should convert numbers to a hex color

    expect(received).toEqual(expected) // deep equality

    - Expected  - 1
    + Received  + 1

      Object {
    -   "background": "#b31919",
    +   "background": "#b1ce19661966",
      }

      4 | describe('hsl', () => {
      5 |   it('should convert numbers to a hex color', () => {
    > 6 |     expect({ background: hsl(360, 0.75, 0.4) }).toEqual({
        |                                                 ^
      7 |       background: '#b31919',
      8 |     })
      9 |   })

      at Object.<anonymous> (src/color/test/hsl.test.ts:6:49)

  ‚óè hsl ‚Ä∫ should convert a hls object to a hex color

    expect(received).toEqual(expected) // deep equality

    - Expected  - 1
    + Received  + 1

      Object {
    -   "background": "#b31919",
    +   "background": "#b1ce19661966",
      }

      12 |     expect({
      13 |       background: hsl({ hue: 360, saturation: 0.75, lightness: 0.4 }),
    > 14 |     }).toEqual({
         |        ^
      15 |       background: '#b31919',
      16 |     })
      17 |   })

      at Object.<anonymous> (src/color/test/hsl.test.ts:14:8)

  ‚óè hsl ‚Ä∫ should convert to a reduce hex value if possible

    expect(received).toEqual(expected) // deep equality

    - Expected  - 1
    + Received  + 1

      Object {
    -   "background": "#c00",
    +   "background": "#cb340000",
      }

      18 |
      19 |   it('should convert to a reduce hex value if possible', () => {
    > 20 |     expect({ background: hsl(360, 1, 0.4) }).toEqual({
         |                                              ^
      21 |       background: '#c00',
      22 |     })
      23 |   })

      at Object.<anonymous> (src/color/test/hsl.test.ts:20:46)

PASS src/color/test/rgb.test.ts
  rgb
    ‚úì should convert multiple numbers to a hex color (1 ms)
    ‚úì should convert a rgb object to a hex color
    ‚úì should convert to a reduce hex value if possible (1 ms)
    ‚úì should throw an error if an object and multiple arguments are passed (3 ms)

FAIL src/shorthands/test/border.test.ts
  border
    ‚úì properly returns separated border styles (1 ms)
    ‚úì properly returns separated border styles for a specific side
    ‚úì properly returns separated border styles when passed a number for borderWidth
    ‚úì properly returns separated border styles for a specific side when passed a number for borderWidth
    ‚úì properly returns separated border styles for a specific side when passed a string for borderWidth
    ‚úì properly returns separated border styles when passed a string for borderWidth
    ‚úì properly returns separated border styles when passed a number for borderColor
    ‚úì properly returns separated border styles when passed a string for borderColor
    ‚úì properly returns separated border styles when passed a number for borderStyle (1 ms)
    ‚úì properly returns separated border styles when passed a string for borderStyle
    ‚úì properly returns separated border styles when passed a number for all properties
    ‚úì properly returns separated border styles when passed a string for all properties
    ‚úì properly returns separated border styles when passed a number for all properties and a side keyword
    ‚úì properly returns separated border styles when passed a string for all properties and a side keyword
    ‚úï properly returns separated border styles when passed a number for all properties and a non-side keyword (9 ms)
    ‚úï properly returns separated border styles when passed a string for all properties and a non-side keyword

  ‚óè border ‚Ä∫ properly returns separated border styles when passed a number for all properties and a non-side keyword

    expect(received).toEqual(expected) // deep equality

    - Expected  - 3
    + Received  + 3

      Object {
    -   "borderColor": 3,
    -   "borderStyle": 2,
    -   "borderWidth": 1,
    +   "borderColor": 2,
    +   "borderStyle": 1,
    +   "borderWidth": "foo",
      }

      115 |
      116 |   it('properly returns separated border styles when passed a number for all properties and a non-side keyword', () => {
    > 117 |     expect(border('foo', 1, 2, 3)).toEqual({
          |                                    ^
      118 |       borderColor: 3,
      119 |       borderStyle: 2,
      120 |       borderWidth: 1,

      at Object.<anonymous> (src/shorthands/test/border.test.ts:117:36)

  ‚óè border ‚Ä∫ properly returns separated border styles when passed a string for all properties and a non-side keyword

    expect(received).toEqual(expected) // deep equality

    - Expected  - 3
    + Received  + 3

      Object {
    -   "borderColor": "red",
    -   "borderStyle": "solid",
    -   "borderWidth": "1px",
    +   "borderColor": "solid",
    +   "borderStyle": "1px",
    +   "borderWidth": "foo",
      }

      123 |
      124 |   it('properly returns separated border styles when passed a string for all properties and a non-side keyword', () => {
    > 125 |     expect(border('foo', '1px', 'solid', 'red')).toEqual({
          |                                                  ^
      126 |       borderColor: 'red',
      127 |       borderStyle: 'solid',
      128 |       borderWidth: '1px',

      at Object.<anonymous> (src/shorthands/test/border.test.ts:125:50)

PASS src/internalHelpers/test/_numberToHex.test.ts
  numberToHex
    ‚úì should convert 0 to "00" (1 ms)
    ‚úì should convert 15 to "0f"
    ‚úì should convert 16 to "10"
    ‚úì should convert 17 to "11"
    ‚úì should convert 255 to "ff"
    ‚úì should convert 256 to "100"
    ‚úì should convert 4095 to "fff"
    ‚úì should convert 4096 to "1000"

PASS src/easings/test/easeIn.test.ts
  easeIn
    ‚úì should return easeInBack cubic-bezier (1 ms)
    ‚úì should return easeInCirc cubic-bezier
    ‚úì should return easeInCubic cubic-bezier
    ‚úì should return easeInExpo cubic-bezier
    ‚úì should return easeInQuad cubic-bezier
    ‚úì should return easeInQuart cubic-bezier
    ‚úì should return easeInQuint cubic-bezier
    ‚úì should return easeInSine cubic-bezier (1 ms)
    ‚úì should return undefined if invalid argument is provided
    ‚úì should return undefined if no argument is provided

FAIL src/helpers/test/directionalProperty.test.ts
  directionalProperty
    ‚úï properly generates properties when passed a hyphenated property (3 ms)
    ‚úï properly generates properties when passed a camelCased property (1 ms)
    ‚úì properly passes just the position when not given a property
    ‚úì properly sets unitless 0 (1 ms)
    ‚úï properly applies a value when passed only one
    ‚úï properly applies an integer value when passed only one (1 ms)
    ‚úï properly applies values when passed two
    ‚úï properly applies values when passed two integers (1 ms)
    ‚úï properly applies values when passed a string and an integer
    ‚úï properly skips top and bottom properties when first value is null (1 ms)
    ‚úï properly skips left and right properties when second value is null
    ‚úï properly applies values when passed three
    ‚úï properly skips top property when first value is null
    ‚úï properly skips right and left properties when second value is null
    ‚úï properly skips bottom property when last value is null
    ‚úï properly applies values when passed a mixture of three value types
    ‚úï properly applies values when passed four
    ‚úï properly skips top property when first value is null
    ‚úï properly skips right property when second value is null
    ‚úï properly skips bottom property when third value is null (8 ms)
    ‚úï properly skips left property when fourth value is null
    ‚úï properly applies values when passed a mixture of four value types

  ‚óè directionalProperty ‚Ä∫ properly generates properties when passed a hyphenated property

    expect(received).toEqual(expected) // deep equality

    - Expected  - 4
    + Received  + 4

      Object {
    -   "borderBottomWidth": "12px",
    -   "borderLeftWidth": "12px",
    -   "borderRightWidth": "12px",
    -   "borderTopWidth": "12px",
    +   "BorderBottomWidth": "12px",
    +   "BorderLeftWidth": "12px",
    +   "BorderRightWidth": "12px",
    +   "BorderTopWidth": "12px",
      }

      3 | describe('directionalProperty', () => {
      4 |   it('properly generates properties when passed a hyphenated property', () => {
    > 5 |     expect(directionalProperty('border-width', '12px')).toEqual({
        |                                                         ^
      6 |       borderBottomWidth: '12px',
      7 |       borderLeftWidth: '12px',
      8 |       borderRightWidth: '12px',

      at Object.<anonymous> (src/helpers/test/directionalProperty.test.ts:5:57)

  ‚óè directionalProperty ‚Ä∫ properly generates properties when passed a camelCased property

    expect(received).toEqual(expected) // deep equality

    - Expected  - 4
    + Received  + 4

      Object {
    -   "borderBottomWidth": "12px",
    -   "borderLeftWidth": "12px",
    -   "borderRightWidth": "12px",
    -   "borderTopWidth": "12px",
    +   "borderbottomWidth": "12px",
    +   "borderleftWidth": "12px",
    +   "borderrightWidth": "12px",
    +   "bordertopWidth": "12px",
      }

      12 |
      13 |   it('properly generates properties when passed a camelCased property', () => {
    > 14 |     expect(directionalProperty('borderWidth', '12px')).toEqual({
         |                                                        ^
      15 |       borderBottomWidth: '12px',
      16 |       borderLeftWidth: '12px',
      17 |       borderRightWidth: '12px',

      at Object.<anonymous> (src/helpers/test/directionalProperty.test.ts:14:56)

  ‚óè directionalProperty ‚Ä∫ properly applies a value when passed only one

    expect(received).toEqual(expected) // deep equality

    - Expected  - 4
    + Received  + 4

      Object {
    -   "borderBottom": "12px",
    -   "borderLeft": "12px",
    -   "borderRight": "12px",
    -   "borderTop": "12px",
    +   "borderbottom": "12px",
    +   "borderleft": "12px",
    +   "borderright": "12px",
    +   "bordertop": "12px",
      }

      39 |
      40 |   it('properly applies a value when passed only one', () => {
    > 41 |     expect(directionalProperty('border', '12px')).toEqual({
         |                                                   ^
      42 |       borderBottom: '12px',
      43 |       borderLeft: '12px',
      44 |       borderRight: '12px',

      at Object.<anonymous> (src/helpers/test/directionalProperty.test.ts:41:51)

  ‚óè directionalProperty ‚Ä∫ properly applies an integer value when passed only one

    expect(received).toEqual(expected) // deep equality

    - Expected  - 4
    + Received  + 4

      Object {
    -   "borderBottom": 12,
    -   "borderLeft": 12,
    -   "borderRight": 12,
    -   "borderTop": 12,
    +   "borderbottom": 12,
    +   "borderleft": 12,
    +   "borderright": 12,
    +   "bordertop": 12,
      }

      48 |
      49 |   it('properly applies an integer value when passed only one', () => {
    > 50 |     expect(directionalProperty('border', 12)).toEqual({
         |                                               ^
      51 |       borderBottom: 12,
      52 |       borderLeft: 12,
      53 |       borderRight: 12,

      at Object.<anonymous> (src/helpers/test/directionalProperty.test.ts:50:47)

  ‚óè directionalProperty ‚Ä∫ properly applies values when passed two

    expect(received).toEqual(expected) // deep equality

    - Expected  - 4
    + Received  + 4

      Object {
    -   "borderBottom": "12px",
    -   "borderLeft": "24px",
    -   "borderRight": "24px",
    -   "borderTop": "12px",
    +   "borderbottom": "12px",
    +   "borderleft": "24px",
    +   "borderright": "24px",
    +   "bordertop": "12px",
      }

      57 |
      58 |   it('properly applies values when passed two', () => {
    > 59 |     expect(directionalProperty('border', '12px', '24px')).toEqual({
         |                                                           ^
      60 |       borderBottom: '12px',
      61 |       borderLeft: '24px',
      62 |       borderRight: '24px',

      at Object.<anonymous> (src/helpers/test/directionalProperty.test.ts:59:59)

  ‚óè directionalProperty ‚Ä∫ properly applies values when passed two integers

    expect(received).toEqual(expected) // deep equality

    - Expected  - 4
    + Received  + 4

      Object {
    -   "borderBottom": 12,
    -   "borderLeft": 24,
    -   "borderRight": 24,
    -   "borderTop": 12,
    +   "borderbottom": 12,
    +   "borderleft": 24,
    +   "borderright": 24,
    +   "bordertop": 12,
      }

      66 |
      67 |   it('properly applies values when passed two integers', () => {
    > 68 |     expect(directionalProperty('border', 12, 24)).toEqual({
         |                                                   ^
      69 |       borderBottom: 12,
      70 |       borderLeft: 24,
      71 |       borderRight: 24,

      at Object.<anonymous> (src/helpers/test/directionalProperty.test.ts:68:51)

  ‚óè directionalProperty ‚Ä∫ properly applies values when passed a string and an integer

    expect(received).toEqual(expected) // deep equality

    - Expected  - 4
    + Received  + 4

      Object {
    -   "borderBottom": 12,
    -   "borderLeft": "24px",
    -   "borderRight": "24px",
    -   "borderTop": 12,
    +   "borderbottom": 12,
    +   "borderleft": "24px",
    +   "borderright": "24px",
    +   "bordertop": 12,
      }

      75 |
      76 |   it('properly applies values when passed a string and an integer', () => {
    > 77 |     expect(directionalProperty('border', 12, '24px')).toEqual({
         |                                                       ^
      78 |       borderBottom: 12,
      79 |       borderLeft: '24px',
      80 |       borderRight: '24px',

      at Object.<anonymous> (src/helpers/test/directionalProperty.test.ts:77:55)

  ‚óè directionalProperty ‚Ä∫ properly skips top and bottom properties when first value is null

    expect(received).toEqual(expected) // deep equality

    - Expected  - 2
    + Received  + 2

      Object {
    -   "borderLeft": "12px",
    -   "borderRight": "12px",
    +   "borderleft": "12px",
    +   "borderright": "12px",
      }

      84 |
      85 |   it('properly skips top and bottom properties when first value is null', () => {
    > 86 |     expect(directionalProperty('border', null, '12px')).toEqual({
         |                                                         ^
      87 |       borderLeft: '12px',
      88 |       borderRight: '12px',
      89 |     })

      at Object.<anonymous> (src/helpers/test/directionalProperty.test.ts:86:57)

  ‚óè directionalProperty ‚Ä∫ properly skips left and right properties when second value is null

    expect(received).toEqual(expected) // deep equality

    - Expected  - 2
    + Received  + 2

      Object {
    -   "borderBottom": "12px",
    -   "borderTop": "12px",
    +   "borderbottom": "12px",
    +   "bordertop": "12px",
      }

      91 |
      92 |   it('properly skips left and right properties when second value is null', () => {
    > 93 |     expect(directionalProperty('border', '12px', null)).toEqual({
         |                                                         ^
      94 |       borderBottom: '12px',
      95 |       borderTop: '12px',
      96 |     })

      at Object.<anonymous> (src/helpers/test/directionalProperty.test.ts:93:57)

  ‚óè directionalProperty ‚Ä∫ properly applies values when passed three

    expect(received).toEqual(expected) // deep equality

    - Expected  - 4
    + Received  + 4

      Object {
    -   "borderBottom": "36px",
    -   "borderLeft": "24px",
    -   "borderRight": "24px",
    -   "borderTop": "12px",
    +   "borderbottom": "36px",
    +   "borderleft": "24px",
    +   "borderright": "24px",
    +   "bordertop": "12px",
      }

       98 |
       99 |   it('properly applies values when passed three', () => {
    > 100 |     expect(directionalProperty('border', '12px', '24px', '36px')).toEqual({
          |                                                                   ^
      101 |       borderBottom: '36px',
      102 |       borderLeft: '24px',
      103 |       borderRight: '24px',

      at Object.<anonymous> (src/helpers/test/directionalProperty.test.ts:100:67)

  ‚óè directionalProperty ‚Ä∫ properly skips top property when first value is null

    expect(received).toEqual(expected) // deep equality

    - Expected  - 3
    + Received  + 3

      Object {
    -   "borderBottom": "36px",
    -   "borderLeft": "24px",
    -   "borderRight": "24px",
    +   "borderbottom": "36px",
    +   "borderleft": "24px",
    +   "borderright": "24px",
      }

      107 |
      108 |   it('properly skips top property when first value is null', () => {
    > 109 |     expect(directionalProperty('border', null, '24px', '36px')).toEqual({
          |                                                                 ^
      110 |       borderBottom: '36px',
      111 |       borderLeft: '24px',
      112 |       borderRight: '24px',

      at Object.<anonymous> (src/helpers/test/directionalProperty.test.ts:109:65)

  ‚óè directionalProperty ‚Ä∫ properly skips right and left properties when second value is null

    expect(received).toEqual(expected) // deep equality

    - Expected  - 2
    + Received  + 2

      Object {
    -   "borderBottom": "36px",
    -   "borderTop": "12px",
    +   "borderbottom": "36px",
    +   "bordertop": "12px",
      }

      115 |
      116 |   it('properly skips right and left properties when second value is null', () => {
    > 117 |     expect(directionalProperty('border', '12px', null, '36px')).toEqual({
          |                                                                 ^
      118 |       borderBottom: '36px',
      119 |       borderTop: '12px',
      120 |     })

      at Object.<anonymous> (src/helpers/test/directionalProperty.test.ts:117:65)

  ‚óè directionalProperty ‚Ä∫ properly skips bottom property when last value is null

    expect(received).toEqual(expected) // deep equality

    - Expected  - 3
    + Received  + 3

      Object {
    -   "borderLeft": "24px",
    -   "borderRight": "24px",
    -   "borderTop": "12px",
    +   "borderleft": "24px",
    +   "borderright": "24px",
    +   "bordertop": "12px",
      }

      122 |
      123 |   it('properly skips bottom property when last value is null', () => {
    > 124 |     expect(directionalProperty('border', '12px', '24px', null)).toEqual({
          |                                                                 ^
      125 |       borderLeft: '24px',
      126 |       borderRight: '24px',
      127 |       borderTop: '12px',

      at Object.<anonymous> (src/helpers/test/directionalProperty.test.ts:124:65)

  ‚óè directionalProperty ‚Ä∫ properly applies values when passed a mixture of three value types

    expect(received).toEqual(expected) // deep equality

    - Expected  - 3
    + Received  + 3

      Object {
    -   "borderLeft": "24px",
    -   "borderRight": "24px",
    -   "borderTop": 12,
    +   "borderleft": "24px",
    +   "borderright": "24px",
    +   "bordertop": 12,
      }

      130 |
      131 |   it('properly applies values when passed a mixture of three value types', () => {
    > 132 |     expect(directionalProperty('border', 12, '24px', null)).toEqual({
          |                                                             ^
      133 |       borderLeft: '24px',
      134 |       borderRight: '24px',
      135 |       borderTop: 12,

      at Object.<anonymous> (src/helpers/test/directionalProperty.test.ts:132:61)

  ‚óè directionalProperty ‚Ä∫ properly applies values when passed four

    expect(received).toEqual(expected) // deep equality

    - Expected  - 4
    + Received  + 4

      Object {
    -   "borderBottom": "36px",
    -   "borderLeft": "48px",
    -   "borderRight": "24px",
    -   "borderTop": "12px",
    +   "borderbottom": "36px",
    +   "borderleft": "48px",
    +   "borderright": "24px",
    +   "bordertop": "12px",
      }

      138 |
      139 |   it('properly applies values when passed four', () => {
    > 140 |     expect(directionalProperty('border', '12px', '24px', '36px', '48px')).toEqual({
          |                                                                           ^
      141 |       borderBottom: '36px',
      142 |       borderLeft: '48px',
      143 |       borderRight: '24px',

      at Object.<anonymous> (src/helpers/test/directionalProperty.test.ts:140:75)

  ‚óè directionalProperty ‚Ä∫ properly skips top property when first value is null

    expect(received).toEqual(expected) // deep equality

    - Expected  - 3
    + Received  + 3

      Object {
    -   "borderBottom": "36px",
    -   "borderLeft": "48px",
    -   "borderRight": "24px",
    +   "borderbottom": "36px",
    +   "borderleft": "48px",
    +   "borderright": "24px",
      }

      147 |
      148 |   it('properly skips top property when first value is null', () => {
    > 149 |     expect(directionalProperty('border', null, '24px', '36px', '48px')).toEqual({
          |                                                                         ^
      150 |       borderBottom: '36px',
      151 |       borderLeft: '48px',
      152 |       borderRight: '24px',

      at Object.<anonymous> (src/helpers/test/directionalProperty.test.ts:149:73)

  ‚óè directionalProperty ‚Ä∫ properly skips right property when second value is null

    expect(received).toEqual(expected) // deep equality

    - Expected  - 3
    + Received  + 3

      Object {
    -   "borderBottom": "36px",
    -   "borderLeft": "48px",
    -   "borderTop": "12px",
    +   "borderbottom": "36px",
    +   "borderleft": "48px",
    +   "bordertop": "12px",
      }

      155 |
      156 |   it('properly skips right property when second value is null', () => {
    > 157 |     expect(directionalProperty('border', '12px', null, '36px', '48px')).toEqual({
          |                                                                         ^
      158 |       borderBottom: '36px',
      159 |       borderLeft: '48px',
      160 |       borderTop: '12px',

      at Object.<anonymous> (src/helpers/test/directionalProperty.test.ts:157:73)

  ‚óè directionalProperty ‚Ä∫ properly skips bottom property when third value is null

    expect(received).toEqual(expected) // deep equality

    - Expected  - 3
    + Received  + 3

      Object {
    -   "borderLeft": "48px",
    -   "borderRight": "24px",
    -   "borderTop": "12px",
    +   "borderleft": "48px",
    +   "borderright": "24px",
    +   "bordertop": "12px",
      }

      163 |
      164 |   it('properly skips bottom property when third value is null', () => {
    > 165 |     expect(directionalProperty('border', '12px', '24px', null, '48px')).toEqual({
          |                                                                         ^
      166 |       borderLeft: '48px',
      167 |       borderRight: '24px',
      168 |       borderTop: '12px',

      at Object.<anonymous> (src/helpers/test/directionalProperty.test.ts:165:73)

  ‚óè directionalProperty ‚Ä∫ properly skips left property when fourth value is null

    expect(received).toEqual(expected) // deep equality

    - Expected  - 3
    + Received  + 3

      Object {
    -   "borderBottom": "36px",
    -   "borderRight": "24px",
    -   "borderTop": "12px",
    +   "borderbottom": "36px",
    +   "borderright": "24px",
    +   "bordertop": "12px",
      }

      171 |
      172 |   it('properly skips left property when fourth value is null', () => {
    > 173 |     expect(directionalProperty('border', '12px', '24px', '36px', null)).toEqual({
          |                                                                         ^
      174 |       borderBottom: '36px',
      175 |       borderRight: '24px',
      176 |       borderTop: '12px',

      at Object.<anonymous> (src/helpers/test/directionalProperty.test.ts:173:73)

  ‚óè directionalProperty ‚Ä∫ properly applies values when passed a mixture of four value types

    expect(received).toEqual(expected) // deep equality

    - Expected  - 3
    + Received  + 3

      Object {
    -   "borderBottom": 36,
    -   "borderRight": "24px",
    -   "borderTop": 12,
    +   "borderbottom": 36,
    +   "borderright": "24px",
    +   "bordertop": 12,
      }

      179 |
      180 |   it('properly applies values when passed a mixture of four value types', () => {
    > 181 |     expect(directionalProperty('border', 12, '24px', 36, null)).toEqual({
          |                                                                 ^
      182 |       borderBottom: 36,
      183 |       borderRight: '24px',
      184 |       borderTop: 12,

      at Object.<anonymous> (src/helpers/test/directionalProperty.test.ts:181:65)

PASS src/helpers/test/rem.test.ts
  rem
    ‚úì should convert a simple number to rems (1 ms)

PASS src/easings/test/easeOut.test.ts
  easeOut
    ‚úì should return easeOutBack cubic-bezier (1 ms)
    ‚úì should return easeOutCirc cubic-bezier (1 ms)
    ‚úì should return easeOutCubic cubic-bezier
    ‚úì should return easeOutExpo cubic-bezier (1 ms)
    ‚úì should return easeOutQuad cubic-bezier
    ‚úì should return easeOutQuart cubic-bezier
    ‚úì should return easeOutQuint cubic-bezier
    ‚úì should return undefined if invalid argument is provided
    ‚úì should return undefined if no argument is provided

FAIL src/shorthands/test/margin.test.ts
  margin
    ‚úï properly applies a value when passed only one (3 ms)
    ‚úï properly applies values when passed two
    ‚úï properly applies values when passed three
    ‚úï properly applies values when passed four (1 ms)
    ‚úï properly applies values when passed four as numbers
    ‚úï properly applies values when passed null (1 ms)
    ‚úï properly applies values when passed undefined

  ‚óè margin ‚Ä∫ properly applies a value when passed only one

    expect(received).toEqual(expected) // deep equality

    - Expected  - 4
    + Received  + 4

      Object {
    -   "marginBottom": "12px",
    -   "marginLeft": "12px",
    -   "marginRight": "12px",
    -   "marginTop": "12px",
    +   "marginbottom": "12px",
    +   "marginleft": "12px",
    +   "marginright": "12px",
    +   "margintop": "12px",
      }

      3 | describe('margin', () => {
      4 |   it('properly applies a value when passed only one', () => {
    > 5 |     expect(margin('12px')).toEqual({
        |                            ^
      6 |       marginBottom: '12px',
      7 |       marginLeft: '12px',
      8 |       marginRight: '12px',

      at Object.<anonymous> (src/shorthands/test/margin.test.ts:5:28)

  ‚óè margin ‚Ä∫ properly applies values when passed two

    expect(received).toEqual(expected) // deep equality

    - Expected  - 4
    + Received  + 4

      Object {
    -   "marginBottom": "12px",
    -   "marginLeft": "24px",
    -   "marginRight": "24px",
    -   "marginTop": "12px",
    +   "marginbottom": "12px",
    +   "marginleft": "24px",
    +   "marginright": "24px",
    +   "margintop": "12px",
      }

      12 |
      13 |   it('properly applies values when passed two', () => {
    > 14 |     expect(margin('12px', '24px')).toEqual({
         |                                    ^
      15 |       marginBottom: '12px',
      16 |       marginLeft: '24px',
      17 |       marginRight: '24px',

      at Object.<anonymous> (src/shorthands/test/margin.test.ts:14:36)

  ‚óè margin ‚Ä∫ properly applies values when passed three

    expect(received).toEqual(expected) // deep equality

    - Expected  - 4
    + Received  + 4

      Object {
    -   "marginBottom": "36px",
    -   "marginLeft": "24px",
    -   "marginRight": "24px",
    -   "marginTop": "12px",
    +   "marginbottom": "36px",
    +   "marginleft": "24px",
    +   "marginright": "24px",
    +   "margintop": "12px",
      }

      21 |
      22 |   it('properly applies values when passed three', () => {
    > 23 |     expect(margin('12px', '24px', '36px')).toEqual({
         |                                            ^
      24 |       marginBottom: '36px',
      25 |       marginLeft: '24px',
      26 |       marginRight: '24px',

      at Object.<anonymous> (src/shorthands/test/margin.test.ts:23:44)

  ‚óè margin ‚Ä∫ properly applies values when passed four

    expect(received).toEqual(expected) // deep equality

    - Expected  - 4
    + Received  + 4

      Object {
    -   "marginBottom": "36px",
    -   "marginLeft": "48px",
    -   "marginRight": "24px",
    -   "marginTop": "12px",
    +   "marginbottom": "36px",
    +   "marginleft": "48px",
    +   "marginright": "24px",
    +   "margintop": "12px",
      }

      30 |
      31 |   it('properly applies values when passed four', () => {
    > 32 |     expect(margin('12px', '24px', '36px', '48px')).toEqual({
         |                                                    ^
      33 |       marginBottom: '36px',
      34 |       marginLeft: '48px',
      35 |       marginRight: '24px',

      at Object.<anonymous> (src/shorthands/test/margin.test.ts:32:52)

  ‚óè margin ‚Ä∫ properly applies values when passed four as numbers

    expect(received).toEqual(expected) // deep equality

    - Expected  - 4
    + Received  + 4

      Object {
    -   "marginBottom": 36,
    -   "marginLeft": 48,
    -   "marginRight": 24,
    -   "marginTop": 12,
    +   "marginbottom": 36,
    +   "marginleft": 48,
    +   "marginright": 24,
    +   "margintop": 12,
      }

      39 |
      40 |   it('properly applies values when passed four as numbers', () => {
    > 41 |     expect(margin(12, 24, 36, 48)).toEqual({
         |                                    ^
      42 |       marginBottom: 36,
      43 |       marginLeft: 48,
      44 |       marginRight: 24,

      at Object.<anonymous> (src/shorthands/test/margin.test.ts:41:36)

  ‚óè margin ‚Ä∫ properly applies values when passed null

    expect(received).toEqual(expected) // deep equality

    - Expected  - 4
    + Received  + 4

      Object {
    -   "marginBottom": null,
    -   "marginLeft": "48px",
    -   "marginRight": "24px",
    -   "marginTop": null,
    +   "marginbottom": "24px",
    +   "marginleft": "48px",
    +   "marginright": "48px",
    +   "margintop": "24px",
      }

      48 |
      49 |   it('properly applies values when passed null', () => {
    > 50 |     expect(margin(null, '24px', null, '48px')).toEqual({
         |                                                ^
      51 |       marginBottom: null,
      52 |       marginLeft: '48px',
      53 |       marginRight: '24px',

      at Object.<anonymous> (src/shorthands/test/margin.test.ts:50:48)

  ‚óè margin ‚Ä∫ properly applies values when passed undefined

    expect(received).toEqual(expected) // deep equality

    - Expected  - 4
    + Received  + 4

      Object {
    -   "marginBottom": undefined,
    -   "marginLeft": "48px",
    -   "marginRight": "24px",
    -   "marginTop": undefined,
    +   "marginbottom": "24px",
    +   "marginleft": "48px",
    +   "marginright": "48px",
    +   "margintop": "24px",
      }

      57 |
      58 |   it('properly applies values when passed undefined', () => {
    > 59 |     expect(margin(undefined, '24px', undefined, '48px')).toEqual({
         |                                                          ^
      60 |       marginBottom: undefined,
      61 |       marginLeft: '48px',
      62 |       marginRight: '24px',

      at Object.<anonymous> (src/shorthands/test/margin.test.ts:59:58)

PASS src/shorthands/test/backgroundImages.test.ts
  backgroundImages
    ‚úì should generate a single background from a parameter (1 ms)
    ‚úì should generate a multiple backgroundImages from multiple parameters

FAIL src/shorthands/test/borderStyle.test.ts
  borderStyle
    ‚úï properly applies a value when passed only one (3 ms)
    ‚úï properly applies values when passed two (1 ms)
    ‚úï properly applies values when passed three (1 ms)
    ‚úï properly applies values when passed four
    ‚úï properly applies values when passed null (1 ms)
    ‚úï properly applies values when passed undefined
    ‚úï properly applies values when passed a mix of null, undefined, and valid values (1 ms)

  ‚óè borderStyle ‚Ä∫ properly applies a value when passed only one

    expect(received).toEqual(expected) // deep equality

    - Expected  - 4
    + Received  + 4

      Object {
    -   "borderBottomStyle": "solid",
    -   "borderLeftStyle": "solid",
    -   "borderRightStyle": "solid",
    -   "borderTopStyle": "solid",
    +   "borderbottomStyle": "solid",
    +   "borderleftStyle": "solid",
    +   "borderrightStyle": "solid",
    +   "bordertopStyle": "solid",
      }

      3 | describe('borderStyle', () => {
      4 |   it('properly applies a value when passed only one', () => {
    > 5 |     expect(borderStyle('solid')).toEqual({
        |                                  ^
      6 |       borderBottomStyle: 'solid',
      7 |       borderLeftStyle: 'solid',
      8 |       borderRightStyle: 'solid',

      at Object.<anonymous> (src/shorthands/test/borderStyle.test.ts:5:34)

  ‚óè borderStyle ‚Ä∫ properly applies values when passed two

    expect(received).toEqual(expected) // deep equality

    - Expected  - 4
    + Received  + 4

      Object {
    -   "borderBottomStyle": "solid",
    -   "borderLeftStyle": "dashed",
    -   "borderRightStyle": "dashed",
    -   "borderTopStyle": "solid",
    +   "borderbottomStyle": "solid",
    +   "borderleftStyle": "dashed",
    +   "borderrightStyle": "dashed",
    +   "bordertopStyle": "solid",
      }

      12 |
      13 |   it('properly applies values when passed two', () => {
    > 14 |     expect(borderStyle('solid', 'dashed')).toEqual({
         |                                            ^
      15 |       borderBottomStyle: 'solid',
      16 |       borderLeftStyle: 'dashed',
      17 |       borderRightStyle: 'dashed',

      at Object.<anonymous> (src/shorthands/test/borderStyle.test.ts:14:44)

  ‚óè borderStyle ‚Ä∫ properly applies values when passed three

    expect(received).toEqual(expected) // deep equality

    - Expected  - 4
    + Received  + 4

      Object {
    -   "borderBottomStyle": "dotted",
    -   "borderLeftStyle": "dashed",
    -   "borderRightStyle": "dashed",
    -   "borderTopStyle": "solid",
    +   "borderbottomStyle": "dotted",
    +   "borderleftStyle": "dashed",
    +   "borderrightStyle": "dashed",
    +   "bordertopStyle": "solid",
      }

      21 |
      22 |   it('properly applies values when passed three', () => {
    > 23 |     expect(borderStyle('solid', 'dashed', 'dotted')).toEqual({
         |                                                      ^
      24 |       borderBottomStyle: 'dotted',
      25 |       borderLeftStyle: 'dashed',
      26 |       borderRightStyle: 'dashed',

      at Object.<anonymous> (src/shorthands/test/borderStyle.test.ts:23:54)

  ‚óè borderStyle ‚Ä∫ properly applies values when passed four

    expect(received).toEqual(expected) // deep equality

    - Expected  - 4
    + Received  + 4

      Object {
    -   "borderBottomStyle": "dotted",
    -   "borderLeftStyle": "double",
    -   "borderRightStyle": "dashed",
    -   "borderTopStyle": "solid",
    +   "borderbottomStyle": "dotted",
    +   "borderleftStyle": "double",
    +   "borderrightStyle": "dashed",
    +   "bordertopStyle": "solid",
      }

      30 |
      31 |   it('properly applies values when passed four', () => {
    > 32 |     expect(borderStyle('solid', 'dashed', 'dotted', 'double')).toEqual({
         |                                                                ^
      33 |       borderBottomStyle: 'dotted',
      34 |       borderLeftStyle: 'double',
      35 |       borderRightStyle: 'dashed',

      at Object.<anonymous> (src/shorthands/test/borderStyle.test.ts:32:64)

  ‚óè borderStyle ‚Ä∫ properly applies values when passed null

    expect(received).toEqual(expected) // deep equality

    - Expected  - 4
    + Received  + 4

      Object {
    -   "borderBottomStyle": "dashed",
    -   "borderLeftStyle": "double",
    -   "borderRightStyle": "dashed",
    -   "borderTopStyle": "solid",
    +   "borderbottomStyle": "dashed",
    +   "borderleftStyle": "double",
    +   "borderrightStyle": "double",
    +   "bordertopStyle": "dashed",
      }

      39 |
      40 |   it('properly applies values when passed null', () => {
    > 41 |     expect(borderStyle(null, 'dashed', null, 'double')).toEqual({
         |                                                         ^
      42 |       borderBottomStyle: 'dashed',
      43 |       borderLeftStyle: 'double',
      44 |       borderRightStyle: 'dashed',

      at Object.<anonymous> (src/shorthands/test/borderStyle.test.ts:41:57)

  ‚óè borderStyle ‚Ä∫ properly applies values when passed undefined

    expect(received).toEqual(expected) // deep equality

    - Expected  - 4
    + Received  + 4

      Object {
    -   "borderBottomStyle": "dashed",
    -   "borderLeftStyle": "double",
    -   "borderRightStyle": "dashed",
    -   "borderTopStyle": "solid",
    +   "borderbottomStyle": "dashed",
    +   "borderleftStyle": "double",
    +   "borderrightStyle": "double",
    +   "bordertopStyle": "dashed",
      }

      48 |
      49 |   it('properly applies values when passed undefined', () => {
    > 50 |     expect(borderStyle(undefined, 'dashed', undefined, 'double')).toEqual({
         |                                                                   ^
      51 |       borderBottomStyle: 'dashed',
      52 |       borderLeftStyle: 'double',
      53 |       borderRightStyle: 'dashed',

      at Object.<anonymous> (src/shorthands/test/borderStyle.test.ts:50:67)

  ‚óè borderStyle ‚Ä∫ properly applies values when passed a mix of null, undefined, and valid values

    expect(received).toEqual(expected) // deep equality

    - Expected  - 4
    + Received  + 4

      Object {
    -   "borderBottomStyle": "dashed",
    -   "borderLeftStyle": "double",
    -   "borderRightStyle": "dashed",
    -   "borderTopStyle": "solid",
    +   "borderbottomStyle": "dashed",
    +   "borderleftStyle": "double",
    +   "borderrightStyle": "double",
    +   "bordertopStyle": "dashed",
      }

      57 |
      58 |   it('properly applies values when passed a mix of null, undefined, and valid values', () => {
    > 59 |     expect(borderStyle(null, 'dashed', undefined, 'double')).toEqual({
         |                                                              ^
      60 |       borderBottomStyle: 'dashed',
      61 |       borderLeftStyle: 'double',
      62 |       borderRightStyle: 'dashed',

      at Object.<anonymous> (src/shorthands/test/borderStyle.test.ts:59:62)

PASS src/mixins/test/timingFunctions.test.ts
  timingFunctions
    ‚úì should return easeInBack cubic-bezier (1 ms)
    ‚úì should return easeInCirc cubic-bezier
    ‚úì should return easeInCubic cubic-bezier
    ‚úì should return easeInExpo cubic-bezier
    ‚úì should return easeInQuad cubic-bezier
    ‚úì should return easeInQuart cubic-bezier
    ‚úì should return easeInQuint cubic-bezier
    ‚úì should return easeInSine cubic-bezier
    ‚úì should return easeOutBack cubic-bezier (4 ms)
    ‚úì should return easeOutCirc cubic-bezier
    ‚úì should return easeOutCubic cubic-bezier
    ‚úì should return easeOutExpo cubic-bezier
    ‚úì should return easeOutQuad cubic-bezier (1 ms)
    ‚úì should return easeOutQuart cubic-bezier
    ‚úì should return easeOutQuint cubic-bezier (1 ms)
    ‚úì should return easeOutSine cubic-bezier (1 ms)
    ‚úì should return easeInOutBack cubic-bezier
    ‚úì should return easeInOutCirc cubic-bezier
    ‚úì should return easeInOutCubic cubic-bezier
    ‚úì should return easeInOutExpo cubic-bezier
    ‚úì should return easeInOutQuad cubic-bezier
    ‚úì should return easeInOutQuart cubic-bezier
    ‚úì should return easeInOutQuint cubic-bezier
    ‚úì should return easeInOutSine cubic-bezier

PASS src/helpers/test/getValueAndUnit.test.ts
  getValueAndUnit
    ‚úì should get value and px from whole values (1 ms)
    ‚úì should get value and px from decimal values
    ‚úì should get value and pt from whole values
    ‚úì should get value and pt from decimal values
    ‚úì should get value and pc from whole values (1 ms)
    ‚úì should get value and pc from decimal values
    ‚úì should get value and mm from whole values
    ‚úì should get value and mm from decimal values
    ‚úì should get value and q from whole values
    ‚úì should get value and q from decimal values
    ‚úì should get value and cm from whole values (1 ms)
    ‚úì should get value and cm from decimal values
    ‚úì should get value and in from whole values
    ‚úì should get value and in from decimal values
    ‚úì should get value and em from whole values
    ‚úì should get value and em from decimal values
    ‚úì should get value and rem from whole values
    ‚úì should get value and rem from decimal values
    ‚úì should get value and ex from whole values (1 ms)
    ‚úì should get value and ex from decimal values
    ‚úì should get value and ch from whole values
    ‚úì should get value and ch from decimal values
    ‚úì should get value and vh from whole values
    ‚úì should get value and vh from decimal values
    ‚úì should get value and vw from whole values
    ‚úì should get value and vw from decimal values
    ‚úì should get value and vmin from whole values
    ‚úì should get value and vmin from decimal values
    ‚úì should get value and vmax from whole values
    ‚úì should get value and vmax from decimal values
    ‚úì should get value and % from whole values
    ‚úì should get value and % from decimal values (1 ms)
    ‚úì should return value and no unit when passed a number
    ‚úì should return value and no unit when passed a number string without unit
    ‚úì should return original value and undefined when passed a string not matching the pattern

PASS src/shorthands/test/size.test.ts
  size
    ‚úì should pass parameters to the values of height and width (1 ms)
    ‚úì should set height and width to the same value when only one parameter is passed
    ‚úì should pass parameters to the values of height and width when passed integers
    ‚úì should pass parameters to the values of height and width when passed zero

PASS src/easings/test/easeInOut.test.ts
  easeInOut
    ‚úì should return easeInOutBack cubic-bezier (1 ms)
    ‚úì should return easeInOutCirc cubic-bezier
    ‚úì should return easeInOutCubic cubic-bezier
    ‚úì should return easeInOutExpo cubic-bezier
    ‚úì should return easeInOutQuad cubic-bezier
    ‚úì should return easeInOutQuart cubic-bezier
    ‚úì should return easeInOutQuint cubic-bezier
    ‚úì should return undefined if invalid argument is provided
    ‚úì should return undefined if no argument is provided

PASS src/internalHelpers/test/_capitalizeString.test.ts
  capitalizeString
    ‚úì capitalizes a string (1 ms)
    ‚úì returns a capitalized string untouched (1 ms)

PASS src/shorthands/test/animation.test.ts
  animation
    ‚úì should not allow arrays in single mode
    ‚úì should not allow simple root level values in multi mode
    single mode
      ‚úì should pass first eight arguments to the CSS (1 ms)
      ‚úì should be fine with less than eight arguments
      ‚úì should throw an error if more than eight elements are supplied (4 ms)
    multi mode
      ‚úì should pass first eight arguments to the CSS in multi mode
      ‚úì should be fine with less than eight arguments
      ‚úì should be fine with multiple animations
      ‚úì should throw an error if more than eight elements are supplied in an array (1 ms)
      ‚úì should throw an error if more than eight elements are supplied in a second array

FAIL src/shorthands/test/borderWidth.test.ts
  borderWidth
    ‚úï properly applies a value when passed only one (3 ms)
    ‚úï properly applies values when passed two
    ‚úï properly applies values when passed three
    ‚úï properly applies values when passed four (1 ms)
    ‚úï properly applies values when passed integers
    ‚úï properly applies values when passed zero (1 ms)
    ‚úï properly applies values when passed null
    ‚úï properly applies values when passed undefined
    ‚úï properly applies values when passed a mix of null, undefined, and valid values (1 ms)

  ‚óè borderWidth ‚Ä∫ properly applies a value when passed only one

    expect(received).toEqual(expected) // deep equality

    - Expected  - 4
    + Received  + 4

      Object {
    -   "borderBottomWidth": "12px",
    -   "borderLeftWidth": "12px",
    -   "borderRightWidth": "12px",
    -   "borderTopWidth": "12px",
    +   "borderbottomWidth": "12px",
    +   "borderleftWidth": "12px",
    +   "borderrightWidth": "12px",
    +   "bordertopWidth": "12px",
      }

      3 | describe('borderWidth', () => {
      4 |   it('properly applies a value when passed only one', () => {
    > 5 |     expect(borderWidth('12px')).toEqual({
        |                                 ^
      6 |       borderBottomWidth: '12px',
      7 |       borderLeftWidth: '12px',
      8 |       borderRightWidth: '12px',

      at Object.<anonymous> (src/shorthands/test/borderWidth.test.ts:5:33)

  ‚óè borderWidth ‚Ä∫ properly applies values when passed two

    expect(received).toEqual(expected) // deep equality

    - Expected  - 4
    + Received  + 4

      Object {
    -   "borderBottomWidth": "12px",
    -   "borderLeftWidth": "24px",
    -   "borderRightWidth": "24px",
    -   "borderTopWidth": "12px",
    +   "borderbottomWidth": "12px",
    +   "borderleftWidth": "24px",
    +   "borderrightWidth": "24px",
    +   "bordertopWidth": "12px",
      }

      12 |
      13 |   it('properly applies values when passed two', () => {
    > 14 |     expect(borderWidth('12px', '24px')).toEqual({
         |                                         ^
      15 |       borderBottomWidth: '12px',
      16 |       borderLeftWidth: '24px',
      17 |       borderRightWidth: '24px',

      at Object.<anonymous> (src/shorthands/test/borderWidth.test.ts:14:41)

  ‚óè borderWidth ‚Ä∫ properly applies values when passed three

    expect(received).toEqual(expected) // deep equality

    - Expected  - 4
    + Received  + 4

      Object {
    -   "borderBottomWidth": "36px",
    -   "borderLeftWidth": "24px",
    -   "borderRightWidth": "24px",
    -   "borderTopWidth": "12px",
    +   "borderbottomWidth": "36px",
    +   "borderleftWidth": "24px",
    +   "borderrightWidth": "24px",
    +   "bordertopWidth": "12px",
      }

      21 |
      22 |   it('properly applies values when passed three', () => {
    > 23 |     expect(borderWidth('12px', '24px', '36px')).toEqual({
         |                                                 ^
      24 |       borderBottomWidth: '36px',
      25 |       borderLeftWidth: '24px',
      26 |       borderRightWidth: '24px',

      at Object.<anonymous> (src/shorthands/test/borderWidth.test.ts:23:49)

  ‚óè borderWidth ‚Ä∫ properly applies values when passed four

    expect(received).toEqual(expected) // deep equality

    - Expected  - 4
    + Received  + 4

      Object {
    -   "borderBottomWidth": "36px",
    -   "borderLeftWidth": "48px",
    -   "borderRightWidth": "24px",
    -   "borderTopWidth": "12px",
    +   "borderbottomWidth": "36px",
    +   "borderleftWidth": "48px",
    +   "borderrightWidth": "24px",
    +   "bordertopWidth": "12px",
      }

      30 |
      31 |   it('properly applies values when passed four', () => {
    > 32 |     expect(borderWidth('12px', '24px', '36px', '48px')).toEqual({
         |                                                         ^
      33 |       borderBottomWidth: '36px',
      34 |       borderLeftWidth: '48px',
      35 |       borderRightWidth: '24px',

      at Object.<anonymous> (src/shorthands/test/borderWidth.test.ts:32:57)

  ‚óè borderWidth ‚Ä∫ properly applies values when passed integers

    expect(received).toEqual(expected) // deep equality

    - Expected  - 4
    + Received  + 4

      Object {
    -   "borderBottomWidth": 36,
    -   "borderLeftWidth": 48,
    -   "borderRightWidth": 24,
    -   "borderTopWidth": 12,
    +   "borderbottomWidth": 36,
    +   "borderleftWidth": 48,
    +   "borderrightWidth": 24,
    +   "bordertopWidth": 12,
      }

      39 |
      40 |   it('properly applies values when passed integers', () => {
    > 41 |     expect(borderWidth(12, 24, 36, 48)).toEqual({
         |                                         ^
      42 |       borderBottomWidth: 36,
      43 |       borderLeftWidth: 48,
      44 |       borderRightWidth: 24,

      at Object.<anonymous> (src/shorthands/test/borderWidth.test.ts:41:41)

  ‚óè borderWidth ‚Ä∫ properly applies values when passed zero

    expect(received).toEqual(expected) // deep equality

    - Expected  - 4
    + Received  + 4

      Object {
    -   "borderBottomWidth": 0,
    -   "borderLeftWidth": 0,
    -   "borderRightWidth": 0,
    -   "borderTopWidth": 0,
    +   "borderbottomWidth": 0,
    +   "borderleftWidth": 0,
    +   "borderrightWidth": 0,
    +   "bordertopWidth": 0,
      }

      48 |
      49 |   it('properly applies values when passed zero', () => {
    > 50 |     expect(borderWidth(0)).toEqual({
         |                            ^
      51 |       borderBottomWidth: 0,
      52 |       borderLeftWidth: 0,
      53 |       borderRightWidth: 0,

      at Object.<anonymous> (src/shorthands/test/borderWidth.test.ts:50:28)

  ‚óè borderWidth ‚Ä∫ properly applies values when passed null

    expect(received).toEqual(expected) // deep equality

    - Expected  - 4
    + Received  + 4

      Object {
    -   "borderBottomWidth": "24px",
    -   "borderLeftWidth": "48px",
    -   "borderRightWidth": "24px",
    -   "borderTopWidth": "0px",
    +   "borderbottomWidth": "24px",
    +   "borderleftWidth": "48px",
    +   "borderrightWidth": "48px",
    +   "bordertopWidth": "24px",
      }

      57 |
      58 |   it('properly applies values when passed null', () => {
    > 59 |     expect(borderWidth(null, '24px', null, '48px')).toEqual({
         |                                                     ^
      60 |       borderBottomWidth: '24px',
      61 |       borderLeftWidth: '48px',
      62 |       borderRightWidth: '24px',

      at Object.<anonymous> (src/shorthands/test/borderWidth.test.ts:59:53)

  ‚óè borderWidth ‚Ä∫ properly applies values when passed undefined

    expect(received).toEqual(expected) // deep equality

    - Expected  - 4
    + Received  + 4

      Object {
    -   "borderBottomWidth": "24px",
    -   "borderLeftWidth": "48px",
    -   "borderRightWidth": "24px",
    -   "borderTopWidth": "0px",
    +   "borderbottomWidth": "24px",
    +   "borderleftWidth": "48px",
    +   "borderrightWidth": "48px",
    +   "bordertopWidth": "24px",
      }

      66 |
      67 |   it('properly applies values when passed undefined', () => {
    > 68 |     expect(borderWidth(undefined, '24px', undefined, '48px')).toEqual({
         |                                                               ^
      69 |       borderBottomWidth: '24px',
      70 |       borderLeftWidth: '48px',
      71 |       borderRightWidth: '24px',

      at Object.<anonymous> (src/shorthands/test/borderWidth.test.ts:68:63)

  ‚óè borderWidth ‚Ä∫ properly applies values when passed a mix of null, undefined, and valid values

    expect(received).toEqual(expected) // deep equality

    - Expected  - 4
    + Received  + 4

      Object {
    -   "borderBottomWidth": "24px",
    -   "borderLeftWidth": "48px",
    -   "borderRightWidth": "24px",
    -   "borderTopWidth": "0px",
    +   "borderbottomWidth": "24px",
    +   "borderleftWidth": "48px",
    +   "borderrightWidth": "48px",
    +   "bordertopWidth": "24px",
      }

      75 |
      76 |   it('properly applies values when passed a mix of null, undefined, and valid values', () => {
    > 77 |     expect(borderWidth(null, '24px', undefined, '48px')).toEqual({
         |                                                          ^
      78 |       borderBottomWidth: '24px',
      79 |       borderLeftWidth: '48px',
      80 |       borderRightWidth: '24px',

      at Object.<anonymous> (src/shorthands/test/borderWidth.test.ts:77:58)

FAIL src/shorthands/test/borderColor.test.ts
  borderColor
    ‚úï properly applies a value when passed only one (3 ms)
    ‚úï properly applies values when passed two (1 ms)
    ‚úï properly applies values when passed three (1 ms)
    ‚úï properly applies values when passed four

  ‚óè borderColor ‚Ä∫ properly applies a value when passed only one

    expect(received).toEqual(expected) // deep equality

    - Expected  - 4
    + Received  + 4

      Object {
    -   "borderBottomColor": "red",
    -   "borderLeftColor": "red",
    -   "borderRightColor": "red",
    -   "borderTopColor": "red",
    +   "borderbottomColor": "red",
    +   "borderleftColor": "red",
    +   "borderrightColor": "red",
    +   "bordertopColor": "red",
      }

      4 | describe('borderColor', () => {
      5 |   it('properly applies a value when passed only one', () => {
    > 6 |     expect(borderColor('red')).toEqual({
        |                                ^
      7 |       borderBottomColor: 'red',
      8 |       borderLeftColor: 'red',
      9 |       borderRightColor: 'red',

      at Object.<anonymous> (src/shorthands/test/borderColor.test.ts:6:32)

  ‚óè borderColor ‚Ä∫ properly applies values when passed two

    expect(received).toEqual(expected) // deep equality

    - Expected  - 4
    + Received  + 4

      Object {
    -   "borderBottomColor": "red",
    -   "borderLeftColor": "blue",
    -   "borderRightColor": "blue",
    -   "borderTopColor": "red",
    +   "borderbottomColor": "red",
    +   "borderleftColor": "blue",
    +   "borderrightColor": "blue",
    +   "bordertopColor": "red",
      }

      12 |   })
      13 |   it('properly applies values when passed two', () => {
    > 14 |     expect(borderColor('red', 'blue')).toEqual({
         |                                        ^
      15 |       borderBottomColor: 'red',
      16 |       borderLeftColor: 'blue',
      17 |       borderRightColor: 'blue',

      at Object.<anonymous> (src/shorthands/test/borderColor.test.ts:14:40)

  ‚óè borderColor ‚Ä∫ properly applies values when passed three

    expect(received).toEqual(expected) // deep equality

    - Expected  - 4
    + Received  + 4

      Object {
    -   "borderBottomColor": "green",
    -   "borderLeftColor": "blue",
    -   "borderRightColor": "blue",
    -   "borderTopColor": "red",
    +   "borderbottomColor": "green",
    +   "borderleftColor": "blue",
    +   "borderrightColor": "blue",
    +   "bordertopColor": "red",
      }

      20 |   })
      21 |   it('properly applies values when passed three', () => {
    > 22 |     expect(borderColor('red', 'blue', 'green')).toEqual({
         |                                                 ^
      23 |       borderBottomColor: 'green',
      24 |       borderLeftColor: 'blue',
      25 |       borderRightColor: 'blue',

      at Object.<anonymous> (src/shorthands/test/borderColor.test.ts:22:49)

  ‚óè borderColor ‚Ä∫ properly applies values when passed four

    expect(received).toEqual(expected) // deep equality

    - Expected  - 4
    + Received  + 4

      Object {
    -   "borderBottomColor": "green",
    -   "borderLeftColor": "yellow",
    -   "borderRightColor": "blue",
    -   "borderTopColor": "red",
    +   "borderbottomColor": "green",
    +   "borderleftColor": "yellow",
    +   "borderrightColor": "blue",
    +   "bordertopColor": "red",
      }

      28 |   })
      29 |   it('properly applies values when passed four', () => {
    > 30 |     expect(borderColor('red', 'blue', 'green', 'yellow')).toEqual({
         |                                                           ^
      31 |       borderBottomColor: 'green',
      32 |       borderLeftColor: 'yellow',
      33 |       borderRightColor: 'blue',

      at Object.<anonymous> (src/shorthands/test/borderColor.test.ts:30:59)

PASS src/mixins/test/hideVisually.test.ts
  hideVisually
    ‚úì should return the CSS in JS (2 ms)

PASS src/internalHelpers/test/_endsWith.test.ts
  endsWith
    ‚úì should return true if string ends with suffix (2 ms)
    ‚úì should return false if string does not end with suffix

PASS src/internalHelpers/test/_guard.test.ts
  guard
    ‚úì should return the value in case it is within the boundary (2 ms)
    ‚úì should return the upper boundary in case the value is higher
    ‚úì should return the lower boundary in case the value is lower
    ‚úì should return the lower boundary in case the value is equal to the lower boundary
    ‚úì should return the upper boundary in case the value is equal to the upper boundary
    ‚úì should return NaN in case the value is NaN
    ‚úì should return Infinity in case the value is Infinity (1 ms)
    ‚úì should return -Infinity in case the value is -Infinity (4 ms)

PASS src/helpers/test/em.test.ts
  em
    ‚úì should convert a simple number to ems (1 ms)

PASS src/mixins/test/hideText.test.ts
  hideText
    ‚úì should return the CSS in JS (1 ms)
    ‚úì should add rules when block has existing rules (17 ms)

PASS src/mixins/test/normalize.test.ts
  normalize
    ‚úì should return rules (2 ms)

PASS src/shorthands/test/backgrounds.test.ts
  backgrounds
    ‚úì should generate a single background from a parameter (1 ms)
    ‚úì should generate a multiple backgrounds from multiple parameters
    ‚úì should generate a single background from a parameter with spaces
    ‚úì should generate a multiple backgrounds from multiple parameters with spaces
    ‚úì should generate a single background from a parameter with quotes
    ‚úì should generate a multiple backgrounds from multiple parameters with quotes

FAIL src/mixins/test/wordWrap.test.ts
  ‚óè Test suite failed to run

    [96msrc/mixins/wordWrap.ts[0m:[93m26[0m:[93m34[0m - [91merror[0m[90m TS1015: [0mParameter cannot have question mark and initializer.

    [7m26[0m export default function wordWrap(wrap?: string = 'break-word'): Styles {
    [7m  [0m [91m                                 ~~~~[0m

FAIL src/mixins/test/linearGradient.test.ts
  ‚óè Test suite failed to run

    [96msrc/mixins/linearGradient.ts[0m:[93m52[0m:[93m44[0m - [91merror[0m[90m TS2345: [0mArgument of type 'TemplateStringsArray' is not assignable to parameter of type 'string[]'.
      Type 'TemplateStringsArray' is missing the following properties from type 'string[]': pop, push, reverse, shift, and 5 more.

    [7m52[0m     backgroundImage: constructGradientValue`linear-gradient(${toDirection}${colorStops
    [7m  [0m [91m                                           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~[0m
    [7m53[0m       .join(', ')
    [7m  [0m [91m~~~~~~~~~~~~~~~~~[0m
    [7m54[0m       .replace(/,(?=\S)/g, ', ')})`,
    [7m  [0m [91m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~[0m

FAIL src/mixins/test/hiDPI.test.ts
  ‚óè Test suite failed to run

    [96msrc/mixins/hiDPI.ts[0m:[93m32[0m:[93m31[0m - [91merror[0m[90m TS1015: [0mParameter cannot have question mark and initializer.

    [7m32[0m export default function hiDPI(ratio?: number = 1.3): string {
    [7m  [0m [91m                              ~~~~~[0m

FAIL src/mixins/test/radialGradient.test.ts
  ‚óè Test suite failed to run

    [96msrc/mixins/radialGradient.ts[0m:[93m51[0m:[93m44[0m - [91merror[0m[90m TS2345: [0mArgument of type 'TemplateStringsArray' is not assignable to parameter of type 'string[]'.
      Type 'TemplateStringsArray' is missing the following properties from type 'string[]': pop, push, reverse, shift, and 5 more.

    [7m51[0m     backgroundImage: constructGradientValue`radial-gradient(${position}${shape}${extent}${colorStops.join(
    [7m  [0m [91m                                           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~[0m
    [7m52[0m       ', ',
    [7m  [0m [91m~~~~~~~~~~~[0m
    [7m53[0m     )})`,
    [7m  [0m [91m~~~~~~~~[0m

FAIL src/mixins/test/clearFix.test.ts
  ‚óè Test suite failed to run

    [96msrc/mixins/clearFix.ts[0m:[93m26[0m:[93m34[0m - [91merror[0m[90m TS1015: [0mParameter cannot have question mark and initializer.

    [7m26[0m export default function clearFix(parent?: string = '&'): Styles {
    [7m  [0m [91m                                 ~~~~~~[0m

FAIL src/mixins/test/ellipsis.test.ts
  ‚óè Test suite failed to run

    [96msrc/mixins/ellipsis.ts[0m:[93m29[0m:[93m42[0m - [91merror[0m[90m TS17020: [0m'?' at the start of a type is not valid TypeScript syntax. Did you mean to write 'string | number'?

    [7m29[0m export default function ellipsis(width?: ?string | ?number, lines?: number = 1): Styles {
    [7m  [0m [91m                                         ~~~~~~~~~~~~~~~~~[0m
    [96msrc/mixins/ellipsis.ts[0m:[93m29[0m:[93m52[0m - [91merror[0m[90m TS17020: [0m'?' at the start of a type is not valid TypeScript syntax. Did you mean to write 'number'?

    [7m29[0m export default function ellipsis(width?: ?string | ?number, lines?: number = 1): Styles {
    [7m  [0m [91m                                                   ~~~~~~~[0m
    [96msrc/mixins/ellipsis.ts[0m:[93m29[0m:[93m61[0m - [91merror[0m[90m TS1015: [0mParameter cannot have question mark and initializer.

    [7m29[0m export default function ellipsis(width?: ?string | ?number, lines?: number = 1): Styles {
    [7m  [0m [91m                                                            ~~~~~[0m

FAIL src/mixins/test/triangle.test.ts
  ‚óè Test suite failed to run

    [96msrc/mixins/test/triangle.test.ts[0m:[93m246[0m:[93m16[0m - [91merror[0m[90m TS2345: [0mArgument of type '{ foregroundColor: string; height: string; width: string; }' is not assignable to parameter of type 'TriangleConfiguration'.
      Property 'pointingDirection' is missing in type '{ foregroundColor: string; height: string; width: string; }' but required in type 'TriangleConfiguration'.

    [7m246[0m       triangle({
    [7m   [0m [91m               ~[0m
    [7m247[0m         foregroundColor: 'blue',
    [7m   [0m [91m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~[0m
    [7m...[0m 
    [7m249[0m         width: '10px',
    [7m   [0m [91m~~~~~~~~~~~~~~~~~~~~~~[0m
    [7m250[0m       })
    [7m   [0m [91m~~~~~~~[0m

      [96msrc/types/triangleConfiguration.ts[0m:[93m19[0m:[93m3[0m
        [7m19[0m   pointingDirection: SideKeyword,
        [7m  [0m [96m  ~~~~~~~~~~~~~~~~~[0m
        'pointingDirection' is declared here.
    [96msrc/mixins/test/triangle.test.ts[0m:[93m263[0m:[93m9[0m - [91merror[0m[90m TS2322: [0mType 'false' is not assignable to type 'SideKeyword'.

    [7m263[0m         pointingDirection: false,
    [7m   [0m [91m        ~~~~~~~~~~~~~~~~~[0m

      [96msrc/types/triangleConfiguration.ts[0m:[93m19[0m:[93m3[0m
        [7m19[0m   pointingDirection: SideKeyword,
        [7m  [0m [96m  ~~~~~~~~~~~~~~~~~[0m
        The expected type comes from property 'pointingDirection' which is declared here on type 'TriangleConfiguration'

FAIL src/mixins/test/cover.test.ts
  ‚óè Test suite failed to run

    [96msrc/mixins/cover.ts[0m:[93m28[0m:[93m31[0m - [91merror[0m[90m TS1015: [0mParameter cannot have question mark and initializer.

    [7m28[0m export default function cover(offset?: number | string = 0): Styles {
    [7m  [0m [91m                              ~~~~~~[0m

FAIL src/mixins/test/retinaImage.test.ts
  ‚óè Test suite failed to run

    [96msrc/mixins/test/retinaImage.test.ts[0m:[93m7[0m:[93m24[0m - [91merror[0m[90m TS2554: [0mExpected 1-5 arguments, but got 0.

    [7m7[0m     expect(() => ({ ...retinaImage() })).toThrow()
    [7m [0m [91m                       ~~~~~~~~~~~~~[0m

      [96msrc/mixins/retinaImage.ts[0m:[93m36[0m:[93m3[0m
        [7m36[0m   filename: string,
        [7m  [0m [96m  ~~~~~~~~~~~~~~~~[0m
        An argument for 'filename' was not provided.

FAIL src/mixins/test/fluidRange.test.ts
  ‚óè Test suite failed to run

    [96msrc/mixins/test/fluidRange.test.ts[0m:[93m136[0m:[93m9[0m - [91merror[0m[90m TS2345: [0mArgument of type 'number' is not assignable to parameter of type 'string'.

    [7m136[0m         400,
    [7m   [0m [91m        ~~~[0m

FAIL src/mixins/test/between.test.ts
  ‚óè Test suite failed to run

    [96msrc/mixins/test/between.test.ts[0m:[93m17[0m:[93m32[0m - [91merror[0m[90m TS2345: [0mArgument of type 'number' is not assignable to parameter of type 'string'.

    [7m17[0m       between('20px', '100px', 400, 1000)
    [7m  [0m [91m                               ~~~[0m

FAIL src/mixins/test/fontFace.test.ts
  ‚óè Test suite failed to run

    [96msrc/mixins/test/fontFace.test.ts[0m:[93m188[0m:[93m16[0m - [91merror[0m[90m TS2345: [0mArgument of type '{ fontFilePath: string; }' is not assignable to parameter of type 'FontFaceConfiguration'.
      Property 'fontFamily' is missing in type '{ fontFilePath: string; }' but required in type 'FontFaceConfiguration'.

    [7m188[0m       fontFace({
    [7m   [0m [91m               ~[0m
    [7m189[0m         fontFilePath: 'path/to/file',
    [7m   [0m [91m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~[0m
    [7m190[0m       })
    [7m   [0m [91m~~~~~~~[0m

      [96msrc/types/fontFaceConfiguration.ts[0m:[93m22[0m:[93m3[0m
        [7m22[0m   fontFamily: string,
        [7m  [0m [96m  ~~~~~~~~~~[0m
        'fontFamily' is declared here.
    [96msrc/mixins/test/fontFace.test.ts[0m:[93m209[0m:[93m9[0m - [91merror[0m[90m TS2322: [0mType 'string' is not assignable to type 'string[]'.

    [7m209[0m         localFonts: 'Helvetica',
    [7m   [0m [91m        ~~~~~~~~~~[0m

      [96msrc/types/fontFaceConfiguration.ts[0m:[93m30[0m:[93m3[0m
        [7m30[0m   localFonts?: Array<string> | null,
        [7m  [0m [96m  ~~~~~~~~~~[0m
        The expected type comes from property 'localFonts' which is declared here on type 'FontFaceConfiguration'
    [96msrc/mixins/test/fontFace.test.ts[0m:[93m220[0m:[93m9[0m - [91merror[0m[90m TS2322: [0mType 'string' is not assignable to type 'string[]'.

    [7m220[0m         fileFormats: 'svg',
    [7m   [0m [91m        ~~~~~~~~~~~[0m

      [96msrc/types/fontFaceConfiguration.ts[0m:[93m28[0m:[93m3[0m
        [7m28[0m   fileFormats?: Array<string>,
        [7m  [0m [96m  ~~~~~~~~~~~[0m
        The expected type comes from property 'fileFormats' which is declared here on type 'FontFaceConfiguration'

FAIL src/shorthands/test/transitions.test.ts
  ‚óè Test suite failed to run

    [96msrc/shorthands/test/transitions.test.ts[0m:[93m31[0m:[93m53[0m - [91merror[0m[90m TS2345: [0mArgument of type 'number' is not assignable to parameter of type 'string | string[]'.

    [7m31[0m       ...transitions(['color', 'background-color'], 1),
    [7m  [0m [91m                                                    ~[0m

FAIL src/shorthands/test/textInputs.test.ts
  ‚óè Test suite failed to run

    [96msrc/shorthands/test/textInputs.test.ts[0m:[93m132[0m:[93m19[0m - [91merror[0m[90m TS2345: [0mArgument of type '"clicked"' is not assignable to parameter of type 'InteractionState'.

    [7m132[0m       [textInputs('clicked')]: { 'border-color': 'black' },
    [7m   [0m [91m                  ~~~~~~~~~[0m

FAIL src/shorthands/test/position.test.ts
  ‚óè Test suite failed to run

    [96msrc/shorthands/position.ts[0m:[93m52[0m:[93m20[0m - [91merror[0m[90m TS17020: [0m'?' at the start of a type is not valid TypeScript syntax. Did you mean to write 'string | number'?

    [7m52[0m   ...values: Array<?string | ?number>
    [7m  [0m [91m                   ~~~~~~~~~~~~~~~~~[0m
    [96msrc/shorthands/position.ts[0m:[93m52[0m:[93m30[0m - [91merror[0m[90m TS17020: [0m'?' at the start of a type is not valid TypeScript syntax. Did you mean to write 'number'?

    [7m52[0m   ...values: Array<?string | ?number>
    [7m  [0m [91m                             ~~~~~~~[0m
    [96msrc/shorthands/position.ts[0m:[93m54[0m:[93m27[0m - [91merror[0m[90m TS2345: [0mArgument of type 'string | number' is not assignable to parameter of type 'string'.
      Type 'number' is not assignable to type 'string'.

    [7m54[0m   if (positionMap.indexOf(firstValue) >= 0 && firstValue) {
    [7m  [0m [91m                          ~~~~~~~~~~[0m

FAIL src/shorthands/test/padding.test.ts
  ‚óè Test suite failed to run

    [96msrc/shorthands/padding.ts[0m:[93m28[0m:[93m50[0m - [91merror[0m[90m TS17020: [0m'?' at the start of a type is not valid TypeScript syntax. Did you mean to write 'string | number'?

    [7m28[0m export default function padding(...values: Array<?string | ?number>): Styles {
    [7m  [0m [91m                                                 ~~~~~~~~~~~~~~~~~[0m
    [96msrc/shorthands/padding.ts[0m:[93m28[0m:[93m60[0m - [91merror[0m[90m TS17020: [0m'?' at the start of a type is not valid TypeScript syntax. Did you mean to write 'number'?

    [7m28[0m export default function padding(...values: Array<?string | ?number>): Styles {
    [7m  [0m [91m                                                           ~~~~~~~[0m

FAIL src/math/test/math.test.ts
  ‚óè Test suite failed to run

    [96msrc/math/math.ts[0m:[93m10[0m:[93m13[0m - [91merror[0m[90m TS2339: [0mProperty 'symbols' does not exist on type '{}'.

    [7m10[0m   symbolMap.symbols = additionalSymbols
    [7m  [0m [91m            ~~~~~~~[0m
    [96msrc/math/math.ts[0m:[93m11[0m:[93m59[0m - [91merror[0m[90m TS2339: [0mProperty 'symbols' does not exist on type 'Object'.

    [7m11[0m     ? { ...defaultSymbolMap.symbols, ...additionalSymbols.symbols }
    [7m  [0m [91m                                                          ~~~~~~~[0m
    [96msrc/math/math.ts[0m:[93m27[0m:[93m32[0m - [91merror[0m[90m TS2339: [0mProperty 'symbols' does not exist on type 'Object'.

    [7m27[0m   const operators = [symbolMap.symbols['('].prefix]
    [7m  [0m [91m                               ~~~~~~~[0m
    [96msrc/math/math.ts[0m:[93m33[0m:[93m29[0m - [91merror[0m[90m TS2339: [0mProperty 'symbols' does not exist on type 'Object'.

    [7m33[0m       Object.keys(symbolMap.symbols)
    [7m  [0m [91m                            ~~~~~~~[0m
    [96msrc/math/math.ts[0m:[93m34[0m:[93m31[0m - [91merror[0m[90m TS2339: [0mProperty 'symbols' does not exist on type 'Object'.

    [7m34[0m         .map(key => symbolMap.symbols[key])
    [7m  [0m [91m                              ~~~~~~~[0m
    [96msrc/math/math.ts[0m:[93m52[0m:[93m33[0m - [91merror[0m[90m TS2339: [0mProperty 'symbols' does not exist on type 'Object'.

    [7m52[0m     const notNumber = symbolMap.symbols[token]
    [7m  [0m [91m                                ~~~~~~~[0m

FAIL src/internalHelpers/test/_curry.test.ts
  ‚óè Test suite failed to run

    [96msrc/internalHelpers/test/_curry.test.ts[0m:[93m17[0m:[93m12[0m - [91merror[0m[90m TS2349: [0mThis expression is not callable.
      Type 'String' has no call signatures.

    [7m17[0m     expect(curry(fn)(0.5)('#FFF')(0.8)).toEqual('0.5-#FFF-0.8')
    [7m  [0m [91m           ~~~~~~~~~~~~~~~~~~~~~~[0m

FAIL src/color/test/tint.test.ts
  ‚óè Test suite failed to run

    [96msrc/color/mix.ts[0m:[93m48[0m:[93m24[0m - [91merror[0m[90m TS2345: [0mArgument of type 'string | number' is not assignable to parameter of type 'string'.
      Type 'number' is not assignable to type 'string'.

    [7m48[0m   const x = parseFloat(weight) * 2 - 1
    [7m  [0m [91m                       ~~~~~~[0m
    [96msrc/color/mix.ts[0m:[93m58[0m:[93m38[0m - [91merror[0m[90m TS2345: [0mArgument of type 'string | number' is not assignable to parameter of type 'string'.
      Type 'number' is not assignable to type 'string'.

    [7m58[0m     alpha: color1.alpha * parseFloat(weight) + color2.alpha * (1 - parseFloat(weight)),
    [7m  [0m [91m                                     ~~~~~~[0m
    [96msrc/color/mix.ts[0m:[93m58[0m:[93m79[0m - [91merror[0m[90m TS2345: [0mArgument of type 'string | number' is not assignable to parameter of type 'string'.
      Type 'number' is not assignable to type 'string'.

    [7m58[0m     alpha: color1.alpha * parseFloat(weight) + color2.alpha * (1 - parseFloat(weight)),
    [7m  [0m [91m                                                                              ~~~~~~[0m

FAIL src/helpers/test/remToPx.test.ts
  ‚óè Test suite failed to run

    [96msrc/helpers/remToPx.ts[0m:[93m10[0m:[93m23[0m - [91merror[0m[90m TS2345: [0mArgument of type 'string | number' is not assignable to parameter of type 'string'.
      Type 'number' is not assignable to type 'string'.

    [7m10[0m     return parseFloat(base)
    [7m  [0m [91m                      ~~~~[0m
    [96msrc/helpers/remToPx.ts[0m:[93m14[0m:[93m24[0m - [91merror[0m[90m TS2345: [0mArgument of type 'string | number' is not assignable to parameter of type 'string'.
      Type 'number' is not assignable to type 'string'.

    [7m14[0m     return (parseFloat(base) / 100) * defaultFontSize
    [7m  [0m [91m                       ~~~~[0m
    [96msrc/helpers/remToPx.ts[0m:[93m62[0m:[93m13[0m - [91merror[0m[90m TS2362: [0mThe left-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.

    [7m62[0m   return `${deconstructedValue[0] * newBase}px`
    [7m  [0m [91m            ~~~~~~~~~~~~~~~~~~~~~[0m

FAIL src/helpers/test/important.test.ts
  ‚óè Test suite failed to run

    [96msrc/helpers/test/important.test.ts[0m:[93m138[0m:[93m17[0m - [91merror[0m[90m TS2345: [0mArgument of type 'string' is not assignable to parameter of type 'Styles'.

    [7m138[0m       important('test')
    [7m   [0m [91m                ~~~~~~[0m

FAIL src/color/test/shade.test.ts
  ‚óè Test suite failed to run

    [96msrc/color/mix.ts[0m:[93m48[0m:[93m24[0m - [91merror[0m[90m TS2345: [0mArgument of type 'string | number' is not assignable to parameter of type 'string'.
      Type 'number' is not assignable to type 'string'.

    [7m48[0m   const x = parseFloat(weight) * 2 - 1
    [7m  [0m [91m                       ~~~~~~[0m
    [96msrc/color/mix.ts[0m:[93m58[0m:[93m38[0m - [91merror[0m[90m TS2345: [0mArgument of type 'string | number' is not assignable to parameter of type 'string'.
      Type 'number' is not assignable to type 'string'.

    [7m58[0m     alpha: color1.alpha * parseFloat(weight) + color2.alpha * (1 - parseFloat(weight)),
    [7m  [0m [91m                                     ~~~~~~[0m
    [96msrc/color/mix.ts[0m:[93m58[0m:[93m79[0m - [91merror[0m[90m TS2345: [0mArgument of type 'string | number' is not assignable to parameter of type 'string'.
      Type 'number' is not assignable to type 'string'.

    [7m58[0m     alpha: color1.alpha * parseFloat(weight) + color2.alpha * (1 - parseFloat(weight)),
    [7m  [0m [91m                                                                              ~~~~~~[0m

FAIL src/color/test/transparentize.test.ts
  ‚óè Test suite failed to run

    [96msrc/color/parseToRgb.ts[0m:[93m64[0m:[93m28[0m - [91merror[0m[90m TS2554: [0mExpected 3-4 arguments, but got 1.

    [7m64[0m     const rgbColorString = hslToRgb(hslMatched)
    [7m  [0m [91m                           ~~~~~~~~~~~~~~~~~~~~[0m

      [96msrc/internalHelpers/_hslToRgb.ts[0m:[93m13[0m:[93m3[0m
        [7m13[0m   saturation: number,
        [7m  [0m [96m  ~~~~~~~~~~~~~~~~~~[0m
        An argument for 'saturation' was not provided.
    [96msrc/color/parseToRgb.ts[0m:[93m74[0m:[93m28[0m - [91merror[0m[90m TS2554: [0mExpected 3-4 arguments, but got 1.

    [7m74[0m     const rgbColorString = hslToRgb(hslaMatched)
    [7m  [0m [91m                           ~~~~~~~~~~~~~~~~~~~~~[0m

      [96msrc/internalHelpers/_hslToRgb.ts[0m:[93m13[0m:[93m3[0m
        [7m13[0m   saturation: number,
        [7m  [0m [96m  ~~~~~~~~~~~~~~~~~~[0m
        An argument for 'saturation' was not provided.

FAIL src/color/test/saturate.test.ts
  ‚óè Test suite failed to run

    [96msrc/color/parseToRgb.ts[0m:[93m64[0m:[93m28[0m - [91merror[0m[90m TS2554: [0mExpected 3-4 arguments, but got 1.

    [7m64[0m     const rgbColorString = hslToRgb(hslMatched)
    [7m  [0m [91m                           ~~~~~~~~~~~~~~~~~~~~[0m

      [96msrc/internalHelpers/_hslToRgb.ts[0m:[93m13[0m:[93m3[0m
        [7m13[0m   saturation: number,
        [7m  [0m [96m  ~~~~~~~~~~~~~~~~~~[0m
        An argument for 'saturation' was not provided.
    [96msrc/color/parseToRgb.ts[0m:[93m74[0m:[93m28[0m - [91merror[0m[90m TS2554: [0mExpected 3-4 arguments, but got 1.

    [7m74[0m     const rgbColorString = hslToRgb(hslaMatched)
    [7m  [0m [91m                           ~~~~~~~~~~~~~~~~~~~~~[0m

      [96msrc/internalHelpers/_hslToRgb.ts[0m:[93m13[0m:[93m3[0m
        [7m13[0m   saturation: number,
        [7m  [0m [96m  ~~~~~~~~~~~~~~~~~~[0m
        An argument for 'saturation' was not provided.

FAIL src/color/test/setHue.test.ts
  ‚óè Test suite failed to run

    [96msrc/color/parseToRgb.ts[0m:[93m64[0m:[93m28[0m - [91merror[0m[90m TS2554: [0mExpected 3-4 arguments, but got 1.

    [7m64[0m     const rgbColorString = hslToRgb(hslMatched)
    [7m  [0m [91m                           ~~~~~~~~~~~~~~~~~~~~[0m

      [96msrc/internalHelpers/_hslToRgb.ts[0m:[93m13[0m:[93m3[0m
        [7m13[0m   saturation: number,
        [7m  [0m [96m  ~~~~~~~~~~~~~~~~~~[0m
        An argument for 'saturation' was not provided.
    [96msrc/color/parseToRgb.ts[0m:[93m74[0m:[93m28[0m - [91merror[0m[90m TS2554: [0mExpected 3-4 arguments, but got 1.

    [7m74[0m     const rgbColorString = hslToRgb(hslaMatched)
    [7m  [0m [91m                           ~~~~~~~~~~~~~~~~~~~~~[0m

      [96msrc/internalHelpers/_hslToRgb.ts[0m:[93m13[0m:[93m3[0m
        [7m13[0m   saturation: number,
        [7m  [0m [96m  ~~~~~~~~~~~~~~~~~~[0m
        An argument for 'saturation' was not provided.

FAIL src/helpers/test/modularScale.test.ts
  ‚óè Test suite failed to run

    [96msrc/helpers/test/modularScale.test.ts[0m:[93m7[0m:[93m34[0m - [91merror[0m[90m TS2554: [0mExpected 1-3 arguments, but got 0.

    [7m7[0m     expect(() => ({ 'font-size': modularScale() })).toThrow()
    [7m [0m [91m                                 ~~~~~~~~~~~~~~[0m

      [96msrc/helpers/modularScale.ts[0m:[93m53[0m:[93m3[0m
        [7m53[0m   steps: number,
        [7m  [0m [96m  ~~~~~~~~~~~~~[0m
        An argument for 'steps' was not provided.
    [96msrc/helpers/test/modularScale.test.ts[0m:[93m86[0m:[93m30[0m - [91merror[0m[90m TS2345: [0mArgument of type '"invalid"' is not assignable to parameter of type 'ModularScaleRatio'.

    [7m86[0m       modularScale(2, '1em', 'invalid')
    [7m  [0m [91m                             ~~~~~~~~~[0m

FAIL src/color/test/toColorString.test.ts
  ‚óè Test suite failed to run

    [96msrc/color/test/toColorString.test.ts[0m:[93m64[0m:[93m32[0m - [91merror[0m[90m TS2345: [0mArgument of type '{ red: number; green: number; hue: number; }' is not assignable to parameter of type 'Color'.
      Type '{ red: number; green: number; hue: number; }' is missing the following properties from type 'RgbaColor': alpha, blue

    [7m64[0m     expect(() => toColorString({ red: 255, green: 1, hue: 240 })).toThrow(
    [7m  [0m [91m                               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~[0m

FAIL src/color/test/setLightness.test.ts
  ‚óè Test suite failed to run

    [96msrc/color/parseToRgb.ts[0m:[93m64[0m:[93m28[0m - [91merror[0m[90m TS2554: [0mExpected 3-4 arguments, but got 1.

    [7m64[0m     const rgbColorString = hslToRgb(hslMatched)
    [7m  [0m [91m                           ~~~~~~~~~~~~~~~~~~~~[0m

      [96msrc/internalHelpers/_hslToRgb.ts[0m:[93m13[0m:[93m3[0m
        [7m13[0m   saturation: number,
        [7m  [0m [96m  ~~~~~~~~~~~~~~~~~~[0m
        An argument for 'saturation' was not provided.
    [96msrc/color/parseToRgb.ts[0m:[93m74[0m:[93m28[0m - [91merror[0m[90m TS2554: [0mExpected 3-4 arguments, but got 1.

    [7m74[0m     const rgbColorString = hslToRgb(hslaMatched)
    [7m  [0m [91m                           ~~~~~~~~~~~~~~~~~~~~~[0m

      [96msrc/internalHelpers/_hslToRgb.ts[0m:[93m13[0m:[93m3[0m
        [7m13[0m   saturation: number,
        [7m  [0m [96m  ~~~~~~~~~~~~~~~~~~[0m
        An argument for 'saturation' was not provided.

FAIL src/color/test/rgbToColorString.test.ts
  ‚óè Test suite failed to run

    [96msrc/color/test/rgbToColorString.test.ts[0m:[93m49[0m:[93m57[0m - [91merror[0m[90m TS2345: [0mArgument of type '{ red: number; green: number; hue: number; }' is not assignable to parameter of type 'RgbColor | RgbaColor'.
      Object literal may only specify known properties, and 'hue' does not exist in type 'RgbColor | RgbaColor'.

    [7m49[0m     expect(() => rgbToColorString({ red: 255, green: 1, hue: 240 })).toThrow(
    [7m  [0m [91m                                                        ~~~~~~~~[0m

FAIL src/color/test/setSaturation.test.ts
  ‚óè Test suite failed to run

    [96msrc/color/parseToRgb.ts[0m:[93m64[0m:[93m28[0m - [91merror[0m[90m TS2554: [0mExpected 3-4 arguments, but got 1.

    [7m64[0m     const rgbColorString = hslToRgb(hslMatched)
    [7m  [0m [91m                           ~~~~~~~~~~~~~~~~~~~~[0m

      [96msrc/internalHelpers/_hslToRgb.ts[0m:[93m13[0m:[93m3[0m
        [7m13[0m   saturation: number,
        [7m  [0m [96m  ~~~~~~~~~~~~~~~~~~[0m
        An argument for 'saturation' was not provided.
    [96msrc/color/parseToRgb.ts[0m:[93m74[0m:[93m28[0m - [91merror[0m[90m TS2554: [0mExpected 3-4 arguments, but got 1.

    [7m74[0m     const rgbColorString = hslToRgb(hslaMatched)
    [7m  [0m [91m                           ~~~~~~~~~~~~~~~~~~~~~[0m

      [96msrc/internalHelpers/_hslToRgb.ts[0m:[93m13[0m:[93m3[0m
        [7m13[0m   saturation: number,
        [7m  [0m [96m  ~~~~~~~~~~~~~~~~~~[0m
        An argument for 'saturation' was not provided.

FAIL src/color/test/readableColor.test.ts
  ‚óè Test suite failed to run

    [96msrc/color/getLuminance.ts[0m:[93m31[0m:[93m9[0m - [91merror[0m[90m TS2322: [0mType 'RgbColor | RgbaColor' is not assignable to type 'Record<string, number>'.
      Type 'RgbColor' is not assignable to type 'Record<string, number>'.
        Index signature for type 'string' is missing in type 'RgbColor'.

    [7m31[0m   const rgbColor: Record<string, number> = parseToRgb(color)
    [7m  [0m [91m        ~~~~~~~~[0m

FAIL src/color/test/rgba.test.ts
  ‚óè Test suite failed to run

    [96msrc/color/parseToRgb.ts[0m:[93m64[0m:[93m28[0m - [91merror[0m[90m TS2554: [0mExpected 3-4 arguments, but got 1.

    [7m64[0m     const rgbColorString = hslToRgb(hslMatched)
    [7m  [0m [91m                           ~~~~~~~~~~~~~~~~~~~~[0m

      [96msrc/internalHelpers/_hslToRgb.ts[0m:[93m13[0m:[93m3[0m
        [7m13[0m   saturation: number,
        [7m  [0m [96m  ~~~~~~~~~~~~~~~~~~[0m
        An argument for 'saturation' was not provided.
    [96msrc/color/parseToRgb.ts[0m:[93m74[0m:[93m28[0m - [91merror[0m[90m TS2554: [0mExpected 3-4 arguments, but got 1.

    [7m74[0m     const rgbColorString = hslToRgb(hslaMatched)
    [7m  [0m [91m                           ~~~~~~~~~~~~~~~~~~~~~[0m

      [96msrc/internalHelpers/_hslToRgb.ts[0m:[93m13[0m:[93m3[0m
        [7m13[0m   saturation: number,
        [7m  [0m [96m  ~~~~~~~~~~~~~~~~~~[0m
        An argument for 'saturation' was not provided.

FAIL src/color/test/mix.test.ts
  ‚óè Test suite failed to run

    [96msrc/color/mix.ts[0m:[93m48[0m:[93m24[0m - [91merror[0m[90m TS2345: [0mArgument of type 'string | number' is not assignable to parameter of type 'string'.
      Type 'number' is not assignable to type 'string'.

    [7m48[0m   const x = parseFloat(weight) * 2 - 1
    [7m  [0m [91m                       ~~~~~~[0m
    [96msrc/color/mix.ts[0m:[93m58[0m:[93m38[0m - [91merror[0m[90m TS2345: [0mArgument of type 'string | number' is not assignable to parameter of type 'string'.
      Type 'number' is not assignable to type 'string'.

    [7m58[0m     alpha: color1.alpha * parseFloat(weight) + color2.alpha * (1 - parseFloat(weight)),
    [7m  [0m [91m                                     ~~~~~~[0m
    [96msrc/color/mix.ts[0m:[93m58[0m:[93m79[0m - [91merror[0m[90m TS2345: [0mArgument of type 'string | number' is not assignable to parameter of type 'string'.
      Type 'number' is not assignable to type 'string'.

    [7m58[0m     alpha: color1.alpha * parseFloat(weight) + color2.alpha * (1 - parseFloat(weight)),
    [7m  [0m [91m                                                                              ~~~~~~[0m

FAIL src/color/test/opacify.test.ts
  ‚óè Test suite failed to run

    [96msrc/color/parseToRgb.ts[0m:[93m64[0m:[93m28[0m - [91merror[0m[90m TS2554: [0mExpected 3-4 arguments, but got 1.

    [7m64[0m     const rgbColorString = hslToRgb(hslMatched)
    [7m  [0m [91m                           ~~~~~~~~~~~~~~~~~~~~[0m

      [96msrc/internalHelpers/_hslToRgb.ts[0m:[93m13[0m:[93m3[0m
        [7m13[0m   saturation: number,
        [7m  [0m [96m  ~~~~~~~~~~~~~~~~~~[0m
        An argument for 'saturation' was not provided.
    [96msrc/color/parseToRgb.ts[0m:[93m74[0m:[93m28[0m - [91merror[0m[90m TS2554: [0mExpected 3-4 arguments, but got 1.

    [7m74[0m     const rgbColorString = hslToRgb(hslaMatched)
    [7m  [0m [91m                           ~~~~~~~~~~~~~~~~~~~~~[0m

      [96msrc/internalHelpers/_hslToRgb.ts[0m:[93m13[0m:[93m3[0m
        [7m13[0m   saturation: number,
        [7m  [0m [96m  ~~~~~~~~~~~~~~~~~~[0m
        An argument for 'saturation' was not provided.

FAIL src/color/test/parseToHsl.test.ts
  ‚óè Test suite failed to run

    [96msrc/color/parseToRgb.ts[0m:[93m64[0m:[93m28[0m - [91merror[0m[90m TS2554: [0mExpected 3-4 arguments, but got 1.

    [7m64[0m     const rgbColorString = hslToRgb(hslMatched)
    [7m  [0m [91m                           ~~~~~~~~~~~~~~~~~~~~[0m

      [96msrc/internalHelpers/_hslToRgb.ts[0m:[93m13[0m:[93m3[0m
        [7m13[0m   saturation: number,
        [7m  [0m [96m  ~~~~~~~~~~~~~~~~~~[0m
        An argument for 'saturation' was not provided.
    [96msrc/color/parseToRgb.ts[0m:[93m74[0m:[93m28[0m - [91merror[0m[90m TS2554: [0mExpected 3-4 arguments, but got 1.

    [7m74[0m     const rgbColorString = hslToRgb(hslaMatched)
    [7m  [0m [91m                           ~~~~~~~~~~~~~~~~~~~~~[0m

      [96msrc/internalHelpers/_hslToRgb.ts[0m:[93m13[0m:[93m3[0m
        [7m13[0m   saturation: number,
        [7m  [0m [96m  ~~~~~~~~~~~~~~~~~~[0m
        An argument for 'saturation' was not provided.

FAIL src/color/test/meetsContrastGuidelines.test.ts
  ‚óè Test suite failed to run

    [96msrc/color/getLuminance.ts[0m:[93m31[0m:[93m9[0m - [91merror[0m[90m TS2322: [0mType 'RgbColor | RgbaColor' is not assignable to type 'Record<string, number>'.
      Type 'RgbColor' is not assignable to type 'Record<string, number>'.
        Index signature for type 'string' is missing in type 'RgbColor'.

    [7m31[0m   const rgbColor: Record<string, number> = parseToRgb(color)
    [7m  [0m [91m        ~~~~~~~~[0m

FAIL src/color/test/invert.test.ts
  ‚óè Test suite failed to run

    [96msrc/color/parseToRgb.ts[0m:[93m64[0m:[93m28[0m - [91merror[0m[90m TS2554: [0mExpected 3-4 arguments, but got 1.

    [7m64[0m     const rgbColorString = hslToRgb(hslMatched)
    [7m  [0m [91m                           ~~~~~~~~~~~~~~~~~~~~[0m

      [96msrc/internalHelpers/_hslToRgb.ts[0m:[93m13[0m:[93m3[0m
        [7m13[0m   saturation: number,
        [7m  [0m [96m  ~~~~~~~~~~~~~~~~~~[0m
        An argument for 'saturation' was not provided.
    [96msrc/color/parseToRgb.ts[0m:[93m74[0m:[93m28[0m - [91merror[0m[90m TS2554: [0mExpected 3-4 arguments, but got 1.

    [7m74[0m     const rgbColorString = hslToRgb(hslaMatched)
    [7m  [0m [91m                           ~~~~~~~~~~~~~~~~~~~~~[0m

      [96msrc/internalHelpers/_hslToRgb.ts[0m:[93m13[0m:[93m3[0m
        [7m13[0m   saturation: number,
        [7m  [0m [96m  ~~~~~~~~~~~~~~~~~~[0m
        An argument for 'saturation' was not provided.

FAIL src/color/test/parseToRgb.test.ts
  ‚óè Test suite failed to run

    [96msrc/color/test/parseToRgb.test.ts[0m:[93m150[0m:[93m18[0m - [91merror[0m[90m TS2345: [0mArgument of type 'number' is not assignable to parameter of type 'string'.

    [7m150[0m       parseToRgb(12345)
    [7m   [0m [91m                 ~~~~~[0m

FAIL src/color/test/getContrast.test.ts
  ‚óè Test suite failed to run

    [96msrc/color/getLuminance.ts[0m:[93m31[0m:[93m9[0m - [91merror[0m[90m TS2322: [0mType 'RgbColor | RgbaColor' is not assignable to type 'Record<string, number>'.
      Type 'RgbColor' is not assignable to type 'Record<string, number>'.
        Index signature for type 'string' is missing in type 'RgbColor'.

    [7m31[0m   const rgbColor: Record<string, number> = parseToRgb(color)
    [7m  [0m [91m        ~~~~~~~~[0m

FAIL src/color/test/lighten.test.ts
  ‚óè Test suite failed to run

    [96msrc/color/parseToRgb.ts[0m:[93m64[0m:[93m28[0m - [91merror[0m[90m TS2554: [0mExpected 3-4 arguments, but got 1.

    [7m64[0m     const rgbColorString = hslToRgb(hslMatched)
    [7m  [0m [91m                           ~~~~~~~~~~~~~~~~~~~~[0m

      [96msrc/internalHelpers/_hslToRgb.ts[0m:[93m13[0m:[93m3[0m
        [7m13[0m   saturation: number,
        [7m  [0m [96m  ~~~~~~~~~~~~~~~~~~[0m
        An argument for 'saturation' was not provided.
    [96msrc/color/parseToRgb.ts[0m:[93m74[0m:[93m28[0m - [91merror[0m[90m TS2554: [0mExpected 3-4 arguments, but got 1.

    [7m74[0m     const rgbColorString = hslToRgb(hslaMatched)
    [7m  [0m [91m                           ~~~~~~~~~~~~~~~~~~~~~[0m

      [96msrc/internalHelpers/_hslToRgb.ts[0m:[93m13[0m:[93m3[0m
        [7m13[0m   saturation: number,
        [7m  [0m [96m  ~~~~~~~~~~~~~~~~~~[0m
        An argument for 'saturation' was not provided.

FAIL src/color/test/darken.test.ts
  ‚óè Test suite failed to run

    [96msrc/color/parseToRgb.ts[0m:[93m64[0m:[93m28[0m - [91merror[0m[90m TS2554: [0mExpected 3-4 arguments, but got 1.

    [7m64[0m     const rgbColorString = hslToRgb(hslMatched)
    [7m  [0m [91m                           ~~~~~~~~~~~~~~~~~~~~[0m

      [96msrc/internalHelpers/_hslToRgb.ts[0m:[93m13[0m:[93m3[0m
        [7m13[0m   saturation: number,
        [7m  [0m [96m  ~~~~~~~~~~~~~~~~~~[0m
        An argument for 'saturation' was not provided.
    [96msrc/color/parseToRgb.ts[0m:[93m74[0m:[93m28[0m - [91merror[0m[90m TS2554: [0mExpected 3-4 arguments, but got 1.

    [7m74[0m     const rgbColorString = hslToRgb(hslaMatched)
    [7m  [0m [91m                           ~~~~~~~~~~~~~~~~~~~~~[0m

      [96msrc/internalHelpers/_hslToRgb.ts[0m:[93m13[0m:[93m3[0m
        [7m13[0m   saturation: number,
        [7m  [0m [96m  ~~~~~~~~~~~~~~~~~~[0m
        An argument for 'saturation' was not provided.

FAIL src/color/test/grayscale.test.ts
  ‚óè Test suite failed to run

    [96msrc/color/parseToRgb.ts[0m:[93m64[0m:[93m28[0m - [91merror[0m[90m TS2554: [0mExpected 3-4 arguments, but got 1.

    [7m64[0m     const rgbColorString = hslToRgb(hslMatched)
    [7m  [0m [91m                           ~~~~~~~~~~~~~~~~~~~~[0m

      [96msrc/internalHelpers/_hslToRgb.ts[0m:[93m13[0m:[93m3[0m
        [7m13[0m   saturation: number,
        [7m  [0m [96m  ~~~~~~~~~~~~~~~~~~[0m
        An argument for 'saturation' was not provided.
    [96msrc/color/parseToRgb.ts[0m:[93m74[0m:[93m28[0m - [91merror[0m[90m TS2554: [0mExpected 3-4 arguments, but got 1.

    [7m74[0m     const rgbColorString = hslToRgb(hslaMatched)
    [7m  [0m [91m                           ~~~~~~~~~~~~~~~~~~~~~[0m

      [96msrc/internalHelpers/_hslToRgb.ts[0m:[93m13[0m:[93m3[0m
        [7m13[0m   saturation: number,
        [7m  [0m [96m  ~~~~~~~~~~~~~~~~~~[0m
        An argument for 'saturation' was not provided.

FAIL src/color/test/getLuminance.test.ts
  ‚óè Test suite failed to run

    [96msrc/color/getLuminance.ts[0m:[93m31[0m:[93m9[0m - [91merror[0m[90m TS2322: [0mType 'RgbColor | RgbaColor' is not assignable to type 'Record<string, number>'.
      Type 'RgbColor' is not assignable to type 'Record<string, number>'.
        Index signature for type 'string' is missing in type 'RgbColor'.

    [7m31[0m   const rgbColor: Record<string, number> = parseToRgb(color)
    [7m  [0m [91m        ~~~~~~~~[0m

FAIL src/color/test/complement.test.ts
  ‚óè Test suite failed to run

    [96msrc/color/parseToRgb.ts[0m:[93m64[0m:[93m28[0m - [91merror[0m[90m TS2554: [0mExpected 3-4 arguments, but got 1.

    [7m64[0m     const rgbColorString = hslToRgb(hslMatched)
    [7m  [0m [91m                           ~~~~~~~~~~~~~~~~~~~~[0m

      [96msrc/internalHelpers/_hslToRgb.ts[0m:[93m13[0m:[93m3[0m
        [7m13[0m   saturation: number,
        [7m  [0m [96m  ~~~~~~~~~~~~~~~~~~[0m
        An argument for 'saturation' was not provided.
    [96msrc/color/parseToRgb.ts[0m:[93m74[0m:[93m28[0m - [91merror[0m[90m TS2554: [0mExpected 3-4 arguments, but got 1.

    [7m74[0m     const rgbColorString = hslToRgb(hslaMatched)
    [7m  [0m [91m                           ~~~~~~~~~~~~~~~~~~~~~[0m

      [96msrc/internalHelpers/_hslToRgb.ts[0m:[93m13[0m:[93m3[0m
        [7m13[0m   saturation: number,
        [7m  [0m [96m  ~~~~~~~~~~~~~~~~~~[0m
        An argument for 'saturation' was not provided.

FAIL src/color/test/hslToColorString.test.ts
  ‚óè Test suite failed to run

    [96msrc/color/test/hslToColorString.test.ts[0m:[93m40[0m:[93m37[0m - [91merror[0m[90m TS2345: [0mArgument of type '{ red: number; green: number; hue: number; }' is not assignable to parameter of type 'number | HslColor | HslaColor'.
      Object literal may only specify known properties, and 'red' does not exist in type 'HslColor | HslaColor'.

    [7m40[0m     expect(() => hslToColorString({ red: 255, green: 1, hue: 240 })).toThrow(
    [7m  [0m [91m                                    ~~~~~~~~[0m

FAIL src/color/test/desaturate.test.ts
  ‚óè Test suite failed to run

    [96msrc/color/parseToRgb.ts[0m:[93m64[0m:[93m28[0m - [91merror[0m[90m TS2554: [0mExpected 3-4 arguments, but got 1.

    [7m64[0m     const rgbColorString = hslToRgb(hslMatched)
    [7m  [0m [91m                           ~~~~~~~~~~~~~~~~~~~~[0m

      [96msrc/internalHelpers/_hslToRgb.ts[0m:[93m13[0m:[93m3[0m
        [7m13[0m   saturation: number,
        [7m  [0m [96m  ~~~~~~~~~~~~~~~~~~[0m
        An argument for 'saturation' was not provided.
    [96msrc/color/parseToRgb.ts[0m:[93m74[0m:[93m28[0m - [91merror[0m[90m TS2554: [0mExpected 3-4 arguments, but got 1.

    [7m74[0m     const rgbColorString = hslToRgb(hslaMatched)
    [7m  [0m [91m                           ~~~~~~~~~~~~~~~~~~~~~[0m

      [96msrc/internalHelpers/_hslToRgb.ts[0m:[93m13[0m:[93m3[0m
        [7m13[0m   saturation: number,
        [7m  [0m [96m  ~~~~~~~~~~~~~~~~~~[0m
        An argument for 'saturation' was not provided.

FAIL src/color/test/adjustHue.test.ts
  ‚óè Test suite failed to run

    [96msrc/color/parseToRgb.ts[0m:[93m64[0m:[93m28[0m - [91merror[0m[90m TS2554: [0mExpected 3-4 arguments, but got 1.

    [7m64[0m     const rgbColorString = hslToRgb(hslMatched)
    [7m  [0m [91m                           ~~~~~~~~~~~~~~~~~~~~[0m

      [96msrc/internalHelpers/_hslToRgb.ts[0m:[93m13[0m:[93m3[0m
        [7m13[0m   saturation: number,
        [7m  [0m [96m  ~~~~~~~~~~~~~~~~~~[0m
        An argument for 'saturation' was not provided.
    [96msrc/color/parseToRgb.ts[0m:[93m74[0m:[93m28[0m - [91merror[0m[90m TS2554: [0mExpected 3-4 arguments, but got 1.

    [7m74[0m     const rgbColorString = hslToRgb(hslaMatched)
    [7m  [0m [91m                           ~~~~~~~~~~~~~~~~~~~~~[0m

      [96msrc/internalHelpers/_hslToRgb.ts[0m:[93m13[0m:[93m3[0m
        [7m13[0m   saturation: number,
        [7m  [0m [96m  ~~~~~~~~~~~~~~~~~~[0m
        An argument for 'saturation' was not provided.

-----------------------------|---------|----------|---------|---------|-------------------
File                         | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s 
-----------------------------|---------|----------|---------|---------|-------------------
All files                    |   97.68 |    84.15 |   98.41 |    97.6 |                   
 color                       |     100 |      100 |     100 |     100 |                   
  hsl.ts                     |     100 |      100 |     100 |     100 |                   
  hsla.ts                    |     100 |      100 |     100 |     100 |                   
  rgb.ts                     |     100 |      100 |     100 |     100 |                   
 easings                     |     100 |      100 |     100 |     100 |                   
  easeIn.ts                  |     100 |      100 |     100 |     100 |                   
  easeInOut.ts               |     100 |      100 |     100 |     100 |                   
  easeOut.ts                 |     100 |      100 |     100 |     100 |                   
 helpers                     |     100 |    96.55 |     100 |     100 |                   
  cssVar.ts                  |     100 |    93.33 |     100 |     100 | 37                
  directionalProperty.ts     |     100 |      100 |     100 |     100 |                   
  em.ts                      |     100 |      100 |     100 |     100 |                   
  getValueAndUnit.ts         |     100 |      100 |     100 |     100 |                   
  rem.ts                     |     100 |      100 |     100 |     100 |                   
  stripUnit.ts               |     100 |      100 |     100 |     100 |                   
 internalHelpers             |   97.22 |    83.82 |     100 |   97.08 |                   
  _capitalizeString.ts       |     100 |      100 |     100 |     100 |                   
  _constructGradientValue.ts |     100 |      100 |     100 |     100 |                   
  _endsWith.ts               |     100 |      100 |     100 |     100 |                   
  _errors.ts                 |     100 |      100 |     100 |     100 |                   
  _guard.ts                  |     100 |      100 |     100 |     100 |                   
  _hslToHex.ts               |     100 |      100 |     100 |     100 |                   
  _hslToRgb.ts               |     100 |      100 |     100 |     100 |                   
  _nameToHex.ts              |   66.66 |       10 |     100 |   66.66 | 159-164           
  _numberToHex.ts            |     100 |      100 |     100 |     100 |                   
  _pxto.ts                   |     100 |      100 |     100 |     100 |                   
  _reduceHexValue.ts         |     100 |      100 |     100 |     100 |                   
  _rgbToHsl.ts               |     100 |    83.33 |     100 |     100 | 19-24             
  _statefulSelectors.ts      |     100 |      100 |     100 |     100 |                   
 mixins                      |     100 |      100 |     100 |     100 |                   
  hideText.ts                |     100 |      100 |     100 |     100 |                   
  hideVisually.ts            |     100 |      100 |     100 |     100 |                   
  normalize.ts               |     100 |      100 |     100 |     100 |                   
  timingFunctions.ts         |     100 |      100 |     100 |     100 |                   
 shorthands                  |   94.54 |       66 |   94.11 |   94.54 |                   
  animation.ts               |     100 |      100 |     100 |     100 |                   
  backgroundImages.ts        |     100 |      100 |     100 |     100 |                   
  backgrounds.ts             |     100 |      100 |     100 |     100 |                   
  border.ts                  |     100 |      100 |     100 |     100 |                   
  borderColor.ts             |     100 |      100 |     100 |     100 |                   
  borderRadius.ts            |    90.9 |    88.88 |     100 |    90.9 | 30                
  borderStyle.ts             |     100 |      100 |     100 |     100 |                   
  borderWidth.ts             |     100 |      100 |     100 |     100 |                   
  buttons.ts                 |      60 |        0 |      50 |      60 | 6-7               
  margin.ts                  |     100 |      100 |     100 |     100 |                   
  size.ts                    |     100 |      100 |     100 |     100 |                   
-----------------------------|---------|----------|---------|---------|-------------------
Summary of all failing tests
FAIL src/internalHelpers/test/_hslToRgb.test.ts
  ‚óè hslToRgb ‚Ä∫ should convert black

    expect(received).toEqual(expected) // deep equality

    Expected: "102,102,102"
    Received: "26010,26010,26010"

      31 |
      32 |   it('should convert black', () => {
    > 33 |     expect(hslToRgb(360, 0, 0.4)).toEqual('102,102,102')
         |                                   ^
      34 |   })
      35 |
      36 |   it('should convert correctly even when passed a "faulty" negative hue', () => {

      at Object.<anonymous> (src/internalHelpers/test/_hslToRgb.test.ts:33:35)

  ‚óè hslToRgb ‚Ä∫ should convert correctly even when passed a "faulty" negative hue

    expect(received).toEqual(expected) // deep equality

    Expected: "255,0,43"
    Received: "255,-43,0"

      35 |
      36 |   it('should convert correctly even when passed a "faulty" negative hue', () => {
    > 37 |     expect(hslToRgb(-10, 1, 0.5)).toEqual('255,0,43')
         |                                   ^
      38 |     expect(hslToRgb(-100, 1, 0.5)).toEqual('85,0,255')
      39 |     expect(hslToRgb(-1000, 1, 0.5)).toEqual('170,255,0')
      40 |   })

      at Object.<anonymous> (src/internalHelpers/test/_hslToRgb.test.ts:37:35)

FAIL src/internalHelpers/test/_hslToHex.test.ts
  ‚óè hslToHex ‚Ä∫ should convert numbers to a hex color

    expect(received).toEqual(expected) // deep equality

    Expected: "#b31919"
    Received: "#b1ce19661966"

      3 | describe('hslToHex', () => {
      4 |   it('should convert numbers to a hex color', () => {
    > 5 |     expect(hslToHex(360, 0.75, 0.4)).toEqual('#b31919')
        |                                      ^
      6 |   })
      7 |
      8 |   it('should convert the color red', () => {

      at Object.<anonymous> (src/internalHelpers/test/_hslToHex.test.ts:5:38)

  ‚óè hslToHex ‚Ä∫ should convert the color red

    expect(received).toEqual(expected) // deep equality

    Expected: "#ff0000"
    Received: "#fe010000"

       7 |
       8 |   it('should convert the color red', () => {
    >  9 |     expect(hslToHex(0, 1, 0.5)).toEqual('#ff0000')
         |                                 ^
      10 |   })
      11 |
      12 |   it('should convert the color yellow', () => {

      at Object.<anonymous> (src/internalHelpers/test/_hslToHex.test.ts:9:33)

  ‚óè hslToHex ‚Ä∫ should convert the color yellow

    expect(received).toEqual(expected) // deep equality

    Expected: "#ffff00"
    Received: "#fe01fe0100"

      11 |
      12 |   it('should convert the color yellow', () => {
    > 13 |     expect(hslToHex(60, 1, 0.5)).toEqual('#ffff00')
         |                                  ^
      14 |   })
      15 |
      16 |   it('should convert the color lime', () => {

      at Object.<anonymous> (src/internalHelpers/test/_hslToHex.test.ts:13:34)

  ‚óè hslToHex ‚Ä∫ should convert the color lime

    expect(received).toEqual(expected) // deep equality

    Expected: "#00ff00"
    Received: "#00fe0100"

      15 |
      16 |   it('should convert the color lime', () => {
    > 17 |     expect(hslToHex(120, 1, 0.5)).toEqual('#00ff00')
         |                                   ^
      18 |   })
      19 |
      20 |   it('should convert the color cyan', () => {

      at Object.<anonymous> (src/internalHelpers/test/_hslToHex.test.ts:17:35)

  ‚óè hslToHex ‚Ä∫ should convert the color cyan

    expect(received).toEqual(expected) // deep equality

    Expected: "#00ffff"
    Received: "#00fe01fe01"

      19 |
      20 |   it('should convert the color cyan', () => {
    > 21 |     expect(hslToHex(180, 1, 0.5)).toEqual('#00ffff')
         |                                   ^
      22 |   })
      23 |
      24 |   it('should convert the color blue', () => {

      at Object.<anonymous> (src/internalHelpers/test/_hslToHex.test.ts:21:35)

  ‚óè hslToHex ‚Ä∫ should convert the color blue

    expect(received).toEqual(expected) // deep equality

    Expected: "#0000ff"
    Received: "#0000fe01"

      23 |
      24 |   it('should convert the color blue', () => {
    > 25 |     expect(hslToHex(240, 1, 0.5)).toEqual('#0000ff')
         |                                   ^
      26 |   })
      27 |
      28 |   it('should convert the color magenta', () => {

      at Object.<anonymous> (src/internalHelpers/test/_hslToHex.test.ts:25:35)

  ‚óè hslToHex ‚Ä∫ should convert the color magenta

    expect(received).toEqual(expected) // deep equality

    Expected: "#ff00ff"
    Received: "#fe0100fe01"

      27 |
      28 |   it('should convert the color magenta', () => {
    > 29 |     expect(hslToHex(300, 1, 0.5)).toEqual('#ff00ff')
         |                                   ^
      30 |   })
      31 |
      32 |   it('should convert black', () => {

      at Object.<anonymous> (src/internalHelpers/test/_hslToHex.test.ts:29:35)

  ‚óè hslToHex ‚Ä∫ should convert black

    expect(received).toEqual(expected) // deep equality

    Expected: "#666666"
    Received: "#653466653466653466"

      31 |
      32 |   it('should convert black', () => {
    > 33 |     expect(hslToHex(360, 0, 0.4)).toEqual('#666666')
         |                                   ^
      34 |   })
      35 | })
      36 |

      at Object.<anonymous> (src/internalHelpers/test/_hslToHex.test.ts:33:35)

FAIL src/internalHelpers/test/_constructGradientValue.test.ts
  ‚óè constructGradientValue ‚Ä∫ constructs a gradient value

    expect(received).toEqual(expected) // deep equality

    Expected: "literal1substitution1 literal2, substitution2"
    Received: "literal1substitution1 literal, substitution2"

       5 |     const literals = ['literal1', 'literal2']
       6 |     const substitutions = ['substitution1', 'substitution2']
    >  7 |     expect(constructGradientValue(literals, ...substitutions)).toEqual(
         |                                                                ^
       8 |       'literal1substitution1 literal2, substitution2',
       9 |     )
      10 |   })

      at Object.<anonymous> (src/internalHelpers/test/_constructGradientValue.test.ts:7:64)

FAIL src/internalHelpers/test/_rgbToHsl.test.ts
  ‚óè rgbToHsl ‚Ä∫ should convert gray to HSL

    expect(received).toEqual(expected) // deep equality

    - Expected  - 1
    + Received  + 1

      Object {
        "hue": 0,
    -   "lightness": 0.5,
    +   "lightness": 0.5019607843137255,
        "saturation": 0,
      }

      64 |
      65 |   it('should convert gray to HSL', () => {
    > 66 |     expect(rgbToHsl({ red: 128, green: 128, blue: 128 })).toEqual({
         |                                                           ^
      67 |       hue: 0,
      68 |       saturation: 0,
      69 |       lightness: 0.5,

      at Object.<anonymous> (src/internalHelpers/test/_rgbToHsl.test.ts:66:59)

  ‚óè rgbToHsl ‚Ä∫ should convert a custom color to HSL

    expect(received).toEqual(expected) // deep equality

    - Expected  - 1
    + Received  + 1

      Object {
        "hue": 300,
    -   "lightness": 0.25,
    +   "lightness": 0.25098039215686274,
        "saturation": 1,
      }

      72 |
      73 |   it('should convert a custom color to HSL', () => {
    > 74 |     expect(rgbToHsl({ red: 128, green: 0, blue: 128 })).toEqual({
         |                                                         ^
      75 |       hue: 300,
      76 |       saturation: 1,
      77 |       lightness: 0.25,

      at Object.<anonymous> (src/internalHelpers/test/_rgbToHsl.test.ts:74:57)

FAIL src/internalHelpers/test/_statefulSelectors.test.ts
  ‚óè statefulSelectors ‚Ä∫ populates both base selectors and selectors for a single state when not passed a stateMap

    PolishedError 68

      22 |   if (!template) throw new PolishedError(67)
      23 |   const invalidStates = states.filter(state => !stateMap?.includes(state))
    > 24 |   if (invalidStates.length) throw new PolishedError(68)
         |                                   ^
      25 |   return states.map(state => generateSelectors(template, state)).join(',')
      26 | }
      27 |

      at statefulSelectors (src/internalHelpers/_statefulSelectors.ts:24:35)
      at Object.<anonymous> (src/internalHelpers/test/_statefulSelectors.test.ts:31:29)

  ‚óè statefulSelectors ‚Ä∫ throws an error when passed an unsupported selector state

    expect(received).toThrow(expected)

    Expected substring: "You passed an unsupported selector state to this method"
    Received message:   "PolishedError 68"

          22 |   if (!template) throw new PolishedError(67)
          23 |   const invalidStates = states.filter(state => !stateMap?.includes(state))
        > 24 |   if (invalidStates.length) throw new PolishedError(68)
             |                                   ^
          25 |   return states.map(state => generateSelectors(template, state)).join(',')
          26 | }
          27 |

      at statefulSelectors (src/internalHelpers/_statefulSelectors.ts:24:35)
      at src/internalHelpers/test/_statefulSelectors.test.ts:38:24
      at Object.<anonymous> (node_modules/.pnpm/expect@29.5.0/node_modules/expect/build/toThrowMatchers.js:74:11)
      at Object.throwingMatcher [as toThrow] (node_modules/.pnpm/expect@29.5.0/node_modules/expect/build/index.js:312:21)
      at Object.<anonymous> (src/internalHelpers/test/_statefulSelectors.test.ts:39:8)
      at Object.<anonymous> (src/internalHelpers/test/_statefulSelectors.test.ts:39:8)

  ‚óè statefulSelectors ‚Ä∫ throws an error when passed an unsupported selector state in a list

    expect(received).toThrow(expected)

    Expected substring: "You passed an unsupported selector state to this method"
    Received message:   "PolishedError 68"

          22 |   if (!template) throw new PolishedError(67)
          23 |   const invalidStates = states.filter(state => !stateMap?.includes(state))
        > 24 |   if (invalidStates.length) throw new PolishedError(68)
             |                                   ^
          25 |   return states.map(state => generateSelectors(template, state)).join(',')
          26 | }
          27 |

      at statefulSelectors (src/internalHelpers/_statefulSelectors.ts:24:35)
      at src/internalHelpers/test/_statefulSelectors.test.ts:44:24
      at Object.<anonymous> (node_modules/.pnpm/expect@29.5.0/node_modules/expect/build/toThrowMatchers.js:74:11)
      at Object.throwingMatcher [as toThrow] (node_modules/.pnpm/expect@29.5.0/node_modules/expect/build/index.js:312:21)
      at Object.<anonymous> (src/internalHelpers/test/_statefulSelectors.test.ts:45:8)
      at Object.<anonymous> (src/internalHelpers/test/_statefulSelectors.test.ts:45:8)

  ‚óè statefulSelectors ‚Ä∫ throws an error when not passed a template

    expect(received).toThrow(expected)

    Expected substring: "You must provide a template to this method."
    Received message:   "PolishedError 67"

          20 |   stateMap?: InteractionState[],
          21 | ): string {
        > 22 |   if (!template) throw new PolishedError(67)
             |                        ^
          23 |   const invalidStates = states.filter(state => !stateMap?.includes(state))
          24 |   if (invalidStates.length) throw new PolishedError(68)
          25 |   return states.map(state => generateSelectors(template, state)).join(',')

      at statefulSelectors (src/internalHelpers/_statefulSelectors.ts:22:24)
      at src/internalHelpers/test/_statefulSelectors.test.ts:51:24
      at Object.<anonymous> (node_modules/.pnpm/expect@29.5.0/node_modules/expect/build/toThrowMatchers.js:74:11)
      at Object.throwingMatcher [as toThrow] (node_modules/.pnpm/expect@29.5.0/node_modules/expect/build/index.js:312:21)
      at Object.<anonymous> (src/internalHelpers/test/_statefulSelectors.test.ts:52:8)
      at Object.<anonymous> (src/internalHelpers/test/_statefulSelectors.test.ts:52:8)

FAIL src/internalHelpers/test/_nameToHex.test.ts
  ‚óè memoizedNameToHex ‚Ä∫ should convert a named color to a hex value

    expect(received).toEqual(expected) // deep equality

    Expected: "#fff"
    Received: "white"

      3 | describe('memoizedNameToHex', () => {
      4 |   it('should convert a named color to a hex value', () => {
    > 5 |     expect(memoizedNameToHex('white')).toEqual('#fff')
        |                                        ^
      6 |   })
      7 |
      8 |   it('should convert a camel-cased named color to a hex value', () => {

      at Object.<anonymous> (src/internalHelpers/test/_nameToHex.test.ts:5:40)

  ‚óè memoizedNameToHex ‚Ä∫ should convert a camel-cased named color to a hex value

    expect(received).toEqual(expected) // deep equality

    Expected: "#b0e0e6"
    Received: "PowderBlue"

       7 |
       8 |   it('should convert a camel-cased named color to a hex value', () => {
    >  9 |     expect(memoizedNameToHex('PowderBlue')).toEqual('#b0e0e6')
         |                                             ^
      10 |   })
      11 |
      12 |   it('should return a passed hex value without mutation', () => {

      at Object.<anonymous> (src/internalHelpers/test/_nameToHex.test.ts:9:45)

FAIL src/internalHelpers/test/_reduceHexValue.test.ts
  ‚óè reduceHexValue ‚Ä∫ should reduce #ffffff to #fff even with uppercase letters

    expect(received).toEqual(expected) // deep equality

    Expected: "#fff"
    Received: "#FFF"

      39 |
      40 |   it('should reduce #ffffff to #fff even with uppercase letters', () => {
    > 41 |     expect(reduceHexValue('#FFFFFF')).toEqual('#fff')
         |                                       ^
      42 |   })
      43 | })
      44 |

      at Object.<anonymous> (src/internalHelpers/test/_reduceHexValue.test.ts:41:39)

FAIL src/helpers/test/stripUnit.test.ts
  ‚óè stripUnit ‚Ä∫ should strip % from 1

    expect(received).toEqual(expected) // deep equality

    Expected: 1
    Received: "1%"

      25 |     for (const value of values) {
      26 |       it(`should strip ${unit} from ${value}`, () => {
    > 27 |         expect(stripUnit(`${value}${unit}`)).toEqual(value)
         |                                              ^
      28 |       })
      29 |     }
      30 |   }

      at Object.<anonymous> (src/helpers/test/stripUnit.test.ts:27:46)

  ‚óè stripUnit ‚Ä∫ should strip % from 1.5

    expect(received).toEqual(expected) // deep equality

    Expected: 1.5
    Received: "1.5%"

      25 |     for (const value of values) {
      26 |       it(`should strip ${unit} from ${value}`, () => {
    > 27 |         expect(stripUnit(`${value}${unit}`)).toEqual(value)
         |                                              ^
      28 |       })
      29 |     }
      30 |   }

      at Object.<anonymous> (src/helpers/test/stripUnit.test.ts:27:46)

  ‚óè stripUnit ‚Ä∫ should strip % from 100

    expect(received).toEqual(expected) // deep equality

    Expected: 100
    Received: "100%"

      25 |     for (const value of values) {
      26 |       it(`should strip ${unit} from ${value}`, () => {
    > 27 |         expect(stripUnit(`${value}${unit}`)).toEqual(value)
         |                                              ^
      28 |       })
      29 |     }
      30 |   }

      at Object.<anonymous> (src/helpers/test/stripUnit.test.ts:27:46)

  ‚óè stripUnit ‚Ä∫ should strip % from 33.33

    expect(received).toEqual(expected) // deep equality

    Expected: 33.33
    Received: "33.33%"

      25 |     for (const value of values) {
      26 |       it(`should strip ${unit} from ${value}`, () => {
    > 27 |         expect(stripUnit(`${value}${unit}`)).toEqual(value)
         |                                              ^
      28 |       })
      29 |     }
      30 |   }

      at Object.<anonymous> (src/helpers/test/stripUnit.test.ts:27:46)

  ‚óè stripUnit ‚Ä∫ should strip % from 80

    expect(received).toEqual(expected) // deep equality

    Expected: 80
    Received: "80%"

      25 |     for (const value of values) {
      26 |       it(`should strip ${unit} from ${value}`, () => {
    > 27 |         expect(stripUnit(`${value}${unit}`)).toEqual(value)
         |                                              ^
      28 |       })
      29 |     }
      30 |   }

      at Object.<anonymous> (src/helpers/test/stripUnit.test.ts:27:46)

  ‚óè stripUnit ‚Ä∫ should strip % from 33.3

    expect(received).toEqual(expected) // deep equality

    Expected: 33.3
    Received: "33.3%"

      25 |     for (const value of values) {
      26 |       it(`should strip ${unit} from ${value}`, () => {
    > 27 |         expect(stripUnit(`${value}${unit}`)).toEqual(value)
         |                                              ^
      28 |       })
      29 |     }
      30 |   }

      at Object.<anonymous> (src/helpers/test/stripUnit.test.ts:27:46)

FAIL src/color/test/hsla.test.ts
  ‚óè hsla ‚Ä∫ should convert numbers to a hex color

    expect(received).toEqual(expected) // deep equality

    - Expected  - 1
    + Received  + 1

      Object {
    -   "background": "#b31919",
    +   "background": "#b1ce19661966",
      }

      10 |
      11 |   it('should convert numbers to a hex color', () => {
    > 12 |     expect({ background: hsla(360, 0.75, 0.4, 1) }).toEqual({
         |                                                     ^
      13 |       background: '#b31919',
      14 |     })
      15 |   })

      at Object.<anonymous> (src/color/test/hsla.test.ts:12:53)

  ‚óè hsla ‚Ä∫ should convert a hlsa object to a hex color

    expect(received).toEqual(expected) // deep equality

    - Expected  - 1
    + Received  + 1

      Object {
    -   "background": "#b31919",
    +   "background": "#b1ce19661966",
      }

      36 |         alpha: 1,
      37 |       }),
    > 38 |     }).toEqual({
         |        ^
      39 |       background: '#b31919',
      40 |     })
      41 |   })

      at Object.<anonymous> (src/color/test/hsla.test.ts:38:8)

  ‚óè hsla ‚Ä∫ should convert to a reduce hex value if possible

    expect(received).toEqual(expected) // deep equality

    - Expected  - 1
    + Received  + 1

      Object {
    -   "background": "#c00",
    +   "background": "#cb340000",
      }

      42 |
      43 |   it('should convert to a reduce hex value if possible', () => {
    > 44 |     expect({ background: hsla(360, 1, 0.4, 1) }).toEqual({
         |                                                  ^
      45 |       background: '#c00',
      46 |     })
      47 |   })

      at Object.<anonymous> (src/color/test/hsla.test.ts:44:50)

FAIL src/helpers/test/cssVar.test.ts
  ‚óè cssVar ‚Ä∫ errors when variable is not found and no default is provided

    expect(received).toThrow(expected)

    Expected substring: "CSS variable not found and no default was provided."
    Received message:   "All values in a formula must have the same unit or be unitless."

          44 |   }
          45 |
        > 46 |   throw new PolishedError(74)
             |         ^
          47 | }
          48 |

      at cssVar (src/helpers/cssVar.ts:46:9)
      at src/helpers/test/cssVar.test.ts:38:13
      at Object.<anonymous> (node_modules/.pnpm/expect@29.5.0/node_modules/expect/build/toThrowMatchers.js:74:11)
      at Object.throwingMatcher [as toThrow] (node_modules/.pnpm/expect@29.5.0/node_modules/expect/build/index.js:312:21)
      at Object.<anonymous> (src/helpers/test/cssVar.test.ts:39:8)
      at Object.<anonymous> (src/helpers/test/cssVar.test.ts:39:8)

  ‚óè cssVar ‚Ä∫ errors when variable is not formatted correctly

    expect(received).toThrow(expected)

    Expected substring: "Please provide a valid CSS variable."
    Received message:   "Formula has too many closing parentheses at %s."

          28 | ): string | number {
          29 |   if (!cssVariable || !cssVariable.match(cssVariableRegex)) {
        > 30 |     throw new PolishedError(73)
             |           ^
          31 |   }
          32 |
          33 |   let variableValue: string | null = null

      at cssVar (src/helpers/cssVar.ts:30:11)
      at src/helpers/test/cssVar.test.ts:44:13
      at Object.<anonymous> (node_modules/.pnpm/expect@29.5.0/node_modules/expect/build/toThrowMatchers.js:74:11)
      at Object.throwingMatcher [as toThrow] (node_modules/.pnpm/expect@29.5.0/node_modules/expect/build/index.js:312:21)
      at Object.<anonymous> (src/helpers/test/cssVar.test.ts:45:8)
      at Object.<anonymous> (src/helpers/test/cssVar.test.ts:45:8)

FAIL src/internalHelpers/test/_pxto.test.ts
  ‚óè pxto ‚Ä∫ converter ‚Ä∫ should throw an error if a non-pixel value is passed for the first arg

    expect(received).toThrow(expected)

    Expected substring: "Expected a string ending in \"px\" or a number passed as the first argument to em(), got 10em instead."
    Received message:   "Formula contains a function that needs parentheses at 10em."

          14 |
          15 |     if (typeof newPxval !== 'number') {
        > 16 |       throw new PolishedError(71, pxval, to)
             |             ^
          17 |     }
          18 |
          19 |     if (typeof newBase !== 'number') {

      at src/internalHelpers/_pxto.ts:16:13
      at src/internalHelpers/test/_pxto.test.ts:50:31
      at Object.<anonymous> (node_modules/.pnpm/expect@29.5.0/node_modules/expect/build/toThrowMatchers.js:74:11)
      at Object.throwingMatcher [as toThrow] (node_modules/.pnpm/expect@29.5.0/node_modules/expect/build/index.js:312:21)
      at Object.<anonymous> (src/internalHelpers/test/_pxto.test.ts:50:46)
      at Object.<anonymous> (src/internalHelpers/test/_pxto.test.ts:50:46)

  ‚óè pxto ‚Ä∫ converter ‚Ä∫ should throw an error if a non-pixel value is passed for the second arg

    expect(received).toThrow(expected)

    Expected substring: "Expected a string ending in \"px\" or a number passed as the second argument to em(), got 16em instead."
    Received message:   "Formula is missing closing parenthesis at 16em."

          18 |
          19 |     if (typeof newBase !== 'number') {
        > 20 |       throw new PolishedError(72, base, to)
             |             ^
          21 |     }
          22 |
          23 |     return `${newPxval / newBase}${to}`

      at src/internalHelpers/_pxto.ts:20:13
      at src/internalHelpers/test/_pxto.test.ts:56:31
      at Object.<anonymous> (node_modules/.pnpm/expect@29.5.0/node_modules/expect/build/toThrowMatchers.js:74:11)
      at Object.throwingMatcher [as toThrow] (node_modules/.pnpm/expect@29.5.0/node_modules/expect/build/index.js:312:21)
      at Object.<anonymous> (src/internalHelpers/test/_pxto.test.ts:56:54)
      at Object.<anonymous> (src/internalHelpers/test/_pxto.test.ts:56:54)

  ‚óè pxto ‚Ä∫ converter ‚Ä∫ should throw an error if an invalid pixel value is passed

    expect(received).toThrow(expected)

    Expected substring: "Passed invalid pixel value apx to em(), please pass a value like \"12px\" or 12."
    Received message:   "Formula contains a function that needs parentheses at apx."

          14 |
          15 |     if (typeof newPxval !== 'number') {
        > 16 |       throw new PolishedError(71, pxval, to)
             |             ^
          17 |     }
          18 |
          19 |     if (typeof newBase !== 'number') {

      at src/internalHelpers/_pxto.ts:16:13
      at src/internalHelpers/test/_pxto.test.ts:62:31
      at Object.<anonymous> (node_modules/.pnpm/expect@29.5.0/node_modules/expect/build/toThrowMatchers.js:74:11)
      at Object.throwingMatcher [as toThrow] (node_modules/.pnpm/expect@29.5.0/node_modules/expect/build/index.js:312:21)
      at Object.<anonymous> (src/internalHelpers/test/_pxto.test.ts:62:45)
      at Object.<anonymous> (src/internalHelpers/test/_pxto.test.ts:62:45)

  ‚óè pxto ‚Ä∫ converter ‚Ä∫ should throw an error if an invalid base value is passed

    expect(received).toThrow(expected)

    Expected substring: "Passed invalid base value apx to em(), please pass a value like \"12px\" or 12."
    Received message:   "Formula is missing closing parenthesis at apx."

          18 |
          19 |     if (typeof newBase !== 'number') {
        > 20 |       throw new PolishedError(72, base, to)
             |             ^
          21 |     }
          22 |
          23 |     return `${newPxval / newBase}${to}`

      at src/internalHelpers/_pxto.ts:20:13
      at src/internalHelpers/test/_pxto.test.ts:68:31
      at Object.<anonymous> (node_modules/.pnpm/expect@29.5.0/node_modules/expect/build/toThrowMatchers.js:74:11)
      at Object.throwingMatcher [as toThrow] (node_modules/.pnpm/expect@29.5.0/node_modules/expect/build/index.js:312:21)
      at Object.<anonymous> (src/internalHelpers/test/_pxto.test.ts:68:53)
      at Object.<anonymous> (src/internalHelpers/test/_pxto.test.ts:68:53)

FAIL src/internalHelpers/test/_errors.test.ts
  ‚óè PolishedError ‚Ä∫ should throw an error with the correct message for code 1

    expect(received).toThrowError(expected)

    Expected substring: "Property must be a string value."
    Received message:   "Passed invalid arguments to hsl, please pass multiple numbers e.g. hsl(360, 0.75, 0.4) or an object e.g. rgb({ hue: 255, saturation: 0.4, lightness: 0.75 })."

          4 |   it('should throw an error with the correct message for code 1', () => {
          5 |     expect(() => {
        > 6 |       throw new PolishedError(1)
            |             ^
          7 |     }).toThrowError('Property must be a string value.')
          8 |   })
          9 |

      at src/internalHelpers/test/_errors.test.ts:6:13
      at Object.<anonymous> (node_modules/.pnpm/expect@29.5.0/node_modules/expect/build/toThrowMatchers.js:74:11)
      at Object.throwingMatcher [as toThrowError] (node_modules/.pnpm/expect@29.5.0/node_modules/expect/build/index.js:312:21)
      at Object.<anonymous> (src/internalHelpers/test/_errors.test.ts:7:8)
      at Object.<anonymous> (src/internalHelpers/test/_errors.test.ts:7:8)

  ‚óè PolishedError ‚Ä∫ should throw an error with the correct message for code 2

    expect(received).toThrowError(expected)

    Expected substring: "Property must be a string value. Property must be a string value."
    Received message:   "Passed invalid arguments to hsla, please pass multiple numbers e.g. hsla(360, 0.75, 0.4, 0.7) or an object e.g. rgb({ hue: 255, saturation: 0.4, lightness: 0.75, alpha: 0.7 })."

          10 |   it('should throw an error with the correct message for code 2', () => {
          11 |     expect(() => {
        > 12 |       throw new PolishedError(2)
             |             ^
          13 |     }).toThrowError('Property must be a string value. Property must be a string value.')
          14 |   })
          15 |

      at src/internalHelpers/test/_errors.test.ts:12:13
      at Object.<anonymous> (node_modules/.pnpm/expect@29.5.0/node_modules/expect/build/toThrowMatchers.js:74:11)
      at Object.throwingMatcher [as toThrowError] (node_modules/.pnpm/expect@29.5.0/node_modules/expect/build/index.js:312:21)
      at Object.<anonymous> (src/internalHelpers/test/_errors.test.ts:13:8)
      at Object.<anonymous> (src/internalHelpers/test/_errors.test.ts:13:8)

  ‚óè PolishedError ‚Ä∫ should throw an error with the correct message for code 3

    expect(received).toThrowError(expected)

    Expected substring: "Property must be a string value. Property must be a string value. Property must be a string value."
    Received message:   "Passed an incorrect argument to a color function, please pass a string representation of a color."

          16 |   it('should throw an error with the correct message for code 3', () => {
          17 |     expect(() => {
        > 18 |       throw new PolishedError(3)
             |             ^
          19 |     }).toThrowError(
          20 |       'Property must be a string value. Property must be a string value. Property must be a string value.',
          21 |     )

      at src/internalHelpers/test/_errors.test.ts:18:13
      at Object.<anonymous> (node_modules/.pnpm/expect@29.5.0/node_modules/expect/build/toThrowMatchers.js:74:11)
      at Object.throwingMatcher [as toThrowError] (node_modules/.pnpm/expect@29.5.0/node_modules/expect/build/index.js:312:21)
      at Object.<anonymous> (src/internalHelpers/test/_errors.test.ts:19:8)
      at Object.<anonymous> (src/internalHelpers/test/_errors.test.ts:19:8)

  ‚óè PolishedError ‚Ä∫ should not throw an error in production mode

    expect(received).not.toThrow()

    Error name:    "Error"
    Error message: "The animation shorthand arrays can only have 8 elements. See the specification for more information: http://mdn.io/animation"

           99 |
          100 |     expect(() => {
        > 101 |       throw new PolishedError(64)
              |             ^
          102 |     }).not.toThrow()
          103 |
          104 |     process.env.NODE_ENV = env

      at src/internalHelpers/test/_errors.test.ts:101:13
      at Object.<anonymous> (node_modules/.pnpm/expect@29.5.0/node_modules/expect/build/toThrowMatchers.js:74:11)
      at Object.throwingMatcher [as toThrow] (node_modules/.pnpm/expect@29.5.0/node_modules/expect/build/index.js:312:21)
      at Object.<anonymous> (src/internalHelpers/test/_errors.test.ts:102:12)
      at Object.<anonymous> (src/internalHelpers/test/_errors.test.ts:102:12)

FAIL src/shorthands/test/buttons.test.ts
  ‚óè buttons ‚Ä∫ populates base button selectors

    expect(received).toEqual(expected) // deep equality

    - Expected  - 4
    + Received  + 1

      Object {
    -   "button,
    -   input[type=\"button\"],
    -   input[type=\"reset\"],
    -   input[type=\"submit\"]": Object {
    +   "": Object {
          "border-color": "black",
        },
      }

      3 | describe('buttons', () => {
      4 |   it('populates base button selectors', () => {
    > 5 |     expect({ [buttons()]: { 'border-color': 'black' } }).toEqual({
        |                                                          ^
      6 |       [`button,
      7 |   input[type="button"],
      8 |   input[type="reset"],

      at Object.<anonymous> (src/shorthands/test/buttons.test.ts:5:58)

  ‚óè buttons ‚Ä∫ populates buttons selectors for a single state

    PolishedError 68

      22 |   if (!template) throw new PolishedError(67)
      23 |   const invalidStates = states.filter(state => !stateMap?.includes(state))
    > 24 |   if (invalidStates.length) throw new PolishedError(68)
         |                                   ^
      25 |   return states.map(state => generateSelectors(template, state)).join(',')
      26 | }
      27 |

      at statefulSelectors (src/internalHelpers/_statefulSelectors.ts:24:35)
      at buttons (src/shorthands/buttons.ts:40:27)
      at Object.<anonymous> (src/shorthands/test/buttons.test.ts:17:15)

  ‚óè buttons ‚Ä∫ populates both base selectors and selectors for a single state

    PolishedError 68

      22 |   if (!template) throw new PolishedError(67)
      23 |   const invalidStates = states.filter(state => !stateMap?.includes(state))
    > 24 |   if (invalidStates.length) throw new PolishedError(68)
         |                                   ^
      25 |   return states.map(state => generateSelectors(template, state)).join(',')
      26 | }
      27 |

      at statefulSelectors (src/internalHelpers/_statefulSelectors.ts:24:35)
      at buttons (src/shorthands/buttons.ts:40:27)
      at Object.<anonymous> (src/shorthands/test/buttons.test.ts:30:15)

  ‚óè buttons ‚Ä∫ populates button selectors for multiple states

    PolishedError 68

      22 |   if (!template) throw new PolishedError(67)
      23 |   const invalidStates = states.filter(state => !stateMap?.includes(state))
    > 24 |   if (invalidStates.length) throw new PolishedError(68)
         |                                   ^
      25 |   return states.map(state => generateSelectors(template, state)).join(',')
      26 | }
      27 |

      at statefulSelectors (src/internalHelpers/_statefulSelectors.ts:24:35)
      at buttons (src/shorthands/buttons.ts:40:27)
      at Object.<anonymous> (src/shorthands/test/buttons.test.ts:46:15)

  ‚óè buttons ‚Ä∫ throws an error when passed a state it does not recognize

    expect(received).toThrow(expected)

    Expected substring: "You passed an unsupported selector state to this method"
    Received message:   "PolishedError 68"

          22 |   if (!template) throw new PolishedError(67)
          23 |   const invalidStates = states.filter(state => !stateMap?.includes(state))
        > 24 |   if (invalidStates.length) throw new PolishedError(68)
             |                                   ^
          25 |   return states.map(state => generateSelectors(template, state)).join(',')
          26 | }
          27 |

      at statefulSelectors (src/internalHelpers/_statefulSelectors.ts:24:35)
      at buttons (src/shorthands/buttons.ts:40:27)
      at src/shorthands/test/buttons.test.ts:63:15
      at Object.<anonymous> (node_modules/.pnpm/expect@29.5.0/node_modules/expect/build/toThrowMatchers.js:74:11)
      at Object.throwingMatcher [as toThrow] (node_modules/.pnpm/expect@29.5.0/node_modules/expect/build/index.js:312:21)
      at Object.<anonymous> (src/shorthands/test/buttons.test.ts:64:9)
      at Object.<anonymous> (src/shorthands/test/buttons.test.ts:64:9)

FAIL src/shorthands/test/borderRadius.test.ts
  ‚óè borderRadius ‚Ä∫ should throw an error when an invalid radius value is provided

    expect(received).toThrow(expected)

    Expected substring: "borderRadius expects a radius value as a string or number as the second argument."

    Received function did not throw

      48 |       // @ts-expect-error
      49 |       borderRadius('top', {})
    > 50 |     }).toThrow('borderRadius expects a radius value as a string or number as the second argument.')
         |        ^
      51 |   })
      52 |
      53 |   it('should throw an error when an invalid side value is provided', () => {

      at Object.<anonymous> (src/shorthands/test/borderRadius.test.ts:50:8)

  ‚óè borderRadius ‚Ä∫ should throw an error when an invalid side value is provided

    expect(received).toThrow(expected)

    Expected substring: "borderRadius expects one of \"top\", \"bottom\", \"left\" or \"right\" as the first argument."
    Received message:   "To pass multiple animations please supply them in arrays, e.g. animation(['rotate', '2s'], ['move', '1s'])
    To pass a single animation please supply them in simple values, e.g. animation('rotate', '2s')."

          44 |   }
          45 |
        > 46 |   throw new PolishedError(63)
             |         ^
          47 | }
          48 |

      at borderRadius (src/shorthands/borderRadius.ts:46:9)
      at src/shorthands/test/borderRadius.test.ts:56:19
      at Object.<anonymous> (node_modules/.pnpm/expect@29.5.0/node_modules/expect/build/toThrowMatchers.js:74:11)
      at Object.throwingMatcher [as toThrow] (node_modules/.pnpm/expect@29.5.0/node_modules/expect/build/index.js:312:21)
      at Object.<anonymous> (src/shorthands/test/borderRadius.test.ts:57:8)
      at Object.<anonymous> (src/shorthands/test/borderRadius.test.ts:57:8)

  ‚óè borderRadius ‚Ä∫ throws an error when an invalid side value is provided

    expect(received).toThrow(expected)

    Expected substring: "borderRadius expects one of \"top\", \"bottom\", \"left\" or \"right\" as the first argument."
    Received message:   "To pass multiple animations please supply them in arrays, e.g. animation(['rotate', '2s'], ['move', '1s'])
    To pass a single animation please supply them in simple values, e.g. animation('rotate', '2s')."

          44 |   }
          45 |
        > 46 |   throw new PolishedError(63)
             |         ^
          47 | }
          48 |

      at borderRadius (src/shorthands/borderRadius.ts:46:9)
      at src/shorthands/test/borderRadius.test.ts:64:19
      at Object.<anonymous> (node_modules/.pnpm/expect@29.5.0/node_modules/expect/build/toThrowMatchers.js:74:11)
      at Object.throwingMatcher [as toThrow] (node_modules/.pnpm/expect@29.5.0/node_modules/expect/build/index.js:312:21)
      at Object.<anonymous> (src/shorthands/test/borderRadius.test.ts:65:8)
      at Object.<anonymous> (src/shorthands/test/borderRadius.test.ts:65:8)

FAIL src/color/test/hsl.test.ts
  ‚óè hsl ‚Ä∫ should convert numbers to a hex color

    expect(received).toEqual(expected) // deep equality

    - Expected  - 1
    + Received  + 1

      Object {
    -   "background": "#b31919",
    +   "background": "#b1ce19661966",
      }

      4 | describe('hsl', () => {
      5 |   it('should convert numbers to a hex color', () => {
    > 6 |     expect({ background: hsl(360, 0.75, 0.4) }).toEqual({
        |                                                 ^
      7 |       background: '#b31919',
      8 |     })
      9 |   })

      at Object.<anonymous> (src/color/test/hsl.test.ts:6:49)

  ‚óè hsl ‚Ä∫ should convert a hls object to a hex color

    expect(received).toEqual(expected) // deep equality

    - Expected  - 1
    + Received  + 1

      Object {
    -   "background": "#b31919",
    +   "background": "#b1ce19661966",
      }

      12 |     expect({
      13 |       background: hsl({ hue: 360, saturation: 0.75, lightness: 0.4 }),
    > 14 |     }).toEqual({
         |        ^
      15 |       background: '#b31919',
      16 |     })
      17 |   })

      at Object.<anonymous> (src/color/test/hsl.test.ts:14:8)

  ‚óè hsl ‚Ä∫ should convert to a reduce hex value if possible

    expect(received).toEqual(expected) // deep equality

    - Expected  - 1
    + Received  + 1

      Object {
    -   "background": "#c00",
    +   "background": "#cb340000",
      }

      18 |
      19 |   it('should convert to a reduce hex value if possible', () => {
    > 20 |     expect({ background: hsl(360, 1, 0.4) }).toEqual({
         |                                              ^
      21 |       background: '#c00',
      22 |     })
      23 |   })

      at Object.<anonymous> (src/color/test/hsl.test.ts:20:46)

FAIL src/shorthands/test/border.test.ts
  ‚óè border ‚Ä∫ properly returns separated border styles when passed a number for all properties and a non-side keyword

    expect(received).toEqual(expected) // deep equality

    - Expected  - 3
    + Received  + 3

      Object {
    -   "borderColor": 3,
    -   "borderStyle": 2,
    -   "borderWidth": 1,
    +   "borderColor": 2,
    +   "borderStyle": 1,
    +   "borderWidth": "foo",
      }

      115 |
      116 |   it('properly returns separated border styles when passed a number for all properties and a non-side keyword', () => {
    > 117 |     expect(border('foo', 1, 2, 3)).toEqual({
          |                                    ^
      118 |       borderColor: 3,
      119 |       borderStyle: 2,
      120 |       borderWidth: 1,

      at Object.<anonymous> (src/shorthands/test/border.test.ts:117:36)

  ‚óè border ‚Ä∫ properly returns separated border styles when passed a string for all properties and a non-side keyword

    expect(received).toEqual(expected) // deep equality

    - Expected  - 3
    + Received  + 3

      Object {
    -   "borderColor": "red",
    -   "borderStyle": "solid",
    -   "borderWidth": "1px",
    +   "borderColor": "solid",
    +   "borderStyle": "1px",
    +   "borderWidth": "foo",
      }

      123 |
      124 |   it('properly returns separated border styles when passed a string for all properties and a non-side keyword', () => {
    > 125 |     expect(border('foo', '1px', 'solid', 'red')).toEqual({
          |                                                  ^
      126 |       borderColor: 'red',
      127 |       borderStyle: 'solid',
      128 |       borderWidth: '1px',

      at Object.<anonymous> (src/shorthands/test/border.test.ts:125:50)

FAIL src/helpers/test/directionalProperty.test.ts
  ‚óè directionalProperty ‚Ä∫ properly generates properties when passed a hyphenated property

    expect(received).toEqual(expected) // deep equality

    - Expected  - 4
    + Received  + 4

      Object {
    -   "borderBottomWidth": "12px",
    -   "borderLeftWidth": "12px",
    -   "borderRightWidth": "12px",
    -   "borderTopWidth": "12px",
    +   "BorderBottomWidth": "12px",
    +   "BorderLeftWidth": "12px",
    +   "BorderRightWidth": "12px",
    +   "BorderTopWidth": "12px",
      }

      3 | describe('directionalProperty', () => {
      4 |   it('properly generates properties when passed a hyphenated property', () => {
    > 5 |     expect(directionalProperty('border-width', '12px')).toEqual({
        |                                                         ^
      6 |       borderBottomWidth: '12px',
      7 |       borderLeftWidth: '12px',
      8 |       borderRightWidth: '12px',

      at Object.<anonymous> (src/helpers/test/directionalProperty.test.ts:5:57)

  ‚óè directionalProperty ‚Ä∫ properly generates properties when passed a camelCased property

    expect(received).toEqual(expected) // deep equality

    - Expected  - 4
    + Received  + 4

      Object {
    -   "borderBottomWidth": "12px",
    -   "borderLeftWidth": "12px",
    -   "borderRightWidth": "12px",
    -   "borderTopWidth": "12px",
    +   "borderbottomWidth": "12px",
    +   "borderleftWidth": "12px",
    +   "borderrightWidth": "12px",
    +   "bordertopWidth": "12px",
      }

      12 |
      13 |   it('properly generates properties when passed a camelCased property', () => {
    > 14 |     expect(directionalProperty('borderWidth', '12px')).toEqual({
         |                                                        ^
      15 |       borderBottomWidth: '12px',
      16 |       borderLeftWidth: '12px',
      17 |       borderRightWidth: '12px',

      at Object.<anonymous> (src/helpers/test/directionalProperty.test.ts:14:56)

  ‚óè directionalProperty ‚Ä∫ properly applies a value when passed only one

    expect(received).toEqual(expected) // deep equality

    - Expected  - 4
    + Received  + 4

      Object {
    -   "borderBottom": "12px",
    -   "borderLeft": "12px",
    -   "borderRight": "12px",
    -   "borderTop": "12px",
    +   "borderbottom": "12px",
    +   "borderleft": "12px",
    +   "borderright": "12px",
    +   "bordertop": "12px",
      }

      39 |
      40 |   it('properly applies a value when passed only one', () => {
    > 41 |     expect(directionalProperty('border', '12px')).toEqual({
         |                                                   ^
      42 |       borderBottom: '12px',
      43 |       borderLeft: '12px',
      44 |       borderRight: '12px',

      at Object.<anonymous> (src/helpers/test/directionalProperty.test.ts:41:51)

  ‚óè directionalProperty ‚Ä∫ properly applies an integer value when passed only one

    expect(received).toEqual(expected) // deep equality

    - Expected  - 4
    + Received  + 4

      Object {
    -   "borderBottom": 12,
    -   "borderLeft": 12,
    -   "borderRight": 12,
    -   "borderTop": 12,
    +   "borderbottom": 12,
    +   "borderleft": 12,
    +   "borderright": 12,
    +   "bordertop": 12,
      }

      48 |
      49 |   it('properly applies an integer value when passed only one', () => {
    > 50 |     expect(directionalProperty('border', 12)).toEqual({
         |                                               ^
      51 |       borderBottom: 12,
      52 |       borderLeft: 12,
      53 |       borderRight: 12,

      at Object.<anonymous> (src/helpers/test/directionalProperty.test.ts:50:47)

  ‚óè directionalProperty ‚Ä∫ properly applies values when passed two

    expect(received).toEqual(expected) // deep equality

    - Expected  - 4
    + Received  + 4

      Object {
    -   "borderBottom": "12px",
    -   "borderLeft": "24px",
    -   "borderRight": "24px",
    -   "borderTop": "12px",
    +   "borderbottom": "12px",
    +   "borderleft": "24px",
    +   "borderright": "24px",
    +   "bordertop": "12px",
      }

      57 |
      58 |   it('properly applies values when passed two', () => {
    > 59 |     expect(directionalProperty('border', '12px', '24px')).toEqual({
         |                                                           ^
      60 |       borderBottom: '12px',
      61 |       borderLeft: '24px',
      62 |       borderRight: '24px',

      at Object.<anonymous> (src/helpers/test/directionalProperty.test.ts:59:59)

  ‚óè directionalProperty ‚Ä∫ properly applies values when passed two integers

    expect(received).toEqual(expected) // deep equality

    - Expected  - 4
    + Received  + 4

      Object {
    -   "borderBottom": 12,
    -   "borderLeft": 24,
    -   "borderRight": 24,
    -   "borderTop": 12,
    +   "borderbottom": 12,
    +   "borderleft": 24,
    +   "borderright": 24,
    +   "bordertop": 12,
      }

      66 |
      67 |   it('properly applies values when passed two integers', () => {
    > 68 |     expect(directionalProperty('border', 12, 24)).toEqual({
         |                                                   ^
      69 |       borderBottom: 12,
      70 |       borderLeft: 24,
      71 |       borderRight: 24,

      at Object.<anonymous> (src/helpers/test/directionalProperty.test.ts:68:51)

  ‚óè directionalProperty ‚Ä∫ properly applies values when passed a string and an integer

    expect(received).toEqual(expected) // deep equality

    - Expected  - 4
    + Received  + 4

      Object {
    -   "borderBottom": 12,
    -   "borderLeft": "24px",
    -   "borderRight": "24px",
    -   "borderTop": 12,
    +   "borderbottom": 12,
    +   "borderleft": "24px",
    +   "borderright": "24px",
    +   "bordertop": 12,
      }

      75 |
      76 |   it('properly applies values when passed a string and an integer', () => {
    > 77 |     expect(directionalProperty('border', 12, '24px')).toEqual({
         |                                                       ^
      78 |       borderBottom: 12,
      79 |       borderLeft: '24px',
      80 |       borderRight: '24px',

      at Object.<anonymous> (src/helpers/test/directionalProperty.test.ts:77:55)

  ‚óè directionalProperty ‚Ä∫ properly skips top and bottom properties when first value is null

    expect(received).toEqual(expected) // deep equality

    - Expected  - 2
    + Received  + 2

      Object {
    -   "borderLeft": "12px",
    -   "borderRight": "12px",
    +   "borderleft": "12px",
    +   "borderright": "12px",
      }

      84 |
      85 |   it('properly skips top and bottom properties when first value is null', () => {
    > 86 |     expect(directionalProperty('border', null, '12px')).toEqual({
         |                                                         ^
      87 |       borderLeft: '12px',
      88 |       borderRight: '12px',
      89 |     })

      at Object.<anonymous> (src/helpers/test/directionalProperty.test.ts:86:57)

  ‚óè directionalProperty ‚Ä∫ properly skips left and right properties when second value is null

    expect(received).toEqual(expected) // deep equality

    - Expected  - 2
    + Received  + 2

      Object {
    -   "borderBottom": "12px",
    -   "borderTop": "12px",
    +   "borderbottom": "12px",
    +   "bordertop": "12px",
      }

      91 |
      92 |   it('properly skips left and right properties when second value is null', () => {
    > 93 |     expect(directionalProperty('border', '12px', null)).toEqual({
         |                                                         ^
      94 |       borderBottom: '12px',
      95 |       borderTop: '12px',
      96 |     })

      at Object.<anonymous> (src/helpers/test/directionalProperty.test.ts:93:57)

  ‚óè directionalProperty ‚Ä∫ properly applies values when passed three

    expect(received).toEqual(expected) // deep equality

    - Expected  - 4
    + Received  + 4

      Object {
    -   "borderBottom": "36px",
    -   "borderLeft": "24px",
    -   "borderRight": "24px",
    -   "borderTop": "12px",
    +   "borderbottom": "36px",
    +   "borderleft": "24px",
    +   "borderright": "24px",
    +   "bordertop": "12px",
      }

       98 |
       99 |   it('properly applies values when passed three', () => {
    > 100 |     expect(directionalProperty('border', '12px', '24px', '36px')).toEqual({
          |                                                                   ^
      101 |       borderBottom: '36px',
      102 |       borderLeft: '24px',
      103 |       borderRight: '24px',

      at Object.<anonymous> (src/helpers/test/directionalProperty.test.ts:100:67)

  ‚óè directionalProperty ‚Ä∫ properly skips top property when first value is null

    expect(received).toEqual(expected) // deep equality

    - Expected  - 3
    + Received  + 3

      Object {
    -   "borderBottom": "36px",
    -   "borderLeft": "24px",
    -   "borderRight": "24px",
    +   "borderbottom": "36px",
    +   "borderleft": "24px",
    +   "borderright": "24px",
      }

      107 |
      108 |   it('properly skips top property when first value is null', () => {
    > 109 |     expect(directionalProperty('border', null, '24px', '36px')).toEqual({
          |                                                                 ^
      110 |       borderBottom: '36px',
      111 |       borderLeft: '24px',
      112 |       borderRight: '24px',

      at Object.<anonymous> (src/helpers/test/directionalProperty.test.ts:109:65)

  ‚óè directionalProperty ‚Ä∫ properly skips right and left properties when second value is null

    expect(received).toEqual(expected) // deep equality

    - Expected  - 2
    + Received  + 2

      Object {
    -   "borderBottom": "36px",
    -   "borderTop": "12px",
    +   "borderbottom": "36px",
    +   "bordertop": "12px",
      }

      115 |
      116 |   it('properly skips right and left properties when second value is null', () => {
    > 117 |     expect(directionalProperty('border', '12px', null, '36px')).toEqual({
          |                                                                 ^
      118 |       borderBottom: '36px',
      119 |       borderTop: '12px',
      120 |     })

      at Object.<anonymous> (src/helpers/test/directionalProperty.test.ts:117:65)

  ‚óè directionalProperty ‚Ä∫ properly skips bottom property when last value is null

    expect(received).toEqual(expected) // deep equality

    - Expected  - 3
    + Received  + 3

      Object {
    -   "borderLeft": "24px",
    -   "borderRight": "24px",
    -   "borderTop": "12px",
    +   "borderleft": "24px",
    +   "borderright": "24px",
    +   "bordertop": "12px",
      }

      122 |
      123 |   it('properly skips bottom property when last value is null', () => {
    > 124 |     expect(directionalProperty('border', '12px', '24px', null)).toEqual({
          |                                                                 ^
      125 |       borderLeft: '24px',
      126 |       borderRight: '24px',
      127 |       borderTop: '12px',

      at Object.<anonymous> (src/helpers/test/directionalProperty.test.ts:124:65)

  ‚óè directionalProperty ‚Ä∫ properly applies values when passed a mixture of three value types

    expect(received).toEqual(expected) // deep equality

    - Expected  - 3
    + Received  + 3

      Object {
    -   "borderLeft": "24px",
    -   "borderRight": "24px",
    -   "borderTop": 12,
    +   "borderleft": "24px",
    +   "borderright": "24px",
    +   "bordertop": 12,
      }

      130 |
      131 |   it('properly applies values when passed a mixture of three value types', () => {
    > 132 |     expect(directionalProperty('border', 12, '24px', null)).toEqual({
          |                                                             ^
      133 |       borderLeft: '24px',
      134 |       borderRight: '24px',
      135 |       borderTop: 12,

      at Object.<anonymous> (src/helpers/test/directionalProperty.test.ts:132:61)

  ‚óè directionalProperty ‚Ä∫ properly applies values when passed four

    expect(received).toEqual(expected) // deep equality

    - Expected  - 4
    + Received  + 4

      Object {
    -   "borderBottom": "36px",
    -   "borderLeft": "48px",
    -   "borderRight": "24px",
    -   "borderTop": "12px",
    +   "borderbottom": "36px",
    +   "borderleft": "48px",
    +   "borderright": "24px",
    +   "bordertop": "12px",
      }

      138 |
      139 |   it('properly applies values when passed four', () => {
    > 140 |     expect(directionalProperty('border', '12px', '24px', '36px', '48px')).toEqual({
          |                                                                           ^
      141 |       borderBottom: '36px',
      142 |       borderLeft: '48px',
      143 |       borderRight: '24px',

      at Object.<anonymous> (src/helpers/test/directionalProperty.test.ts:140:75)

  ‚óè directionalProperty ‚Ä∫ properly skips top property when first value is null

    expect(received).toEqual(expected) // deep equality

    - Expected  - 3
    + Received  + 3

      Object {
    -   "borderBottom": "36px",
    -   "borderLeft": "48px",
    -   "borderRight": "24px",
    +   "borderbottom": "36px",
    +   "borderleft": "48px",
    +   "borderright": "24px",
      }

      147 |
      148 |   it('properly skips top property when first value is null', () => {
    > 149 |     expect(directionalProperty('border', null, '24px', '36px', '48px')).toEqual({
          |                                                                         ^
      150 |       borderBottom: '36px',
      151 |       borderLeft: '48px',
      152 |       borderRight: '24px',

      at Object.<anonymous> (src/helpers/test/directionalProperty.test.ts:149:73)

  ‚óè directionalProperty ‚Ä∫ properly skips right property when second value is null

    expect(received).toEqual(expected) // deep equality

    - Expected  - 3
    + Received  + 3

      Object {
    -   "borderBottom": "36px",
    -   "borderLeft": "48px",
    -   "borderTop": "12px",
    +   "borderbottom": "36px",
    +   "borderleft": "48px",
    +   "bordertop": "12px",
      }

      155 |
      156 |   it('properly skips right property when second value is null', () => {
    > 157 |     expect(directionalProperty('border', '12px', null, '36px', '48px')).toEqual({
          |                                                                         ^
      158 |       borderBottom: '36px',
      159 |       borderLeft: '48px',
      160 |       borderTop: '12px',

      at Object.<anonymous> (src/helpers/test/directionalProperty.test.ts:157:73)

  ‚óè directionalProperty ‚Ä∫ properly skips bottom property when third value is null

    expect(received).toEqual(expected) // deep equality

    - Expected  - 3
    + Received  + 3

      Object {
    -   "borderLeft": "48px",
    -   "borderRight": "24px",
    -   "borderTop": "12px",
    +   "borderleft": "48px",
    +   "borderright": "24px",
    +   "bordertop": "12px",
      }

      163 |
      164 |   it('properly skips bottom property when third value is null', () => {
    > 165 |     expect(directionalProperty('border', '12px', '24px', null, '48px')).toEqual({
          |                                                                         ^
      166 |       borderLeft: '48px',
      167 |       borderRight: '24px',
      168 |       borderTop: '12px',

      at Object.<anonymous> (src/helpers/test/directionalProperty.test.ts:165:73)

  ‚óè directionalProperty ‚Ä∫ properly skips left property when fourth value is null

    expect(received).toEqual(expected) // deep equality

    - Expected  - 3
    + Received  + 3

      Object {
    -   "borderBottom": "36px",
    -   "borderRight": "24px",
    -   "borderTop": "12px",
    +   "borderbottom": "36px",
    +   "borderright": "24px",
    +   "bordertop": "12px",
      }

      171 |
      172 |   it('properly skips left property when fourth value is null', () => {
    > 173 |     expect(directionalProperty('border', '12px', '24px', '36px', null)).toEqual({
          |                                                                         ^
      174 |       borderBottom: '36px',
      175 |       borderRight: '24px',
      176 |       borderTop: '12px',

      at Object.<anonymous> (src/helpers/test/directionalProperty.test.ts:173:73)

  ‚óè directionalProperty ‚Ä∫ properly applies values when passed a mixture of four value types

    expect(received).toEqual(expected) // deep equality

    - Expected  - 3
    + Received  + 3

      Object {
    -   "borderBottom": 36,
    -   "borderRight": "24px",
    -   "borderTop": 12,
    +   "borderbottom": 36,
    +   "borderright": "24px",
    +   "bordertop": 12,
      }

      179 |
      180 |   it('properly applies values when passed a mixture of four value types', () => {
    > 181 |     expect(directionalProperty('border', 12, '24px', 36, null)).toEqual({
          |                                                                 ^
      182 |       borderBottom: 36,
      183 |       borderRight: '24px',
      184 |       borderTop: 12,

      at Object.<anonymous> (src/helpers/test/directionalProperty.test.ts:181:65)

FAIL src/shorthands/test/margin.test.ts
  ‚óè margin ‚Ä∫ properly applies a value when passed only one

    expect(received).toEqual(expected) // deep equality

    - Expected  - 4
    + Received  + 4

      Object {
    -   "marginBottom": "12px",
    -   "marginLeft": "12px",
    -   "marginRight": "12px",
    -   "marginTop": "12px",
    +   "marginbottom": "12px",
    +   "marginleft": "12px",
    +   "marginright": "12px",
    +   "margintop": "12px",
      }

      3 | describe('margin', () => {
      4 |   it('properly applies a value when passed only one', () => {
    > 5 |     expect(margin('12px')).toEqual({
        |                            ^
      6 |       marginBottom: '12px',
      7 |       marginLeft: '12px',
      8 |       marginRight: '12px',

      at Object.<anonymous> (src/shorthands/test/margin.test.ts:5:28)

  ‚óè margin ‚Ä∫ properly applies values when passed two

    expect(received).toEqual(expected) // deep equality

    - Expected  - 4
    + Received  + 4

      Object {
    -   "marginBottom": "12px",
    -   "marginLeft": "24px",
    -   "marginRight": "24px",
    -   "marginTop": "12px",
    +   "marginbottom": "12px",
    +   "marginleft": "24px",
    +   "marginright": "24px",
    +   "margintop": "12px",
      }

      12 |
      13 |   it('properly applies values when passed two', () => {
    > 14 |     expect(margin('12px', '24px')).toEqual({
         |                                    ^
      15 |       marginBottom: '12px',
      16 |       marginLeft: '24px',
      17 |       marginRight: '24px',

      at Object.<anonymous> (src/shorthands/test/margin.test.ts:14:36)

  ‚óè margin ‚Ä∫ properly applies values when passed three

    expect(received).toEqual(expected) // deep equality

    - Expected  - 4
    + Received  + 4

      Object {
    -   "marginBottom": "36px",
    -   "marginLeft": "24px",
    -   "marginRight": "24px",
    -   "marginTop": "12px",
    +   "marginbottom": "36px",
    +   "marginleft": "24px",
    +   "marginright": "24px",
    +   "margintop": "12px",
      }

      21 |
      22 |   it('properly applies values when passed three', () => {
    > 23 |     expect(margin('12px', '24px', '36px')).toEqual({
         |                                            ^
      24 |       marginBottom: '36px',
      25 |       marginLeft: '24px',
      26 |       marginRight: '24px',

      at Object.<anonymous> (src/shorthands/test/margin.test.ts:23:44)

  ‚óè margin ‚Ä∫ properly applies values when passed four

    expect(received).toEqual(expected) // deep equality

    - Expected  - 4
    + Received  + 4

      Object {
    -   "marginBottom": "36px",
    -   "marginLeft": "48px",
    -   "marginRight": "24px",
    -   "marginTop": "12px",
    +   "marginbottom": "36px",
    +   "marginleft": "48px",
    +   "marginright": "24px",
    +   "margintop": "12px",
      }

      30 |
      31 |   it('properly applies values when passed four', () => {
    > 32 |     expect(margin('12px', '24px', '36px', '48px')).toEqual({
         |                                                    ^
      33 |       marginBottom: '36px',
      34 |       marginLeft: '48px',
      35 |       marginRight: '24px',

      at Object.<anonymous> (src/shorthands/test/margin.test.ts:32:52)

  ‚óè margin ‚Ä∫ properly applies values when passed four as numbers

    expect(received).toEqual(expected) // deep equality

    - Expected  - 4
    + Received  + 4

      Object {
    -   "marginBottom": 36,
    -   "marginLeft": 48,
    -   "marginRight": 24,
    -   "marginTop": 12,
    +   "marginbottom": 36,
    +   "marginleft": 48,
    +   "marginright": 24,
    +   "margintop": 12,
      }

      39 |
      40 |   it('properly applies values when passed four as numbers', () => {
    > 41 |     expect(margin(12, 24, 36, 48)).toEqual({
         |                                    ^
      42 |       marginBottom: 36,
      43 |       marginLeft: 48,
      44 |       marginRight: 24,

      at Object.<anonymous> (src/shorthands/test/margin.test.ts:41:36)

  ‚óè margin ‚Ä∫ properly applies values when passed null

    expect(received).toEqual(expected) // deep equality

    - Expected  - 4
    + Received  + 4

      Object {
    -   "marginBottom": null,
    -   "marginLeft": "48px",
    -   "marginRight": "24px",
    -   "marginTop": null,
    +   "marginbottom": "24px",
    +   "marginleft": "48px",
    +   "marginright": "48px",
    +   "margintop": "24px",
      }

      48 |
      49 |   it('properly applies values when passed null', () => {
    > 50 |     expect(margin(null, '24px', null, '48px')).toEqual({
         |                                                ^
      51 |       marginBottom: null,
      52 |       marginLeft: '48px',
      53 |       marginRight: '24px',

      at Object.<anonymous> (src/shorthands/test/margin.test.ts:50:48)

  ‚óè margin ‚Ä∫ properly applies values when passed undefined

    expect(received).toEqual(expected) // deep equality

    - Expected  - 4
    + Received  + 4

      Object {
    -   "marginBottom": undefined,
    -   "marginLeft": "48px",
    -   "marginRight": "24px",
    -   "marginTop": undefined,
    +   "marginbottom": "24px",
    +   "marginleft": "48px",
    +   "marginright": "48px",
    +   "margintop": "24px",
      }

      57 |
      58 |   it('properly applies values when passed undefined', () => {
    > 59 |     expect(margin(undefined, '24px', undefined, '48px')).toEqual({
         |                                                          ^
      60 |       marginBottom: undefined,
      61 |       marginLeft: '48px',
      62 |       marginRight: '24px',

      at Object.<anonymous> (src/shorthands/test/margin.test.ts:59:58)

FAIL src/shorthands/test/borderStyle.test.ts
  ‚óè borderStyle ‚Ä∫ properly applies a value when passed only one

    expect(received).toEqual(expected) // deep equality

    - Expected  - 4
    + Received  + 4

      Object {
    -   "borderBottomStyle": "solid",
    -   "borderLeftStyle": "solid",
    -   "borderRightStyle": "solid",
    -   "borderTopStyle": "solid",
    +   "borderbottomStyle": "solid",
    +   "borderleftStyle": "solid",
    +   "borderrightStyle": "solid",
    +   "bordertopStyle": "solid",
      }

      3 | describe('borderStyle', () => {
      4 |   it('properly applies a value when passed only one', () => {
    > 5 |     expect(borderStyle('solid')).toEqual({
        |                                  ^
      6 |       borderBottomStyle: 'solid',
      7 |       borderLeftStyle: 'solid',
      8 |       borderRightStyle: 'solid',

      at Object.<anonymous> (src/shorthands/test/borderStyle.test.ts:5:34)

  ‚óè borderStyle ‚Ä∫ properly applies values when passed two

    expect(received).toEqual(expected) // deep equality

    - Expected  - 4
    + Received  + 4

      Object {
    -   "borderBottomStyle": "solid",
    -   "borderLeftStyle": "dashed",
    -   "borderRightStyle": "dashed",
    -   "borderTopStyle": "solid",
    +   "borderbottomStyle": "solid",
    +   "borderleftStyle": "dashed",
    +   "borderrightStyle": "dashed",
    +   "bordertopStyle": "solid",
      }

      12 |
      13 |   it('properly applies values when passed two', () => {
    > 14 |     expect(borderStyle('solid', 'dashed')).toEqual({
         |                                            ^
      15 |       borderBottomStyle: 'solid',
      16 |       borderLeftStyle: 'dashed',
      17 |       borderRightStyle: 'dashed',

      at Object.<anonymous> (src/shorthands/test/borderStyle.test.ts:14:44)

  ‚óè borderStyle ‚Ä∫ properly applies values when passed three

    expect(received).toEqual(expected) // deep equality

    - Expected  - 4
    + Received  + 4

      Object {
    -   "borderBottomStyle": "dotted",
    -   "borderLeftStyle": "dashed",
    -   "borderRightStyle": "dashed",
    -   "borderTopStyle": "solid",
    +   "borderbottomStyle": "dotted",
    +   "borderleftStyle": "dashed",
    +   "borderrightStyle": "dashed",
    +   "bordertopStyle": "solid",
      }

      21 |
      22 |   it('properly applies values when passed three', () => {
    > 23 |     expect(borderStyle('solid', 'dashed', 'dotted')).toEqual({
         |                                                      ^
      24 |       borderBottomStyle: 'dotted',
      25 |       borderLeftStyle: 'dashed',
      26 |       borderRightStyle: 'dashed',

      at Object.<anonymous> (src/shorthands/test/borderStyle.test.ts:23:54)

  ‚óè borderStyle ‚Ä∫ properly applies values when passed four

    expect(received).toEqual(expected) // deep equality

    - Expected  - 4
    + Received  + 4

      Object {
    -   "borderBottomStyle": "dotted",
    -   "borderLeftStyle": "double",
    -   "borderRightStyle": "dashed",
    -   "borderTopStyle": "solid",
    +   "borderbottomStyle": "dotted",
    +   "borderleftStyle": "double",
    +   "borderrightStyle": "dashed",
    +   "bordertopStyle": "solid",
      }

      30 |
      31 |   it('properly applies values when passed four', () => {
    > 32 |     expect(borderStyle('solid', 'dashed', 'dotted', 'double')).toEqual({
         |                                                                ^
      33 |       borderBottomStyle: 'dotted',
      34 |       borderLeftStyle: 'double',
      35 |       borderRightStyle: 'dashed',

      at Object.<anonymous> (src/shorthands/test/borderStyle.test.ts:32:64)

  ‚óè borderStyle ‚Ä∫ properly applies values when passed null

    expect(received).toEqual(expected) // deep equality

    - Expected  - 4
    + Received  + 4

      Object {
    -   "borderBottomStyle": "dashed",
    -   "borderLeftStyle": "double",
    -   "borderRightStyle": "dashed",
    -   "borderTopStyle": "solid",
    +   "borderbottomStyle": "dashed",
    +   "borderleftStyle": "double",
    +   "borderrightStyle": "double",
    +   "bordertopStyle": "dashed",
      }

      39 |
      40 |   it('properly applies values when passed null', () => {
    > 41 |     expect(borderStyle(null, 'dashed', null, 'double')).toEqual({
         |                                                         ^
      42 |       borderBottomStyle: 'dashed',
      43 |       borderLeftStyle: 'double',
      44 |       borderRightStyle: 'dashed',

      at Object.<anonymous> (src/shorthands/test/borderStyle.test.ts:41:57)

  ‚óè borderStyle ‚Ä∫ properly applies values when passed undefined

    expect(received).toEqual(expected) // deep equality

    - Expected  - 4
    + Received  + 4

      Object {
    -   "borderBottomStyle": "dashed",
    -   "borderLeftStyle": "double",
    -   "borderRightStyle": "dashed",
    -   "borderTopStyle": "solid",
    +   "borderbottomStyle": "dashed",
    +   "borderleftStyle": "double",
    +   "borderrightStyle": "double",
    +   "bordertopStyle": "dashed",
      }

      48 |
      49 |   it('properly applies values when passed undefined', () => {
    > 50 |     expect(borderStyle(undefined, 'dashed', undefined, 'double')).toEqual({
         |                                                                   ^
      51 |       borderBottomStyle: 'dashed',
      52 |       borderLeftStyle: 'double',
      53 |       borderRightStyle: 'dashed',

      at Object.<anonymous> (src/shorthands/test/borderStyle.test.ts:50:67)

  ‚óè borderStyle ‚Ä∫ properly applies values when passed a mix of null, undefined, and valid values

    expect(received).toEqual(expected) // deep equality

    - Expected  - 4
    + Received  + 4

      Object {
    -   "borderBottomStyle": "dashed",
    -   "borderLeftStyle": "double",
    -   "borderRightStyle": "dashed",
    -   "borderTopStyle": "solid",
    +   "borderbottomStyle": "dashed",
    +   "borderleftStyle": "double",
    +   "borderrightStyle": "double",
    +   "bordertopStyle": "dashed",
      }

      57 |
      58 |   it('properly applies values when passed a mix of null, undefined, and valid values', () => {
    > 59 |     expect(borderStyle(null, 'dashed', undefined, 'double')).toEqual({
         |                                                              ^
      60 |       borderBottomStyle: 'dashed',
      61 |       borderLeftStyle: 'double',
      62 |       borderRightStyle: 'dashed',

      at Object.<anonymous> (src/shorthands/test/borderStyle.test.ts:59:62)

FAIL src/shorthands/test/borderWidth.test.ts
  ‚óè borderWidth ‚Ä∫ properly applies a value when passed only one

    expect(received).toEqual(expected) // deep equality

    - Expected  - 4
    + Received  + 4

      Object {
    -   "borderBottomWidth": "12px",
    -   "borderLeftWidth": "12px",
    -   "borderRightWidth": "12px",
    -   "borderTopWidth": "12px",
    +   "borderbottomWidth": "12px",
    +   "borderleftWidth": "12px",
    +   "borderrightWidth": "12px",
    +   "bordertopWidth": "12px",
      }

      3 | describe('borderWidth', () => {
      4 |   it('properly applies a value when passed only one', () => {
    > 5 |     expect(borderWidth('12px')).toEqual({
        |                                 ^
      6 |       borderBottomWidth: '12px',
      7 |       borderLeftWidth: '12px',
      8 |       borderRightWidth: '12px',

      at Object.<anonymous> (src/shorthands/test/borderWidth.test.ts:5:33)

  ‚óè borderWidth ‚Ä∫ properly applies values when passed two

    expect(received).toEqual(expected) // deep equality

    - Expected  - 4
    + Received  + 4

      Object {
    -   "borderBottomWidth": "12px",
    -   "borderLeftWidth": "24px",
    -   "borderRightWidth": "24px",
    -   "borderTopWidth": "12px",
    +   "borderbottomWidth": "12px",
    +   "borderleftWidth": "24px",
    +   "borderrightWidth": "24px",
    +   "bordertopWidth": "12px",
      }

      12 |
      13 |   it('properly applies values when passed two', () => {
    > 14 |     expect(borderWidth('12px', '24px')).toEqual({
         |                                         ^
      15 |       borderBottomWidth: '12px',
      16 |       borderLeftWidth: '24px',
      17 |       borderRightWidth: '24px',

      at Object.<anonymous> (src/shorthands/test/borderWidth.test.ts:14:41)

  ‚óè borderWidth ‚Ä∫ properly applies values when passed three

    expect(received).toEqual(expected) // deep equality

    - Expected  - 4
    + Received  + 4

      Object {
    -   "borderBottomWidth": "36px",
    -   "borderLeftWidth": "24px",
    -   "borderRightWidth": "24px",
    -   "borderTopWidth": "12px",
    +   "borderbottomWidth": "36px",
    +   "borderleftWidth": "24px",
    +   "borderrightWidth": "24px",
    +   "bordertopWidth": "12px",
      }

      21 |
      22 |   it('properly applies values when passed three', () => {
    > 23 |     expect(borderWidth('12px', '24px', '36px')).toEqual({
         |                                                 ^
      24 |       borderBottomWidth: '36px',
      25 |       borderLeftWidth: '24px',
      26 |       borderRightWidth: '24px',

      at Object.<anonymous> (src/shorthands/test/borderWidth.test.ts:23:49)

  ‚óè borderWidth ‚Ä∫ properly applies values when passed four

    expect(received).toEqual(expected) // deep equality

    - Expected  - 4
    + Received  + 4

      Object {
    -   "borderBottomWidth": "36px",
    -   "borderLeftWidth": "48px",
    -   "borderRightWidth": "24px",
    -   "borderTopWidth": "12px",
    +   "borderbottomWidth": "36px",
    +   "borderleftWidth": "48px",
    +   "borderrightWidth": "24px",
    +   "bordertopWidth": "12px",
      }

      30 |
      31 |   it('properly applies values when passed four', () => {
    > 32 |     expect(borderWidth('12px', '24px', '36px', '48px')).toEqual({
         |                                                         ^
      33 |       borderBottomWidth: '36px',
      34 |       borderLeftWidth: '48px',
      35 |       borderRightWidth: '24px',

      at Object.<anonymous> (src/shorthands/test/borderWidth.test.ts:32:57)

  ‚óè borderWidth ‚Ä∫ properly applies values when passed integers

    expect(received).toEqual(expected) // deep equality

    - Expected  - 4
    + Received  + 4

      Object {
    -   "borderBottomWidth": 36,
    -   "borderLeftWidth": 48,
    -   "borderRightWidth": 24,
    -   "borderTopWidth": 12,
    +   "borderbottomWidth": 36,
    +   "borderleftWidth": 48,
    +   "borderrightWidth": 24,
    +   "bordertopWidth": 12,
      }

      39 |
      40 |   it('properly applies values when passed integers', () => {
    > 41 |     expect(borderWidth(12, 24, 36, 48)).toEqual({
         |                                         ^
      42 |       borderBottomWidth: 36,
      43 |       borderLeftWidth: 48,
      44 |       borderRightWidth: 24,

      at Object.<anonymous> (src/shorthands/test/borderWidth.test.ts:41:41)

  ‚óè borderWidth ‚Ä∫ properly applies values when passed zero

    expect(received).toEqual(expected) // deep equality

    - Expected  - 4
    + Received  + 4

      Object {
    -   "borderBottomWidth": 0,
    -   "borderLeftWidth": 0,
    -   "borderRightWidth": 0,
    -   "borderTopWidth": 0,
    +   "borderbottomWidth": 0,
    +   "borderleftWidth": 0,
    +   "borderrightWidth": 0,
    +   "bordertopWidth": 0,
      }

      48 |
      49 |   it('properly applies values when passed zero', () => {
    > 50 |     expect(borderWidth(0)).toEqual({
         |                            ^
      51 |       borderBottomWidth: 0,
      52 |       borderLeftWidth: 0,
      53 |       borderRightWidth: 0,

      at Object.<anonymous> (src/shorthands/test/borderWidth.test.ts:50:28)

  ‚óè borderWidth ‚Ä∫ properly applies values when passed null

    expect(received).toEqual(expected) // deep equality

    - Expected  - 4
    + Received  + 4

      Object {
    -   "borderBottomWidth": "24px",
    -   "borderLeftWidth": "48px",
    -   "borderRightWidth": "24px",
    -   "borderTopWidth": "0px",
    +   "borderbottomWidth": "24px",
    +   "borderleftWidth": "48px",
    +   "borderrightWidth": "48px",
    +   "bordertopWidth": "24px",
      }

      57 |
      58 |   it('properly applies values when passed null', () => {
    > 59 |     expect(borderWidth(null, '24px', null, '48px')).toEqual({
         |                                                     ^
      60 |       borderBottomWidth: '24px',
      61 |       borderLeftWidth: '48px',
      62 |       borderRightWidth: '24px',

      at Object.<anonymous> (src/shorthands/test/borderWidth.test.ts:59:53)

  ‚óè borderWidth ‚Ä∫ properly applies values when passed undefined

    expect(received).toEqual(expected) // deep equality

    - Expected  - 4
    + Received  + 4

      Object {
    -   "borderBottomWidth": "24px",
    -   "borderLeftWidth": "48px",
    -   "borderRightWidth": "24px",
    -   "borderTopWidth": "0px",
    +   "borderbottomWidth": "24px",
    +   "borderleftWidth": "48px",
    +   "borderrightWidth": "48px",
    +   "bordertopWidth": "24px",
      }

      66 |
      67 |   it('properly applies values when passed undefined', () => {
    > 68 |     expect(borderWidth(undefined, '24px', undefined, '48px')).toEqual({
         |                                                               ^
      69 |       borderBottomWidth: '24px',
      70 |       borderLeftWidth: '48px',
      71 |       borderRightWidth: '24px',

      at Object.<anonymous> (src/shorthands/test/borderWidth.test.ts:68:63)

  ‚óè borderWidth ‚Ä∫ properly applies values when passed a mix of null, undefined, and valid values

    expect(received).toEqual(expected) // deep equality

    - Expected  - 4
    + Received  + 4

      Object {
    -   "borderBottomWidth": "24px",
    -   "borderLeftWidth": "48px",
    -   "borderRightWidth": "24px",
    -   "borderTopWidth": "0px",
    +   "borderbottomWidth": "24px",
    +   "borderleftWidth": "48px",
    +   "borderrightWidth": "48px",
    +   "bordertopWidth": "24px",
      }

      75 |
      76 |   it('properly applies values when passed a mix of null, undefined, and valid values', () => {
    > 77 |     expect(borderWidth(null, '24px', undefined, '48px')).toEqual({
         |                                                          ^
      78 |       borderBottomWidth: '24px',
      79 |       borderLeftWidth: '48px',
      80 |       borderRightWidth: '24px',

      at Object.<anonymous> (src/shorthands/test/borderWidth.test.ts:77:58)

FAIL src/shorthands/test/borderColor.test.ts
  ‚óè borderColor ‚Ä∫ properly applies a value when passed only one

    expect(received).toEqual(expected) // deep equality

    - Expected  - 4
    + Received  + 4

      Object {
    -   "borderBottomColor": "red",
    -   "borderLeftColor": "red",
    -   "borderRightColor": "red",
    -   "borderTopColor": "red",
    +   "borderbottomColor": "red",
    +   "borderleftColor": "red",
    +   "borderrightColor": "red",
    +   "bordertopColor": "red",
      }

      4 | describe('borderColor', () => {
      5 |   it('properly applies a value when passed only one', () => {
    > 6 |     expect(borderColor('red')).toEqual({
        |                                ^
      7 |       borderBottomColor: 'red',
      8 |       borderLeftColor: 'red',
      9 |       borderRightColor: 'red',

      at Object.<anonymous> (src/shorthands/test/borderColor.test.ts:6:32)

  ‚óè borderColor ‚Ä∫ properly applies values when passed two

    expect(received).toEqual(expected) // deep equality

    - Expected  - 4
    + Received  + 4

      Object {
    -   "borderBottomColor": "red",
    -   "borderLeftColor": "blue",
    -   "borderRightColor": "blue",
    -   "borderTopColor": "red",
    +   "borderbottomColor": "red",
    +   "borderleftColor": "blue",
    +   "borderrightColor": "blue",
    +   "bordertopColor": "red",
      }

      12 |   })
      13 |   it('properly applies values when passed two', () => {
    > 14 |     expect(borderColor('red', 'blue')).toEqual({
         |                                        ^
      15 |       borderBottomColor: 'red',
      16 |       borderLeftColor: 'blue',
      17 |       borderRightColor: 'blue',

      at Object.<anonymous> (src/shorthands/test/borderColor.test.ts:14:40)

  ‚óè borderColor ‚Ä∫ properly applies values when passed three

    expect(received).toEqual(expected) // deep equality

    - Expected  - 4
    + Received  + 4

      Object {
    -   "borderBottomColor": "green",
    -   "borderLeftColor": "blue",
    -   "borderRightColor": "blue",
    -   "borderTopColor": "red",
    +   "borderbottomColor": "green",
    +   "borderleftColor": "blue",
    +   "borderrightColor": "blue",
    +   "bordertopColor": "red",
      }

      20 |   })
      21 |   it('properly applies values when passed three', () => {
    > 22 |     expect(borderColor('red', 'blue', 'green')).toEqual({
         |                                                 ^
      23 |       borderBottomColor: 'green',
      24 |       borderLeftColor: 'blue',
      25 |       borderRightColor: 'blue',

      at Object.<anonymous> (src/shorthands/test/borderColor.test.ts:22:49)

  ‚óè borderColor ‚Ä∫ properly applies values when passed four

    expect(received).toEqual(expected) // deep equality

    - Expected  - 4
    + Received  + 4

      Object {
    -   "borderBottomColor": "green",
    -   "borderLeftColor": "yellow",
    -   "borderRightColor": "blue",
    -   "borderTopColor": "red",
    +   "borderbottomColor": "green",
    +   "borderleftColor": "yellow",
    +   "borderrightColor": "blue",
    +   "bordertopColor": "red",
      }

      28 |   })
      29 |   it('properly applies values when passed four', () => {
    > 30 |     expect(borderColor('red', 'blue', 'green', 'yellow')).toEqual({
         |                                                           ^
      31 |       borderBottomColor: 'green',
      32 |       borderLeftColor: 'yellow',
      33 |       borderRightColor: 'blue',

      at Object.<anonymous> (src/shorthands/test/borderColor.test.ts:30:59)

FAIL src/mixins/test/wordWrap.test.ts
  ‚óè Test suite failed to run

    [96msrc/mixins/wordWrap.ts[0m:[93m26[0m:[93m34[0m - [91merror[0m[90m TS1015: [0mParameter cannot have question mark and initializer.

    [7m26[0m export default function wordWrap(wrap?: string = 'break-word'): Styles {
    [7m  [0m [91m                                 ~~~~[0m

FAIL src/mixins/test/linearGradient.test.ts
  ‚óè Test suite failed to run

    [96msrc/mixins/linearGradient.ts[0m:[93m52[0m:[93m44[0m - [91merror[0m[90m TS2345: [0mArgument of type 'TemplateStringsArray' is not assignable to parameter of type 'string[]'.
      Type 'TemplateStringsArray' is missing the following properties from type 'string[]': pop, push, reverse, shift, and 5 more.

    [7m52[0m     backgroundImage: constructGradientValue`linear-gradient(${toDirection}${colorStops
    [7m  [0m [91m                                           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~[0m
    [7m53[0m       .join(', ')
    [7m  [0m [91m~~~~~~~~~~~~~~~~~[0m
    [7m54[0m       .replace(/,(?=\S)/g, ', ')})`,
    [7m  [0m [91m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~[0m

FAIL src/mixins/test/hiDPI.test.ts
  ‚óè Test suite failed to run

    [96msrc/mixins/hiDPI.ts[0m:[93m32[0m:[93m31[0m - [91merror[0m[90m TS1015: [0mParameter cannot have question mark and initializer.

    [7m32[0m export default function hiDPI(ratio?: number = 1.3): string {
    [7m  [0m [91m                              ~~~~~[0m

FAIL src/mixins/test/radialGradient.test.ts
  ‚óè Test suite failed to run

    [96msrc/mixins/radialGradient.ts[0m:[93m51[0m:[93m44[0m - [91merror[0m[90m TS2345: [0mArgument of type 'TemplateStringsArray' is not assignable to parameter of type 'string[]'.
      Type 'TemplateStringsArray' is missing the following properties from type 'string[]': pop, push, reverse, shift, and 5 more.

    [7m51[0m     backgroundImage: constructGradientValue`radial-gradient(${position}${shape}${extent}${colorStops.join(
    [7m  [0m [91m                                           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~[0m
    [7m52[0m       ', ',
    [7m  [0m [91m~~~~~~~~~~~[0m
    [7m53[0m     )})`,
    [7m  [0m [91m~~~~~~~~[0m

FAIL src/mixins/test/clearFix.test.ts
  ‚óè Test suite failed to run

    [96msrc/mixins/clearFix.ts[0m:[93m26[0m:[93m34[0m - [91merror[0m[90m TS1015: [0mParameter cannot have question mark and initializer.

    [7m26[0m export default function clearFix(parent?: string = '&'): Styles {
    [7m  [0m [91m                                 ~~~~~~[0m

FAIL src/mixins/test/ellipsis.test.ts
  ‚óè Test suite failed to run

    [96msrc/mixins/ellipsis.ts[0m:[93m29[0m:[93m42[0m - [91merror[0m[90m TS17020: [0m'?' at the start of a type is not valid TypeScript syntax. Did you mean to write 'string | number'?

    [7m29[0m export default function ellipsis(width?: ?string | ?number, lines?: number = 1): Styles {
    [7m  [0m [91m                                         ~~~~~~~~~~~~~~~~~[0m
    [96msrc/mixins/ellipsis.ts[0m:[93m29[0m:[93m52[0m - [91merror[0m[90m TS17020: [0m'?' at the start of a type is not valid TypeScript syntax. Did you mean to write 'number'?

    [7m29[0m export default function ellipsis(width?: ?string | ?number, lines?: number = 1): Styles {
    [7m  [0m [91m                                                   ~~~~~~~[0m
    [96msrc/mixins/ellipsis.ts[0m:[93m29[0m:[93m61[0m - [91merror[0m[90m TS1015: [0mParameter cannot have question mark and initializer.

    [7m29[0m export default function ellipsis(width?: ?string | ?number, lines?: number = 1): Styles {
    [7m  [0m [91m                                                            ~~~~~[0m

FAIL src/mixins/test/triangle.test.ts
  ‚óè Test suite failed to run

    [96msrc/mixins/test/triangle.test.ts[0m:[93m246[0m:[93m16[0m - [91merror[0m[90m TS2345: [0mArgument of type '{ foregroundColor: string; height: string; width: string; }' is not assignable to parameter of type 'TriangleConfiguration'.
      Property 'pointingDirection' is missing in type '{ foregroundColor: string; height: string; width: string; }' but required in type 'TriangleConfiguration'.

    [7m246[0m       triangle({
    [7m   [0m [91m               ~[0m
    [7m247[0m         foregroundColor: 'blue',
    [7m   [0m [91m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~[0m
    [7m...[0m 
    [7m249[0m         width: '10px',
    [7m   [0m [91m~~~~~~~~~~~~~~~~~~~~~~[0m
    [7m250[0m       })
    [7m   [0m [91m~~~~~~~[0m

      [96msrc/types/triangleConfiguration.ts[0m:[93m19[0m:[93m3[0m
        [7m19[0m   pointingDirection: SideKeyword,
        [7m  [0m [96m  ~~~~~~~~~~~~~~~~~[0m
        'pointingDirection' is declared here.
    [96msrc/mixins/test/triangle.test.ts[0m:[93m263[0m:[93m9[0m - [91merror[0m[90m TS2322: [0mType 'false' is not assignable to type 'SideKeyword'.

    [7m263[0m         pointingDirection: false,
    [7m   [0m [91m        ~~~~~~~~~~~~~~~~~[0m

      [96msrc/types/triangleConfiguration.ts[0m:[93m19[0m:[93m3[0m
        [7m19[0m   pointingDirection: SideKeyword,
        [7m  [0m [96m  ~~~~~~~~~~~~~~~~~[0m
        The expected type comes from property 'pointingDirection' which is declared here on type 'TriangleConfiguration'

FAIL src/mixins/test/cover.test.ts
  ‚óè Test suite failed to run

    [96msrc/mixins/cover.ts[0m:[93m28[0m:[93m31[0m - [91merror[0m[90m TS1015: [0mParameter cannot have question mark and initializer.

    [7m28[0m export default function cover(offset?: number | string = 0): Styles {
    [7m  [0m [91m                              ~~~~~~[0m

FAIL src/mixins/test/retinaImage.test.ts
  ‚óè Test suite failed to run

    [96msrc/mixins/test/retinaImage.test.ts[0m:[93m7[0m:[93m24[0m - [91merror[0m[90m TS2554: [0mExpected 1-5 arguments, but got 0.

    [7m7[0m     expect(() => ({ ...retinaImage() })).toThrow()
    [7m [0m [91m                       ~~~~~~~~~~~~~[0m

      [96msrc/mixins/retinaImage.ts[0m:[93m36[0m:[93m3[0m
        [7m36[0m   filename: string,
        [7m  [0m [96m  ~~~~~~~~~~~~~~~~[0m
        An argument for 'filename' was not provided.

FAIL src/mixins/test/fluidRange.test.ts
  ‚óè Test suite failed to run

    [96msrc/mixins/test/fluidRange.test.ts[0m:[93m136[0m:[93m9[0m - [91merror[0m[90m TS2345: [0mArgument of type 'number' is not assignable to parameter of type 'string'.

    [7m136[0m         400,
    [7m   [0m [91m        ~~~[0m

FAIL src/mixins/test/between.test.ts
  ‚óè Test suite failed to run

    [96msrc/mixins/test/between.test.ts[0m:[93m17[0m:[93m32[0m - [91merror[0m[90m TS2345: [0mArgument of type 'number' is not assignable to parameter of type 'string'.

    [7m17[0m       between('20px', '100px', 400, 1000)
    [7m  [0m [91m                               ~~~[0m

FAIL src/mixins/test/fontFace.test.ts
  ‚óè Test suite failed to run

    [96msrc/mixins/test/fontFace.test.ts[0m:[93m188[0m:[93m16[0m - [91merror[0m[90m TS2345: [0mArgument of type '{ fontFilePath: string; }' is not assignable to parameter of type 'FontFaceConfiguration'.
      Property 'fontFamily' is missing in type '{ fontFilePath: string; }' but required in type 'FontFaceConfiguration'.

    [7m188[0m       fontFace({
    [7m   [0m [91m               ~[0m
    [7m189[0m         fontFilePath: 'path/to/file',
    [7m   [0m [91m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~[0m
    [7m190[0m       })
    [7m   [0m [91m~~~~~~~[0m

      [96msrc/types/fontFaceConfiguration.ts[0m:[93m22[0m:[93m3[0m
        [7m22[0m   fontFamily: string,
        [7m  [0m [96m  ~~~~~~~~~~[0m
        'fontFamily' is declared here.
    [96msrc/mixins/test/fontFace.test.ts[0m:[93m209[0m:[93m9[0m - [91merror[0m[90m TS2322: [0mType 'string' is not assignable to type 'string[]'.

    [7m209[0m         localFonts: 'Helvetica',
    [7m   [0m [91m        ~~~~~~~~~~[0m

      [96msrc/types/fontFaceConfiguration.ts[0m:[93m30[0m:[93m3[0m
        [7m30[0m   localFonts?: Array<string> | null,
        [7m  [0m [96m  ~~~~~~~~~~[0m
        The expected type comes from property 'localFonts' which is declared here on type 'FontFaceConfiguration'
    [96msrc/mixins/test/fontFace.test.ts[0m:[93m220[0m:[93m9[0m - [91merror[0m[90m TS2322: [0mType 'string' is not assignable to type 'string[]'.

    [7m220[0m         fileFormats: 'svg',
    [7m   [0m [91m        ~~~~~~~~~~~[0m

      [96msrc/types/fontFaceConfiguration.ts[0m:[93m28[0m:[93m3[0m
        [7m28[0m   fileFormats?: Array<string>,
        [7m  [0m [96m  ~~~~~~~~~~~[0m
        The expected type comes from property 'fileFormats' which is declared here on type 'FontFaceConfiguration'

FAIL src/shorthands/test/transitions.test.ts
  ‚óè Test suite failed to run

    [96msrc/shorthands/test/transitions.test.ts[0m:[93m31[0m:[93m53[0m - [91merror[0m[90m TS2345: [0mArgument of type 'number' is not assignable to parameter of type 'string | string[]'.

    [7m31[0m       ...transitions(['color', 'background-color'], 1),
    [7m  [0m [91m                                                    ~[0m

FAIL src/shorthands/test/textInputs.test.ts
  ‚óè Test suite failed to run

    [96msrc/shorthands/test/textInputs.test.ts[0m:[93m132[0m:[93m19[0m - [91merror[0m[90m TS2345: [0mArgument of type '"clicked"' is not assignable to parameter of type 'InteractionState'.

    [7m132[0m       [textInputs('clicked')]: { 'border-color': 'black' },
    [7m   [0m [91m                  ~~~~~~~~~[0m

FAIL src/shorthands/test/position.test.ts
  ‚óè Test suite failed to run

    [96msrc/shorthands/position.ts[0m:[93m52[0m:[93m20[0m - [91merror[0m[90m TS17020: [0m'?' at the start of a type is not valid TypeScript syntax. Did you mean to write 'string | number'?

    [7m52[0m   ...values: Array<?string | ?number>
    [7m  [0m [91m                   ~~~~~~~~~~~~~~~~~[0m
    [96msrc/shorthands/position.ts[0m:[93m52[0m:[93m30[0m - [91merror[0m[90m TS17020: [0m'?' at the start of a type is not valid TypeScript syntax. Did you mean to write 'number'?

    [7m52[0m   ...values: Array<?string | ?number>
    [7m  [0m [91m                             ~~~~~~~[0m
    [96msrc/shorthands/position.ts[0m:[93m54[0m:[93m27[0m - [91merror[0m[90m TS2345: [0mArgument of type 'string | number' is not assignable to parameter of type 'string'.
      Type 'number' is not assignable to type 'string'.

    [7m54[0m   if (positionMap.indexOf(firstValue) >= 0 && firstValue) {
    [7m  [0m [91m                          ~~~~~~~~~~[0m

FAIL src/shorthands/test/padding.test.ts
  ‚óè Test suite failed to run

    [96msrc/shorthands/padding.ts[0m:[93m28[0m:[93m50[0m - [91merror[0m[90m TS17020: [0m'?' at the start of a type is not valid TypeScript syntax. Did you mean to write 'string | number'?

    [7m28[0m export default function padding(...values: Array<?string | ?number>): Styles {
    [7m  [0m [91m                                                 ~~~~~~~~~~~~~~~~~[0m
    [96msrc/shorthands/padding.ts[0m:[93m28[0m:[93m60[0m - [91merror[0m[90m TS17020: [0m'?' at the start of a type is not valid TypeScript syntax. Did you mean to write 'number'?

    [7m28[0m export default function padding(...values: Array<?string | ?number>): Styles {
    [7m  [0m [91m                                                           ~~~~~~~[0m

FAIL src/math/test/math.test.ts
  ‚óè Test suite failed to run

    [96msrc/math/math.ts[0m:[93m10[0m:[93m13[0m - [91merror[0m[90m TS2339: [0mProperty 'symbols' does not exist on type '{}'.

    [7m10[0m   symbolMap.symbols = additionalSymbols
    [7m  [0m [91m            ~~~~~~~[0m
    [96msrc/math/math.ts[0m:[93m11[0m:[93m59[0m - [91merror[0m[90m TS2339: [0mProperty 'symbols' does not exist on type 'Object'.

    [7m11[0m     ? { ...defaultSymbolMap.symbols, ...additionalSymbols.symbols }
    [7m  [0m [91m                                                          ~~~~~~~[0m
    [96msrc/math/math.ts[0m:[93m27[0m:[93m32[0m - [91merror[0m[90m TS2339: [0mProperty 'symbols' does not exist on type 'Object'.

    [7m27[0m   const operators = [symbolMap.symbols['('].prefix]
    [7m  [0m [91m                               ~~~~~~~[0m
    [96msrc/math/math.ts[0m:[93m33[0m:[93m29[0m - [91merror[0m[90m TS2339: [0mProperty 'symbols' does not exist on type 'Object'.

    [7m33[0m       Object.keys(symbolMap.symbols)
    [7m  [0m [91m                            ~~~~~~~[0m
    [96msrc/math/math.ts[0m:[93m34[0m:[93m31[0m - [91merror[0m[90m TS2339: [0mProperty 'symbols' does not exist on type 'Object'.

    [7m34[0m         .map(key => symbolMap.symbols[key])
    [7m  [0m [91m                              ~~~~~~~[0m
    [96msrc/math/math.ts[0m:[93m52[0m:[93m33[0m - [91merror[0m[90m TS2339: [0mProperty 'symbols' does not exist on type 'Object'.

    [7m52[0m     const notNumber = symbolMap.symbols[token]
    [7m  [0m [91m                                ~~~~~~~[0m

FAIL src/internalHelpers/test/_curry.test.ts
  ‚óè Test suite failed to run

    [96msrc/internalHelpers/test/_curry.test.ts[0m:[93m17[0m:[93m12[0m - [91merror[0m[90m TS2349: [0mThis expression is not callable.
      Type 'String' has no call signatures.

    [7m17[0m     expect(curry(fn)(0.5)('#FFF')(0.8)).toEqual('0.5-#FFF-0.8')
    [7m  [0m [91m           ~~~~~~~~~~~~~~~~~~~~~~[0m

FAIL src/color/test/tint.test.ts
  ‚óè Test suite failed to run

    [96msrc/color/mix.ts[0m:[93m48[0m:[93m24[0m - [91merror[0m[90m TS2345: [0mArgument of type 'string | number' is not assignable to parameter of type 'string'.
      Type 'number' is not assignable to type 'string'.

    [7m48[0m   const x = parseFloat(weight) * 2 - 1
    [7m  [0m [91m                       ~~~~~~[0m
    [96msrc/color/mix.ts[0m:[93m58[0m:[93m38[0m - [91merror[0m[90m TS2345: [0mArgument of type 'string | number' is not assignable to parameter of type 'string'.
      Type 'number' is not assignable to type 'string'.

    [7m58[0m     alpha: color1.alpha * parseFloat(weight) + color2.alpha * (1 - parseFloat(weight)),
    [7m  [0m [91m                                     ~~~~~~[0m
    [96msrc/color/mix.ts[0m:[93m58[0m:[93m79[0m - [91merror[0m[90m TS2345: [0mArgument of type 'string | number' is not assignable to parameter of type 'string'.
      Type 'number' is not assignable to type 'string'.

    [7m58[0m     alpha: color1.alpha * parseFloat(weight) + color2.alpha * (1 - parseFloat(weight)),
    [7m  [0m [91m                                                                              ~~~~~~[0m

FAIL src/helpers/test/remToPx.test.ts
  ‚óè Test suite failed to run

    [96msrc/helpers/remToPx.ts[0m:[93m10[0m:[93m23[0m - [91merror[0m[90m TS2345: [0mArgument of type 'string | number' is not assignable to parameter of type 'string'.
      Type 'number' is not assignable to type 'string'.

    [7m10[0m     return parseFloat(base)
    [7m  [0m [91m                      ~~~~[0m
    [96msrc/helpers/remToPx.ts[0m:[93m14[0m:[93m24[0m - [91merror[0m[90m TS2345: [0mArgument of type 'string | number' is not assignable to parameter of type 'string'.
      Type 'number' is not assignable to type 'string'.

    [7m14[0m     return (parseFloat(base) / 100) * defaultFontSize
    [7m  [0m [91m                       ~~~~[0m
    [96msrc/helpers/remToPx.ts[0m:[93m62[0m:[93m13[0m - [91merror[0m[90m TS2362: [0mThe left-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.

    [7m62[0m   return `${deconstructedValue[0] * newBase}px`
    [7m  [0m [91m            ~~~~~~~~~~~~~~~~~~~~~[0m

FAIL src/helpers/test/important.test.ts
  ‚óè Test suite failed to run

    [96msrc/helpers/test/important.test.ts[0m:[93m138[0m:[93m17[0m - [91merror[0m[90m TS2345: [0mArgument of type 'string' is not assignable to parameter of type 'Styles'.

    [7m138[0m       important('test')
    [7m   [0m [91m                ~~~~~~[0m

FAIL src/color/test/shade.test.ts
  ‚óè Test suite failed to run

    [96msrc/color/mix.ts[0m:[93m48[0m:[93m24[0m - [91merror[0m[90m TS2345: [0mArgument of type 'string | number' is not assignable to parameter of type 'string'.
      Type 'number' is not assignable to type 'string'.

    [7m48[0m   const x = parseFloat(weight) * 2 - 1
    [7m  [0m [91m                       ~~~~~~[0m
    [96msrc/color/mix.ts[0m:[93m58[0m:[93m38[0m - [91merror[0m[90m TS2345: [0mArgument of type 'string | number' is not assignable to parameter of type 'string'.
      Type 'number' is not assignable to type 'string'.

    [7m58[0m     alpha: color1.alpha * parseFloat(weight) + color2.alpha * (1 - parseFloat(weight)),
    [7m  [0m [91m                                     ~~~~~~[0m
    [96msrc/color/mix.ts[0m:[93m58[0m:[93m79[0m - [91merror[0m[90m TS2345: [0mArgument of type 'string | number' is not assignable to parameter of type 'string'.
      Type 'number' is not assignable to type 'string'.

    [7m58[0m     alpha: color1.alpha * parseFloat(weight) + color2.alpha * (1 - parseFloat(weight)),
    [7m  [0m [91m                                                                              ~~~~~~[0m

FAIL src/color/test/transparentize.test.ts
  ‚óè Test suite failed to run

    [96msrc/color/parseToRgb.ts[0m:[93m64[0m:[93m28[0m - [91merror[0m[90m TS2554: [0mExpected 3-4 arguments, but got 1.

    [7m64[0m     const rgbColorString = hslToRgb(hslMatched)
    [7m  [0m [91m                           ~~~~~~~~~~~~~~~~~~~~[0m

      [96msrc/internalHelpers/_hslToRgb.ts[0m:[93m13[0m:[93m3[0m
        [7m13[0m   saturation: number,
        [7m  [0m [96m  ~~~~~~~~~~~~~~~~~~[0m
        An argument for 'saturation' was not provided.
    [96msrc/color/parseToRgb.ts[0m:[93m74[0m:[93m28[0m - [91merror[0m[90m TS2554: [0mExpected 3-4 arguments, but got 1.

    [7m74[0m     const rgbColorString = hslToRgb(hslaMatched)
    [7m  [0m [91m                           ~~~~~~~~~~~~~~~~~~~~~[0m

      [96msrc/internalHelpers/_hslToRgb.ts[0m:[93m13[0m:[93m3[0m
        [7m13[0m   saturation: number,
        [7m  [0m [96m  ~~~~~~~~~~~~~~~~~~[0m
        An argument for 'saturation' was not provided.

FAIL src/color/test/saturate.test.ts
  ‚óè Test suite failed to run

    [96msrc/color/parseToRgb.ts[0m:[93m64[0m:[93m28[0m - [91merror[0m[90m TS2554: [0mExpected 3-4 arguments, but got 1.

    [7m64[0m     const rgbColorString = hslToRgb(hslMatched)
    [7m  [0m [91m                           ~~~~~~~~~~~~~~~~~~~~[0m

      [96msrc/internalHelpers/_hslToRgb.ts[0m:[93m13[0m:[93m3[0m
        [7m13[0m   saturation: number,
        [7m  [0m [96m  ~~~~~~~~~~~~~~~~~~[0m
        An argument for 'saturation' was not provided.
    [96msrc/color/parseToRgb.ts[0m:[93m74[0m:[93m28[0m - [91merror[0m[90m TS2554: [0mExpected 3-4 arguments, but got 1.

    [7m74[0m     const rgbColorString = hslToRgb(hslaMatched)
    [7m  [0m [91m                           ~~~~~~~~~~~~~~~~~~~~~[0m

      [96msrc/internalHelpers/_hslToRgb.ts[0m:[93m13[0m:[93m3[0m
        [7m13[0m   saturation: number,
        [7m  [0m [96m  ~~~~~~~~~~~~~~~~~~[0m
        An argument for 'saturation' was not provided.

FAIL src/color/test/setHue.test.ts
  ‚óè Test suite failed to run

    [96msrc/color/parseToRgb.ts[0m:[93m64[0m:[93m28[0m - [91merror[0m[90m TS2554: [0mExpected 3-4 arguments, but got 1.

    [7m64[0m     const rgbColorString = hslToRgb(hslMatched)
    [7m  [0m [91m                           ~~~~~~~~~~~~~~~~~~~~[0m

      [96msrc/internalHelpers/_hslToRgb.ts[0m:[93m13[0m:[93m3[0m
        [7m13[0m   saturation: number,
        [7m  [0m [96m  ~~~~~~~~~~~~~~~~~~[0m
        An argument for 'saturation' was not provided.
    [96msrc/color/parseToRgb.ts[0m:[93m74[0m:[93m28[0m - [91merror[0m[90m TS2554: [0mExpected 3-4 arguments, but got 1.

    [7m74[0m     const rgbColorString = hslToRgb(hslaMatched)
    [7m  [0m [91m                           ~~~~~~~~~~~~~~~~~~~~~[0m

      [96msrc/internalHelpers/_hslToRgb.ts[0m:[93m13[0m:[93m3[0m
        [7m13[0m   saturation: number,
        [7m  [0m [96m  ~~~~~~~~~~~~~~~~~~[0m
        An argument for 'saturation' was not provided.

FAIL src/helpers/test/modularScale.test.ts
  ‚óè Test suite failed to run

    [96msrc/helpers/test/modularScale.test.ts[0m:[93m7[0m:[93m34[0m - [91merror[0m[90m TS2554: [0mExpected 1-3 arguments, but got 0.

    [7m7[0m     expect(() => ({ 'font-size': modularScale() })).toThrow()
    [7m [0m [91m                                 ~~~~~~~~~~~~~~[0m

      [96msrc/helpers/modularScale.ts[0m:[93m53[0m:[93m3[0m
        [7m53[0m   steps: number,
        [7m  [0m [96m  ~~~~~~~~~~~~~[0m
        An argument for 'steps' was not provided.
    [96msrc/helpers/test/modularScale.test.ts[0m:[93m86[0m:[93m30[0m - [91merror[0m[90m TS2345: [0mArgument of type '"invalid"' is not assignable to parameter of type 'ModularScaleRatio'.

    [7m86[0m       modularScale(2, '1em', 'invalid')
    [7m  [0m [91m                             ~~~~~~~~~[0m

FAIL src/color/test/toColorString.test.ts
  ‚óè Test suite failed to run

    [96msrc/color/test/toColorString.test.ts[0m:[93m64[0m:[93m32[0m - [91merror[0m[90m TS2345: [0mArgument of type '{ red: number; green: number; hue: number; }' is not assignable to parameter of type 'Color'.
      Type '{ red: number; green: number; hue: number; }' is missing the following properties from type 'RgbaColor': alpha, blue

    [7m64[0m     expect(() => toColorString({ red: 255, green: 1, hue: 240 })).toThrow(
    [7m  [0m [91m                               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~[0m

FAIL src/color/test/setLightness.test.ts
  ‚óè Test suite failed to run

    [96msrc/color/parseToRgb.ts[0m:[93m64[0m:[93m28[0m - [91merror[0m[90m TS2554: [0mExpected 3-4 arguments, but got 1.

    [7m64[0m     const rgbColorString = hslToRgb(hslMatched)
    [7m  [0m [91m                           ~~~~~~~~~~~~~~~~~~~~[0m

      [96msrc/internalHelpers/_hslToRgb.ts[0m:[93m13[0m:[93m3[0m
        [7m13[0m   saturation: number,
        [7m  [0m [96m  ~~~~~~~~~~~~~~~~~~[0m
        An argument for 'saturation' was not provided.
    [96msrc/color/parseToRgb.ts[0m:[93m74[0m:[93m28[0m - [91merror[0m[90m TS2554: [0mExpected 3-4 arguments, but got 1.

    [7m74[0m     const rgbColorString = hslToRgb(hslaMatched)
    [7m  [0m [91m                           ~~~~~~~~~~~~~~~~~~~~~[0m

      [96msrc/internalHelpers/_hslToRgb.ts[0m:[93m13[0m:[93m3[0m
        [7m13[0m   saturation: number,
        [7m  [0m [96m  ~~~~~~~~~~~~~~~~~~[0m
        An argument for 'saturation' was not provided.

FAIL src/color/test/rgbToColorString.test.ts
  ‚óè Test suite failed to run

    [96msrc/color/test/rgbToColorString.test.ts[0m:[93m49[0m:[93m57[0m - [91merror[0m[90m TS2345: [0mArgument of type '{ red: number; green: number; hue: number; }' is not assignable to parameter of type 'RgbColor | RgbaColor'.
      Object literal may only specify known properties, and 'hue' does not exist in type 'RgbColor | RgbaColor'.

    [7m49[0m     expect(() => rgbToColorString({ red: 255, green: 1, hue: 240 })).toThrow(
    [7m  [0m [91m                                                        ~~~~~~~~[0m

FAIL src/color/test/setSaturation.test.ts
  ‚óè Test suite failed to run

    [96msrc/color/parseToRgb.ts[0m:[93m64[0m:[93m28[0m - [91merror[0m[90m TS2554: [0mExpected 3-4 arguments, but got 1.

    [7m64[0m     const rgbColorString = hslToRgb(hslMatched)
    [7m  [0m [91m                           ~~~~~~~~~~~~~~~~~~~~[0m

      [96msrc/internalHelpers/_hslToRgb.ts[0m:[93m13[0m:[93m3[0m
        [7m13[0m   saturation: number,
        [7m  [0m [96m  ~~~~~~~~~~~~~~~~~~[0m
        An argument for 'saturation' was not provided.
    [96msrc/color/parseToRgb.ts[0m:[93m74[0m:[93m28[0m - [91merror[0m[90m TS2554: [0mExpected 3-4 arguments, but got 1.

    [7m74[0m     const rgbColorString = hslToRgb(hslaMatched)
    [7m  [0m [91m                           ~~~~~~~~~~~~~~~~~~~~~[0m

      [96msrc/internalHelpers/_hslToRgb.ts[0m:[93m13[0m:[93m3[0m
        [7m13[0m   saturation: number,
        [7m  [0m [96m  ~~~~~~~~~~~~~~~~~~[0m
        An argument for 'saturation' was not provided.

FAIL src/color/test/readableColor.test.ts
  ‚óè Test suite failed to run

    [96msrc/color/getLuminance.ts[0m:[93m31[0m:[93m9[0m - [91merror[0m[90m TS2322: [0mType 'RgbColor | RgbaColor' is not assignable to type 'Record<string, number>'.
      Type 'RgbColor' is not assignable to type 'Record<string, number>'.
        Index signature for type 'string' is missing in type 'RgbColor'.

    [7m31[0m   const rgbColor: Record<string, number> = parseToRgb(color)
    [7m  [0m [91m        ~~~~~~~~[0m

FAIL src/color/test/rgba.test.ts
  ‚óè Test suite failed to run

    [96msrc/color/parseToRgb.ts[0m:[93m64[0m:[93m28[0m - [91merror[0m[90m TS2554: [0mExpected 3-4 arguments, but got 1.

    [7m64[0m     const rgbColorString = hslToRgb(hslMatched)
    [7m  [0m [91m                           ~~~~~~~~~~~~~~~~~~~~[0m

      [96msrc/internalHelpers/_hslToRgb.ts[0m:[93m13[0m:[93m3[0m
        [7m13[0m   saturation: number,
        [7m  [0m [96m  ~~~~~~~~~~~~~~~~~~[0m
        An argument for 'saturation' was not provided.
    [96msrc/color/parseToRgb.ts[0m:[93m74[0m:[93m28[0m - [91merror[0m[90m TS2554: [0mExpected 3-4 arguments, but got 1.

    [7m74[0m     const rgbColorString = hslToRgb(hslaMatched)
    [7m  [0m [91m                           ~~~~~~~~~~~~~~~~~~~~~[0m

      [96msrc/internalHelpers/_hslToRgb.ts[0m:[93m13[0m:[93m3[0m
        [7m13[0m   saturation: number,
        [7m  [0m [96m  ~~~~~~~~~~~~~~~~~~[0m
        An argument for 'saturation' was not provided.

FAIL src/color/test/mix.test.ts
  ‚óè Test suite failed to run

    [96msrc/color/mix.ts[0m:[93m48[0m:[93m24[0m - [91merror[0m[90m TS2345: [0mArgument of type 'string | number' is not assignable to parameter of type 'string'.
      Type 'number' is not assignable to type 'string'.

    [7m48[0m   const x = parseFloat(weight) * 2 - 1
    [7m  [0m [91m                       ~~~~~~[0m
    [96msrc/color/mix.ts[0m:[93m58[0m:[93m38[0m - [91merror[0m[90m TS2345: [0mArgument of type 'string | number' is not assignable to parameter of type 'string'.
      Type 'number' is not assignable to type 'string'.

    [7m58[0m     alpha: color1.alpha * parseFloat(weight) + color2.alpha * (1 - parseFloat(weight)),
    [7m  [0m [91m                                     ~~~~~~[0m
    [96msrc/color/mix.ts[0m:[93m58[0m:[93m79[0m - [91merror[0m[90m TS2345: [0mArgument of type 'string | number' is not assignable to parameter of type 'string'.
      Type 'number' is not assignable to type 'string'.

    [7m58[0m     alpha: color1.alpha * parseFloat(weight) + color2.alpha * (1 - parseFloat(weight)),
    [7m  [0m [91m                                                                              ~~~~~~[0m

FAIL src/color/test/opacify.test.ts
  ‚óè Test suite failed to run

    [96msrc/color/parseToRgb.ts[0m:[93m64[0m:[93m28[0m - [91merror[0m[90m TS2554: [0mExpected 3-4 arguments, but got 1.

    [7m64[0m     const rgbColorString = hslToRgb(hslMatched)
    [7m  [0m [91m                           ~~~~~~~~~~~~~~~~~~~~[0m

      [96msrc/internalHelpers/_hslToRgb.ts[0m:[93m13[0m:[93m3[0m
        [7m13[0m   saturation: number,
        [7m  [0m [96m  ~~~~~~~~~~~~~~~~~~[0m
        An argument for 'saturation' was not provided.
    [96msrc/color/parseToRgb.ts[0m:[93m74[0m:[93m28[0m - [91merror[0m[90m TS2554: [0mExpected 3-4 arguments, but got 1.

    [7m74[0m     const rgbColorString = hslToRgb(hslaMatched)
    [7m  [0m [91m                           ~~~~~~~~~~~~~~~~~~~~~[0m

      [96msrc/internalHelpers/_hslToRgb.ts[0m:[93m13[0m:[93m3[0m
        [7m13[0m   saturation: number,
        [7m  [0m [96m  ~~~~~~~~~~~~~~~~~~[0m
        An argument for 'saturation' was not provided.

FAIL src/color/test/parseToHsl.test.ts
  ‚óè Test suite failed to run

    [96msrc/color/parseToRgb.ts[0m:[93m64[0m:[93m28[0m - [91merror[0m[90m TS2554: [0mExpected 3-4 arguments, but got 1.

    [7m64[0m     const rgbColorString = hslToRgb(hslMatched)
    [7m  [0m [91m                           ~~~~~~~~~~~~~~~~~~~~[0m

      [96msrc/internalHelpers/_hslToRgb.ts[0m:[93m13[0m:[93m3[0m
        [7m13[0m   saturation: number,
        [7m  [0m [96m  ~~~~~~~~~~~~~~~~~~[0m
        An argument for 'saturation' was not provided.
    [96msrc/color/parseToRgb.ts[0m:[93m74[0m:[93m28[0m - [91merror[0m[90m TS2554: [0mExpected 3-4 arguments, but got 1.

    [7m74[0m     const rgbColorString = hslToRgb(hslaMatched)
    [7m  [0m [91m                           ~~~~~~~~~~~~~~~~~~~~~[0m

      [96msrc/internalHelpers/_hslToRgb.ts[0m:[93m13[0m:[93m3[0m
        [7m13[0m   saturation: number,
        [7m  [0m [96m  ~~~~~~~~~~~~~~~~~~[0m
        An argument for 'saturation' was not provided.

FAIL src/color/test/meetsContrastGuidelines.test.ts
  ‚óè Test suite failed to run

    [96msrc/color/getLuminance.ts[0m:[93m31[0m:[93m9[0m - [91merror[0m[90m TS2322: [0mType 'RgbColor | RgbaColor' is not assignable to type 'Record<string, number>'.
      Type 'RgbColor' is not assignable to type 'Record<string, number>'.
        Index signature for type 'string' is missing in type 'RgbColor'.

    [7m31[0m   const rgbColor: Record<string, number> = parseToRgb(color)
    [7m  [0m [91m        ~~~~~~~~[0m

FAIL src/color/test/invert.test.ts
  ‚óè Test suite failed to run

    [96msrc/color/parseToRgb.ts[0m:[93m64[0m:[93m28[0m - [91merror[0m[90m TS2554: [0mExpected 3-4 arguments, but got 1.

    [7m64[0m     const rgbColorString = hslToRgb(hslMatched)
    [7m  [0m [91m                           ~~~~~~~~~~~~~~~~~~~~[0m

      [96msrc/internalHelpers/_hslToRgb.ts[0m:[93m13[0m:[93m3[0m
        [7m13[0m   saturation: number,
        [7m  [0m [96m  ~~~~~~~~~~~~~~~~~~[0m
        An argument for 'saturation' was not provided.
    [96msrc/color/parseToRgb.ts[0m:[93m74[0m:[93m28[0m - [91merror[0m[90m TS2554: [0mExpected 3-4 arguments, but got 1.

    [7m74[0m     const rgbColorString = hslToRgb(hslaMatched)
    [7m  [0m [91m                           ~~~~~~~~~~~~~~~~~~~~~[0m

      [96msrc/internalHelpers/_hslToRgb.ts[0m:[93m13[0m:[93m3[0m
        [7m13[0m   saturation: number,
        [7m  [0m [96m  ~~~~~~~~~~~~~~~~~~[0m
        An argument for 'saturation' was not provided.

FAIL src/color/test/parseToRgb.test.ts
  ‚óè Test suite failed to run

    [96msrc/color/test/parseToRgb.test.ts[0m:[93m150[0m:[93m18[0m - [91merror[0m[90m TS2345: [0mArgument of type 'number' is not assignable to parameter of type 'string'.

    [7m150[0m       parseToRgb(12345)
    [7m   [0m [91m                 ~~~~~[0m

FAIL src/color/test/getContrast.test.ts
  ‚óè Test suite failed to run

    [96msrc/color/getLuminance.ts[0m:[93m31[0m:[93m9[0m - [91merror[0m[90m TS2322: [0mType 'RgbColor | RgbaColor' is not assignable to type 'Record<string, number>'.
      Type 'RgbColor' is not assignable to type 'Record<string, number>'.
        Index signature for type 'string' is missing in type 'RgbColor'.

    [7m31[0m   const rgbColor: Record<string, number> = parseToRgb(color)
    [7m  [0m [91m        ~~~~~~~~[0m

FAIL src/color/test/lighten.test.ts
  ‚óè Test suite failed to run

    [96msrc/color/parseToRgb.ts[0m:[93m64[0m:[93m28[0m - [91merror[0m[90m TS2554: [0mExpected 3-4 arguments, but got 1.

    [7m64[0m     const rgbColorString = hslToRgb(hslMatched)
    [7m  [0m [91m                           ~~~~~~~~~~~~~~~~~~~~[0m

      [96msrc/internalHelpers/_hslToRgb.ts[0m:[93m13[0m:[93m3[0m
        [7m13[0m   saturation: number,
        [7m  [0m [96m  ~~~~~~~~~~~~~~~~~~[0m
        An argument for 'saturation' was not provided.
    [96msrc/color/parseToRgb.ts[0m:[93m74[0m:[93m28[0m - [91merror[0m[90m TS2554: [0mExpected 3-4 arguments, but got 1.

    [7m74[0m     const rgbColorString = hslToRgb(hslaMatched)
    [7m  [0m [91m                           ~~~~~~~~~~~~~~~~~~~~~[0m

      [96msrc/internalHelpers/_hslToRgb.ts[0m:[93m13[0m:[93m3[0m
        [7m13[0m   saturation: number,
        [7m  [0m [96m  ~~~~~~~~~~~~~~~~~~[0m
        An argument for 'saturation' was not provided.

FAIL src/color/test/darken.test.ts
  ‚óè Test suite failed to run

    [96msrc/color/parseToRgb.ts[0m:[93m64[0m:[93m28[0m - [91merror[0m[90m TS2554: [0mExpected 3-4 arguments, but got 1.

    [7m64[0m     const rgbColorString = hslToRgb(hslMatched)
    [7m  [0m [91m                           ~~~~~~~~~~~~~~~~~~~~[0m

      [96msrc/internalHelpers/_hslToRgb.ts[0m:[93m13[0m:[93m3[0m
        [7m13[0m   saturation: number,
        [7m  [0m [96m  ~~~~~~~~~~~~~~~~~~[0m
        An argument for 'saturation' was not provided.
    [96msrc/color/parseToRgb.ts[0m:[93m74[0m:[93m28[0m - [91merror[0m[90m TS2554: [0mExpected 3-4 arguments, but got 1.

    [7m74[0m     const rgbColorString = hslToRgb(hslaMatched)
    [7m  [0m [91m                           ~~~~~~~~~~~~~~~~~~~~~[0m

      [96msrc/internalHelpers/_hslToRgb.ts[0m:[93m13[0m:[93m3[0m
        [7m13[0m   saturation: number,
        [7m  [0m [96m  ~~~~~~~~~~~~~~~~~~[0m
        An argument for 'saturation' was not provided.

FAIL src/color/test/grayscale.test.ts
  ‚óè Test suite failed to run

    [96msrc/color/parseToRgb.ts[0m:[93m64[0m:[93m28[0m - [91merror[0m[90m TS2554: [0mExpected 3-4 arguments, but got 1.

    [7m64[0m     const rgbColorString = hslToRgb(hslMatched)
    [7m  [0m [91m                           ~~~~~~~~~~~~~~~~~~~~[0m

      [96msrc/internalHelpers/_hslToRgb.ts[0m:[93m13[0m:[93m3[0m
        [7m13[0m   saturation: number,
        [7m  [0m [96m  ~~~~~~~~~~~~~~~~~~[0m
        An argument for 'saturation' was not provided.
    [96msrc/color/parseToRgb.ts[0m:[93m74[0m:[93m28[0m - [91merror[0m[90m TS2554: [0mExpected 3-4 arguments, but got 1.

    [7m74[0m     const rgbColorString = hslToRgb(hslaMatched)
    [7m  [0m [91m                           ~~~~~~~~~~~~~~~~~~~~~[0m

      [96msrc/internalHelpers/_hslToRgb.ts[0m:[93m13[0m:[93m3[0m
        [7m13[0m   saturation: number,
        [7m  [0m [96m  ~~~~~~~~~~~~~~~~~~[0m
        An argument for 'saturation' was not provided.

FAIL src/color/test/getLuminance.test.ts
  ‚óè Test suite failed to run

    [96msrc/color/getLuminance.ts[0m:[93m31[0m:[93m9[0m - [91merror[0m[90m TS2322: [0mType 'RgbColor | RgbaColor' is not assignable to type 'Record<string, number>'.
      Type 'RgbColor' is not assignable to type 'Record<string, number>'.
        Index signature for type 'string' is missing in type 'RgbColor'.

    [7m31[0m   const rgbColor: Record<string, number> = parseToRgb(color)
    [7m  [0m [91m        ~~~~~~~~[0m

FAIL src/color/test/complement.test.ts
  ‚óè Test suite failed to run

    [96msrc/color/parseToRgb.ts[0m:[93m64[0m:[93m28[0m - [91merror[0m[90m TS2554: [0mExpected 3-4 arguments, but got 1.

    [7m64[0m     const rgbColorString = hslToRgb(hslMatched)
    [7m  [0m [91m                           ~~~~~~~~~~~~~~~~~~~~[0m

      [96msrc/internalHelpers/_hslToRgb.ts[0m:[93m13[0m:[93m3[0m
        [7m13[0m   saturation: number,
        [7m  [0m [96m  ~~~~~~~~~~~~~~~~~~[0m
        An argument for 'saturation' was not provided.
    [96msrc/color/parseToRgb.ts[0m:[93m74[0m:[93m28[0m - [91merror[0m[90m TS2554: [0mExpected 3-4 arguments, but got 1.

    [7m74[0m     const rgbColorString = hslToRgb(hslaMatched)
    [7m  [0m [91m                           ~~~~~~~~~~~~~~~~~~~~~[0m

      [96msrc/internalHelpers/_hslToRgb.ts[0m:[93m13[0m:[93m3[0m
        [7m13[0m   saturation: number,
        [7m  [0m [96m  ~~~~~~~~~~~~~~~~~~[0m
        An argument for 'saturation' was not provided.

FAIL src/color/test/hslToColorString.test.ts
  ‚óè Test suite failed to run

    [96msrc/color/test/hslToColorString.test.ts[0m:[93m40[0m:[93m37[0m - [91merror[0m[90m TS2345: [0mArgument of type '{ red: number; green: number; hue: number; }' is not assignable to parameter of type 'number | HslColor | HslaColor'.
      Object literal may only specify known properties, and 'red' does not exist in type 'HslColor | HslaColor'.

    [7m40[0m     expect(() => hslToColorString({ red: 255, green: 1, hue: 240 })).toThrow(
    [7m  [0m [91m                                    ~~~~~~~~[0m

FAIL src/color/test/desaturate.test.ts
  ‚óè Test suite failed to run

    [96msrc/color/parseToRgb.ts[0m:[93m64[0m:[93m28[0m - [91merror[0m[90m TS2554: [0mExpected 3-4 arguments, but got 1.

    [7m64[0m     const rgbColorString = hslToRgb(hslMatched)
    [7m  [0m [91m                           ~~~~~~~~~~~~~~~~~~~~[0m

      [96msrc/internalHelpers/_hslToRgb.ts[0m:[93m13[0m:[93m3[0m
        [7m13[0m   saturation: number,
        [7m  [0m [96m  ~~~~~~~~~~~~~~~~~~[0m
        An argument for 'saturation' was not provided.
    [96msrc/color/parseToRgb.ts[0m:[93m74[0m:[93m28[0m - [91merror[0m[90m TS2554: [0mExpected 3-4 arguments, but got 1.

    [7m74[0m     const rgbColorString = hslToRgb(hslaMatched)
    [7m  [0m [91m                           ~~~~~~~~~~~~~~~~~~~~~[0m

      [96msrc/internalHelpers/_hslToRgb.ts[0m:[93m13[0m:[93m3[0m
        [7m13[0m   saturation: number,
        [7m  [0m [96m  ~~~~~~~~~~~~~~~~~~[0m
        An argument for 'saturation' was not provided.

FAIL src/color/test/adjustHue.test.ts
  ‚óè Test suite failed to run

    [96msrc/color/parseToRgb.ts[0m:[93m64[0m:[93m28[0m - [91merror[0m[90m TS2554: [0mExpected 3-4 arguments, but got 1.

    [7m64[0m     const rgbColorString = hslToRgb(hslMatched)
    [7m  [0m [91m                           ~~~~~~~~~~~~~~~~~~~~[0m

      [96msrc/internalHelpers/_hslToRgb.ts[0m:[93m13[0m:[93m3[0m
        [7m13[0m   saturation: number,
        [7m  [0m [96m  ~~~~~~~~~~~~~~~~~~[0m
        An argument for 'saturation' was not provided.
    [96msrc/color/parseToRgb.ts[0m:[93m74[0m:[93m28[0m - [91merror[0m[90m TS2554: [0mExpected 3-4 arguments, but got 1.

    [7m74[0m     const rgbColorString = hslToRgb(hslaMatched)
    [7m  [0m [91m                           ~~~~~~~~~~~~~~~~~~~~~[0m

      [96msrc/internalHelpers/_hslToRgb.ts[0m:[93m13[0m:[93m3[0m
        [7m13[0m   saturation: number,
        [7m  [0m [96m  ~~~~~~~~~~~~~~~~~~[0m
        An argument for 'saturation' was not provided.


Test Suites: 68 failed, 19 passed, 87 total
Tests:       99 failed, 316 passed, 415 total
Snapshots:   0 total
Time:        3.948 s
Ran all test suites matching /src/i.
‚ÄâELIFECYCLE‚Äâ Test failed. See above for more details.
